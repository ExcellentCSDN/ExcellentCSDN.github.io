<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/2020/11/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>markdown基本编写规范</title>
    <url>/2020/11/26/markdown%E5%9F%BA%E6%9C%AC%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="编写规范"><a href="#编写规范" class="headerlink" title="编写规范"></a>编写规范</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>阅读全文</p>
<a id="more"></a>
<ul>
<li>列表1</li>
<li>列表2<pre><code>a
b</code></pre>
</li>
<li>列表3</li>
</ul>
<p><a href="https://github.com/ExcellentCSDN">github导航</a><br><img src="E:\software\boke\blog\public\images\apple-touch-icon-next.png" alt="图片"></p>
<p><em>斜体</em><br><strong>加粗</strong></p>
<h2 id="加横线"><a href="#加横线" class="headerlink" title="加横线"></a>加横线</h2><hr>
<p><code>代码html</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">      html</span><br><span class="line">          html</span><br><span class="line">      html</span><br><span class="line">html</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引用</p>
</blockquote>
]]></content>
      <categories>
        <category>练习</category>
      </categories>
  </entry>
  <entry>
    <title>c++学习代码总结（基础知识篇）</title>
    <url>/2020/11/28/c++%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93%EF%BC%88%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<h2 id="这是我在学习c-过程中根据视频上的讲解和例子，加自己的理解，总结出来每一个知识点完整的练习代码，每个代码均可在Visual-Studio-2017中运行。"><a href="#这是我在学习c-过程中根据视频上的讲解和例子，加自己的理解，总结出来每一个知识点完整的练习代码，每个代码均可在Visual-Studio-2017中运行。" class="headerlink" title="这是我在学习c++过程中根据视频上的讲解和例子，加自己的理解，总结出来每一个知识点完整的练习代码，每个代码均可在Visual Studio 2017中运行。"></a>这是我在学习c++过程中根据视频上的讲解和例子，加自己的理解，总结出来每一个知识点完整的练习代码，每个代码均可在Visual Studio 2017中运行。</h2><a id="more"></a>


<p>配套视频：<br><a href="https://www.bilibili.com/video/BV1et411b73Z">https://www.bilibili.com/video/BV1et411b73Z</a><br>原作者为黑马程序</p>
<p>C++基础入门<br>1 C++初识<br>1.1 第一个C++程序<br>编写一个C++程序总共分为4个步骤</p>
<p>创建项目<br>创建文件<br>编写代码<br>运行程序<br>1.1.1 创建项目<br>​ Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p>
<p>1.1.2 创建文件<br>1.1.3 编写代码<br>#include<iostream><br>using namespace std;</p>
<p>int main() {</p>
<pre><code>cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1.1.4 运行程序<br>1.2 注释<br>作用：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>
<p>两种格式</p>
<p>单行注释：// 描述信息<br>通常放在一行代码的上方，或者一条语句的末尾，对该行代码说明<br>多行注释： /* 描述信息 */<br>通常放在一段代码的上方，对该段代码做整体说明<br>提示：编译器在编译代码时，会忽略注释的内容</p>
<p>1.3 变量<br>作用：给一段指定的内存空间起名，方便操作这段内存</p>
<p>语法：数据类型 变量名 = 初始值;</p>
<p>示例：</p>
<p>#include<iostream><br>using namespace std;</p>
<p>int main() {</p>
<pre><code>//变量的定义
//语法：数据类型  变量名 = 初始值

int a = 10;

cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>
<p>1.4 常量<br>作用：用于记录程序中不可更改的数据</p>
<p>C++定义常量两种方式</p>
<p>#define 宏常量： #define 常量名 常量值</p>
<p>通常在文件上方定义，表示一个常量<br>const修饰的变量 const 数据类型 常量名 = 常量值</p>
<p>通常在变量定义前加关键字const，修饰该变量为常量，不可修改<br>示例：</p>
<p>//1、宏常量<br>#define day 7</p>
<p>int main() {</p>
<pre><code>cout &lt;&lt; &quot;一周里总共有 &quot; &lt;&lt; day &lt;&lt; &quot; 天&quot; &lt;&lt; endl;
//day = 8;  //报错，宏常量不可以修改

//2、const修饰变量
const int month = 12;
cout &lt;&lt; &quot;一年里总共有 &quot; &lt;&lt; month &lt;&lt; &quot; 个月份&quot; &lt;&lt; endl;
//month = 24; //报错，常量是不可以修改的


system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1.5 关键字<br><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p>
<p>在定义变量或者常量时候，不要用关键字<br>C++关键字如下：</p>
<p>asm    do    if    return    typedef<br>auto    double    inline    short    typeid<br>bool    dynamic_cast    int    signed    typename<br>break    else    long    sizeof    union<br>case    enum    mutable    static    unsigned<br>catch    explicit    namespace    static_cast    using<br>char    export    new    struct    virtual<br>class    extern    operator    switch    void<br>const    false    private    template    volatile<br>const_cast    float    protected    this    wchar_t<br>continue    for    public    throw    while<br>default    friend    register    true<br>delete    goto    reinterpret_cast    try<br>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</p>
<p>1.6 标识符命名规则<br>作用：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>
<p>标识符不能是关键字<br>标识符只能由字母、数字、下划线组成<br>第一个字符必须为字母或下划线<br>标识符中字母区分大小写<br>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>
<p>2 数据类型<br>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>
<p>2.1 整型<br>作用：整型变量表示的是整数类型的数据</p>
<p>C++中能够表示整型的类型有以下几种方式，区别在于所占内存空间不同：</p>
<p>数据类型    占用空间    取值范围<br>short(短整型)    2字节    (-2^15 ~ 2^15-1)<br>int(整型)    4字节    (-2^31 ~ 2^31-1)<br>long(长整形)    Windows为4字节，Linux为4字节(32位)，8字节(64位)    (-2^31 ~ 2^31-1)<br>long long(长长整形)    8字节    (-2^63 ~ 2^63-1)<br>2.2 sizeof关键字<br><strong>作用：</strong>利用sizeof关键字可以统计数据类型所占内存大小</p>
<p>语法： sizeof( 数据类型 / 变量)</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>cout &lt;&lt; &quot;short 类型所占内存空间为： &quot; &lt;&lt; sizeof(short) &lt;&lt; endl;

cout &lt;&lt; &quot;int 类型所占内存空间为： &quot; &lt;&lt; sizeof(int) &lt;&lt; endl;

cout &lt;&lt; &quot;long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long) &lt;&lt; endl;

cout &lt;&lt; &quot;long long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long long) &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>整型结论：short &lt; int &lt;= long &lt;= long long</p>
<p>2.3 实型（浮点型）<br>作用：用于表示小数</p>
<p>浮点型变量分为两种：</p>
<p>单精度float<br>双精度double<br>两者的区别在于表示的有效数字范围不同。</p>
<p>数据类型    占用空间    有效数字范围<br>float    4字节    7位有效数字<br>double    8字节    15～16位有效数字<br>示例：</p>
<p>int main() {</p>
<pre><code>float f1 = 3.14f;
double d1 = 3.14;

cout &lt;&lt; f1 &lt;&lt; endl;
cout &lt;&lt; d1&lt;&lt; endl;

cout &lt;&lt; &quot;float  sizeof = &quot; &lt;&lt; sizeof(f1) &lt;&lt; endl;
cout &lt;&lt; &quot;double sizeof = &quot; &lt;&lt; sizeof(d1) &lt;&lt; endl;

//科学计数法
float f2 = 3e2; // 3 * 10 ^ 2 
cout &lt;&lt; &quot;f2 = &quot; &lt;&lt; f2 &lt;&lt; endl;

float f3 = 3e-2;  // 3 * 0.1 ^ 2
cout &lt;&lt; &quot;f3 = &quot; &lt;&lt; f3 &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>2.4 字符型<br><strong>作用：</strong>字符型变量用于显示单个字符</p>
<p>语法：char ch = ‘a’;</p>
<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>
<p>注意2：单引号内只能有一个字符，不可以是字符串</p>
<p>C和C++中字符型变量只占用1个字节。<br>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元<br>示例：</p>
<p>int main() {</p>
<pre><code>char ch = &#39;a&#39;;
cout &lt;&lt; ch &lt;&lt; endl;
cout &lt;&lt; sizeof(char) &lt;&lt; endl;

//ch = &quot;abcde&quot;; //错误，不可以用双引号
//ch = &#39;abcde&#39;; //错误，单引号内只能引用一个字符

cout &lt;&lt; (int)ch &lt;&lt; endl;  //查看字符a对应的ASCII码
ch = 97; //可以直接用ASCII给字符型变量赋值
cout &lt;&lt; ch &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>ASCII码表格：</p>
<p>ASCII值    控制字符    ASCII值    字符    ASCII值    字符    ASCII值    字符<br>0    NUT    32    (space)    64    @    96    、<br>1    SOH    33    !    65    A    97    a<br>2    STX    34    “    66    B    98    b<br>3    ETX    35    #    67    C    99    c<br>4    EOT    36    $    68    D    100    d<br>5    ENQ    37    %    69    E    101    e<br>6    ACK    38    &amp;    70    F    102    f<br>7    BEL    39    ,    71    G    103    g<br>8    BS    40    (    72    H    104    h<br>9    HT    41    )    73    I    105    i<br>10    LF    42    *    74    J    106    j<br>11    VT    43    +    75    K    107    k<br>12    FF    44    ,    76    L    108    l<br>13    CR    45    -    77    M    109    m<br>14    SO    46    .    78    N    110    n<br>15    SI    47    /    79    O    111    o<br>16    DLE    48    0    80    P    112    p<br>17    DCI    49    1    81    Q    113    q<br>18    DC2    50    2    82    R    114    r<br>19    DC3    51    3    83    S    115    s<br>20    DC4    52    4    84    T    116    t<br>21    NAK    53    5    85    U    117    u<br>22    SYN    54    6    86    V    118    v<br>23    TB    55    7    87    W    119    w<br>24    CAN    56    8    88    X    120    x<br>25    EM    57    9    89    Y    121    y<br>26    SUB    58    :    90    Z    122    z<br>27    ESC    59    ;    91    [    123    {<br>28    FS    60    &lt;    92    /    124    |<br>29    GS    61    =    93    ]    125    }<br>30    RS    62    &gt;    94    ^    126    `<br>31    US    63    ?    95    _    127    DEL<br>ASCII 码大致由以下两部分组成：</p>
<p>ASCII 非打印控制字符： ASCII 表上的数字 0-31 分配给了控制字符，用于控制像打印机等一些外围设备。<br>ASCII 打印字符：数字 32-126 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。<br>2.5 转义字符<br><strong>作用：</strong>用于表示一些不能显示出来的ASCII字符</p>
<p>现阶段我们常用的转义字符有：\n \ \t</p>
<p>转义字符    含义    ASCII码值（十进制）<br>\a    警报    007<br>\b    退格(BS) ，将当前位置移到前一列    008<br>\f    换页(FF)，将当前位置移到下页开头    012<br>\n    换行(LF) ，将当前位置移到下一行开头    010<br>\r    回车(CR) ，将当前位置移到本行开头    013<br>\t    水平制表(HT) （跳到下一个TAB位置）    009<br>\v    垂直制表(VT)    011<br>\    代表一个反斜线字符””    092<br>’    代表一个单引号（撇号）字符    039<br>“    代表一个双引号字符    034<br>?    代表一个问号    063<br>\0    数字0    000<br>\ddd    8进制转义字符，d范围0<del>7    3位8进制<br>\xhh    16进制转义字符，h范围09，af，A</del>F    3位16进制<br>示例：</p>
<p>int main() {</p>
<pre><code>cout &lt;&lt; &quot;\\&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;\tHello&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;\n&quot; &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>2.6 字符串型<br>作用：用于表示一串字符</p>
<p>两种风格</p>
<p>C风格字符串： char 变量名[] = “字符串值”</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>char str1[] = &quot;hello world&quot;;
cout &lt;&lt; str1 &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>注意：C风格的字符串要用双引号括起来</p>
<p>C++风格字符串： string 变量名 = “字符串值”</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>string str = &quot;hello world&quot;;
cout &lt;&lt; str &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>​</p>
<p>注意：C++风格字符串，需要加入头文件==#include<string>==</p>
<p>2.7 布尔类型 bool<br><strong>作用：</strong>布尔数据类型代表真或假的值</p>
<p>bool类型只有两个值：</p>
<p>true — 真（本质是1）<br>false — 假（本质是0）<br>bool类型占1个字节大小</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>bool flag = true;
cout &lt;&lt; flag &lt;&lt; endl; // 1

flag = false;
cout &lt;&lt; flag &lt;&lt; endl; // 0

cout &lt;&lt; &quot;size of bool = &quot; &lt;&lt; sizeof(bool) &lt;&lt; endl; //1

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>2.8 数据的输入<br>作用：用于从键盘获取数据</p>
<p><strong>关键字：</strong>cin</p>
<p>语法： cin &gt;&gt; 变量</p>
<p>示例：</p>
<p>int main(){</p>
<pre><code>//整型输入
int a = 0;
cout &lt;&lt; &quot;请输入整型变量：&quot; &lt;&lt; endl;
cin &gt;&gt; a;
cout &lt;&lt; a &lt;&lt; endl;

//浮点型输入
double d = 0;
cout &lt;&lt; &quot;请输入浮点型变量：&quot; &lt;&lt; endl;
cin &gt;&gt; d;
cout &lt;&lt; d &lt;&lt; endl;

//字符型输入
char ch = 0;
cout &lt;&lt; &quot;请输入字符型变量：&quot; &lt;&lt; endl;
cin &gt;&gt; ch;
cout &lt;&lt; ch &lt;&lt; endl;

//字符串型输入
string str;
cout &lt;&lt; &quot;请输入字符串型变量：&quot; &lt;&lt; endl;
cin &gt;&gt; str;
cout &lt;&lt; str &lt;&lt; endl;

//布尔类型输入
bool flag = true;
cout &lt;&lt; &quot;请输入布尔型变量：&quot; &lt;&lt; endl;
cin &gt;&gt; flag;
cout &lt;&lt; flag &lt;&lt; endl;
system(&quot;pause&quot;);
return EXIT_SUCCESS;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>3 运算符<br><strong>作用：</strong>用于执行代码的运算</p>
<p>本章我们主要讲解以下几类运算符：</p>
<p>运算符类型    作用<br>算术运算符    用于处理四则运算<br>赋值运算符    用于将表达式的值赋给变量<br>比较运算符    用于表达式的比较，并返回一个真值或假值<br>逻辑运算符    用于根据表达式的值返回真值或假值<br>3.1 算术运算符<br>作用：用于处理四则运算</p>
<p>算术运算符包括以下符号：</p>
<p>运算符    术语    示例    结果</p>
<ul>
<li>   正号    +3    3</li>
</ul>
<ul>
<li>   负号    -3    -3</li>
</ul>
<ul>
<li>   加    10 + 5    15</li>
</ul>
<ul>
<li>   减    10 - 5    5</li>
</ul>
<ul>
<li>   乘    10 * 5    50<br>/    除    10 / 5    2<br>%    取模(取余)    10 % 3    1</li>
</ul>
<p>++    前置递增    a=2; b=++a;    a=3; b=3;<br>++    后置递增    a=2; b=a++;    a=3; b=2;<br>–    前置递减    a=2; b=–a;    a=1; b=1;<br>–    后置递减    a=2; b=a–;    a=1; b=2;<br>示例1：</p>
<p>//加减乘除<br>int main() {</p>
<pre><code>int a1 = 10;
int b1 = 3;

cout &lt;&lt; a1 + b1 &lt;&lt; endl;
cout &lt;&lt; a1 - b1 &lt;&lt; endl;
cout &lt;&lt; a1 * b1 &lt;&lt; endl;
cout &lt;&lt; a1 / b1 &lt;&lt; endl;  //两个整数相除结果依然是整数

int a2 = 10;
int b2 = 20;
cout &lt;&lt; a2 / b2 &lt;&lt; endl; 

int a3 = 10;
int b3 = 0;
//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0


//两个小数可以相除
double d1 = 0.5;
double d2 = 0.25;
cout &lt;&lt; d1 / d2 &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>总结：在除法运算中，除数不能为0</p>
<p>示例2：</p>
<p>//取模<br>int main() {</p>
<pre><code>int a1 = 10;
int b1 = 3;

cout &lt;&lt; 10 % 3 &lt;&lt; endl;

int a2 = 10;
int b2 = 20;

cout &lt;&lt; a2 % b2 &lt;&lt; endl;

int a3 = 10;
int b3 = 0;

//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0

//两个小数不可以取模
double d1 = 3.14;
double d2 = 1.1;

//cout &lt;&lt; d1 % d2 &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>总结：只有整型变量可以进行取模运算</p>
<p>示例3：</p>
<p>//递增<br>int main() {</p>
<pre><code>//后置递增
int a = 10;
a++; //等价于a = a + 1
cout &lt;&lt; a &lt;&lt; endl; // 11

//前置递增
int b = 10;
++b;
cout &lt;&lt; b &lt;&lt; endl; // 11

//区别
//前置递增先对变量进行++，再计算表达式
int a2 = 10;
int b2 = ++a2 * 10;
cout &lt;&lt; b2 &lt;&lt; endl;

//后置递增先计算表达式，后对变量进行++
int a3 = 10;
int b3 = a3++ * 10;
cout &lt;&lt; b3 &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>
<p>3.2 赋值运算符<br><strong>作用：</strong>用于将表达式的值赋给变量</p>
<p>赋值运算符包括以下几个符号：</p>
<p>运算符    术语    示例    结果<br>=    赋值    a=2; b=3;    a=2; b=3;<br>+=    加等于    a=0; a+=2;    a=2;<br>-=    减等于    a=5; a-=3;    a=2;<br><em>=    乘等于    a=2; a</em>=2;    a=4;<br>/=    除等于    a=4; a/=2;    a=2;<br>%=    模等于    a=3; a%2;    a=1;<br>示例：</p>
<p>int main() {</p>
<pre><code>//赋值运算符

// =
int a = 10;
a = 100;
cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

// +=
a = 10;
a += 2; // a = a + 2;
cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

// -=
a = 10;
a -= 2; // a = a - 2
cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

// *=
a = 10;
a *= 2; // a = a * 2
cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

// /=
a = 10;
a /= 2;  // a = a / 2;
cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

// %=
a = 10;
a %= 2;  // a = a % 2;
cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>3.3 比较运算符<br><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p>
<p>比较运算符有以下符号：</p>
<p>运算符    术语    示例    结果<br>==    相等于    4 == 3    0<br>!=    不等于    4 != 3    1<br>&lt;    小于    4 &lt; 3    0</p>
<blockquote>
<p>   大于    4 &gt; 3    1<br>&lt;=    小于等于    4 &lt;= 3    0<br>=    大于等于    4 &gt;= 1    1<br>示例：</p>
</blockquote>
<p>int main() {</p>
<pre><code>int a = 10;
int b = 20;

cout &lt;&lt; (a == b) &lt;&lt; endl; // 0 

cout &lt;&lt; (a != b) &lt;&lt; endl; // 1

cout &lt;&lt; (a &gt; b) &lt;&lt; endl; // 0

cout &lt;&lt; (a &lt; b) &lt;&lt; endl; // 1

cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; // 0

cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; // 1

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>注意：C和C++ 语言的比较运算中， “真”用数字“1”来表示， “假”用数字“0”来表示。</p>
<p>3.4 逻辑运算符<br><strong>作用：</strong>用于根据表达式的值返回真值或假值</p>
<p>逻辑运算符有以下符号：</p>
<p>运算符    术语    示例    结果<br>!    非    !a    如果a为假，则!a为真； 如果a为真，则!a为假。<br>&amp;&amp;    与    a &amp;&amp; b    如果a和b都为真，则结果为真，否则为假。<br>||    或    a || b    如果a和b有一个为真，则结果为真，二者都为假时，结果为假。<br><strong>示例1：</strong>逻辑非</p>
<p>//逻辑运算符  — 非<br>int main() {</p>
<pre><code>int a = 10;

cout &lt;&lt; !a &lt;&lt; endl; // 0

cout &lt;&lt; !!a &lt;&lt; endl; // 1

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>总结： 真变假，假变真</p>
<p><strong>示例2：</strong>逻辑与</p>
<p>//逻辑运算符  — 与<br>int main() {</p>
<pre><code>int a = 10;
int b = 10;

cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 1

a = 10;
b = 0;

cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0 

a = 0;
b = 0;

cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>总结：逻辑与运算符总结： 同真为真，其余为假</p>
<p><strong>示例3：</strong>逻辑或</p>
<p>//逻辑运算符  — 或<br>int main() {</p>
<pre><code>int a = 10;
int b = 10;

cout &lt;&lt; (a || b) &lt;&lt; endl;// 1

a = 10;
b = 0;

cout &lt;&lt; (a || b) &lt;&lt; endl;// 1 

a = 0;
b = 0;

cout &lt;&lt; (a || b) &lt;&lt; endl;// 0

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>逻辑或运算符总结： 同假为假，其余为真</p>
<p>4 程序流程结构<br>C/C++支持最基本的三种程序运行结构：顺序结构、选择结构、循环结构</p>
<p>顺序结构：程序按顺序执行，不发生跳转<br>选择结构：依据条件是否满足，有选择的执行相应功能<br>循环结构：依据条件是否满足，循环多次执行某段代码<br>4.1 选择结构<br>4.1.1 if语句<br><strong>作用：</strong>执行满足条件的语句</p>
<p>if语句的三种形式</p>
<p>单行格式if语句</p>
<p>多行格式if语句</p>
<p>多条件的if语句</p>
<p>​</p>
<p>单行格式if语句：if(条件){ 条件满足执行的语句 }</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-vzgo2ykW-1599301407524)(assets/clip_image002.png)]</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>//选择结构-单行if语句
//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印

int score = 0;
cout &lt;&lt; &quot;请输入一个分数：&quot; &lt;&lt; endl;
cin &gt;&gt; score;

cout &lt;&lt; &quot;您输入的分数为： &quot; &lt;&lt; score &lt;&lt; endl;

//if语句
//注意事项，在if判断语句后面，不要加分号
if (score &gt; 600)
&#123;
    cout &lt;&lt; &quot;我考上了一本大学！！！&quot; &lt;&lt; endl;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>​</p>
<p>注意：if条件表达式后不要加分号</p>
<p>多行格式if语句：if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 };<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-37UcReby-1599301407525)(assets/clip_image002-1541662519170.png)]</p>
<p>​</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>int score = 0;

cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;

cin &gt;&gt; score;

if (score &gt; 600)
&#123;
    cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;我未考上一本大学&quot; &lt;&lt; endl;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>多条件的if语句：if(条件1){ 条件1满足执行的语句 }else if(条件2){条件2满足执行的语句}… else{ 都不满足执行的语句}<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-1OMyrQYG-1599301407526)(assets/clip_image002-1541662566808.png)]</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>示例：</p>
<pre><code>int main() &#123;

int score = 0;

cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;

cin &gt;&gt; score;

if (score &gt; 600)
&#123;
    cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;
&#125;
else if (score &gt; 500)
&#123;
    cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;
&#125;
else if (score &gt; 400)
&#123;
    cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>​</p>
<p>嵌套if语句：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>
<p>案例需求：</p>
<p>提示用户输入一个高考考试分数，根据分数做如下判断<br>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；<br>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。<br>示例：</p>
<p>int main() {</p>
<pre><code>int score = 0;

cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;

cin &gt;&gt; score;

if (score &gt; 600)
&#123;
    cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;
    if (score &gt; 700)
    &#123;
        cout &lt;&lt; &quot;我考上了北大&quot; &lt;&lt; endl;
    &#125;
    else if (score &gt; 650)
    &#123;
        cout &lt;&lt; &quot;我考上了清华&quot; &lt;&lt; endl;
    &#125;
    else
    &#123;
        cout &lt;&lt; &quot;我考上了人大&quot; &lt;&lt; endl;
    &#125;

&#125;
else if (score &gt; 500)
&#123;
    cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;
&#125;
else if (score &gt; 400)
&#123;
    cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>练习案例： 三只小猪称体重</p>
<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-CQ0ZUuNG-1599301407527)(assets/三只小猪.jpg)]</p>
<p>4.1.2 三目运算符<br>作用： 通过三目运算符实现简单的判断</p>
<p>语法：表达式1 ? 表达式2 ：表达式3</p>
<p>解释：</p>
<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>
<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>int a = 10;
int b = 20;
int c = 0;

c = a &gt; b ? a : b;
cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;

//C++中三目运算符返回的是变量,可以继续赋值

(a &gt; b ? a : b) = 100;

cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;
cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>
<p>4.1.3 switch语句<br><strong>作用：</strong>执行多条件分支语句</p>
<p>语法：</p>
<p>switch(表达式)</p>
<p>{</p>
<pre><code>case 结果1：执行语句;break;

case 结果2：执行语句;break;

...

default:执行语句;break;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>示例：</p>
<p>int main() {</p>
<pre><code>//请给电影评分 
//10 ~ 9   经典   
// 8 ~ 7   非常好
// 6 ~ 5   一般
// 5分以下 烂片

int score = 0;
cout &lt;&lt; &quot;请给电影打分&quot; &lt;&lt; endl;
cin &gt;&gt; score;

switch (score)
&#123;
case 10:
case 9:
    cout &lt;&lt; &quot;经典&quot; &lt;&lt; endl;
    break;
case 8:
    cout &lt;&lt; &quot;非常好&quot; &lt;&lt; endl;
    break;
case 7:
case 6:
    cout &lt;&lt; &quot;一般&quot; &lt;&lt; endl;
    break;
default:
    cout &lt;&lt; &quot;烂片&quot; &lt;&lt; endl;
    break;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>注意1：switch语句中表达式类型只能是整型或者字符型</p>
<p>注意2：case里如果没有break，那么程序会一直向下执行</p>
<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>
<p>4.2 循环结构<br>4.2.1 while循环语句<br><strong>作用：</strong>满足循环条件，执行循环语句</p>
<p>语法：while(循环条件){ 循环语句 }</p>
<p>解释：只要循环条件的结果为真，就执行循环语句</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-iityGr12-1599301407528)(assets/clip_image002-1541668640382.png)]</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>int num = 0;
while (num &lt; 10)
&#123;
    cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;
    num++;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>
<p>while循环练习案例：猜数字</p>
<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-JaNbi9Gk-1599301407529)(assets/猜数字.jpg)]</p>
<p>4.2.2 do…while循环语句<br>作用： 满足循环条件，执行循环语句</p>
<p>语法： do{ 循环语句 } while(循环条件);</p>
<p><strong>注意：</strong>与while的区别在于do…while会先执行一次循环语句，再判断循环条件</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-r1P72pnk-1599301407530)(assets/clip_image002-1541671163478.png)]</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>int num = 0;

do
&#123;
    cout &lt;&lt; num &lt;&lt; endl;
    num++;

&#125; while (num &lt; 10);


system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p>
<p>练习案例：水仙花数</p>
<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>
<p>例如：1^3 + 5^3+ 3^3 = 153</p>
<p>请利用do…while语句，求出所有3位数中的水仙花数</p>
<p>4.2.3 for循环语句<br>作用： 满足循环条件，执行循环语句</p>
<p>语法：for(起始表达式;条件表达式;末尾循环体) { 循环语句; }</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>for (int i = 0; i &lt; 10; i++)
&#123;
    cout &lt;&lt; i &lt;&lt; endl;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>详解：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-roSwB0El-1599301407530)(assets/1541673704101.png)]</p>
<p>注意：for循环中的表达式，要用分号进行分隔</p>
<p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>
<p>练习案例：敲桌子</p>
<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-29Xz5fOb-1599301407531)(assets/timg.gif)]</p>
<p>4.2.4 嵌套循环<br>作用： 在循环体中再嵌套一层循环，解决一些实际问题</p>
<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-kp4qPIq9-1599301407532)(assets/1541676003486.png)]</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>//外层循环执行1次，内层循环执行1轮
for (int i = 0; i &lt; 10; i++)
&#123;
    for (int j = 0; j &lt; 10; j++)
    &#123;
        cout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;
    &#125;
    cout &lt;&lt; endl;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br><strong>练习案例：</strong>乘法口诀表</p>
<p>案例描述：利用嵌套循环，实现九九乘法表</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-nggL56CD-1599301407533)(assets/0006018857256120_b.jpg)]</p>
<p>4.3 跳转语句<br>4.3.1 break语句<br>作用: 用于跳出选择结构或者循环结构</p>
<p>break使用的时机：</p>
<p>出现在switch条件语句中，作用是终止case并跳出switch<br>出现在循环语句中，作用是跳出当前的循环语句<br>出现在嵌套循环中，跳出最近的内层循环语句<br>示例1：</p>
<p>int main() {<br>    //1、在switch 语句中使用break<br>    cout &lt;&lt; “请选择您挑战副本的难度：” &lt;&lt; endl;<br>    cout &lt;&lt; “1、普通” &lt;&lt; endl;<br>    cout &lt;&lt; “2、中等” &lt;&lt; endl;<br>    cout &lt;&lt; “3、困难” &lt;&lt; endl;</p>
<pre><code>int num = 0;

cin &gt;&gt; num;

switch (num)
&#123;
case 1:
    cout &lt;&lt; &quot;您选择的是普通难度&quot; &lt;&lt; endl;
    break;
case 2:
    cout &lt;&lt; &quot;您选择的是中等难度&quot; &lt;&lt; endl;
    break;
case 3:
    cout &lt;&lt; &quot;您选择的是困难难度&quot; &lt;&lt; endl;
    break;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>示例2：</p>
<p>int main() {<br>    //2、在循环语句中用break<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        if (i == 5)<br>        {<br>            break; //跳出循环语句<br>        }<br>        cout &lt;&lt; i &lt;&lt; endl;<br>    }</p>
<pre><code>system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>示例3：</p>
<p>int main() {<br>    //在嵌套循环语句中使用break，退出内层循环<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        for (int j = 0; j &lt; 10; j++)<br>        {<br>            if (j == 5)<br>            {<br>                break;<br>            }<br>            cout &lt;&lt; “*” &lt;&lt; “ “;<br>        }<br>        cout &lt;&lt; endl;<br>    }</p>
<pre><code>system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>4.3.2 continue语句<br><strong>作用：</strong>在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>for (int i = 0; i &lt; 100; i++)
&#123;
    if (i % 2 == 0)
    &#123;
        continue;
    &#125;
    cout &lt;&lt; i &lt;&lt; endl;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>注意：continue并没有使整个循环终止，而break会跳出循环</p>
<p>4.3.3 goto语句<br><strong>作用：</strong>可以无条件跳转语句</p>
<p>语法： goto 标记;</p>
<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>cout &lt;&lt; &quot;1&quot; &lt;&lt; endl;

goto FLAG;

cout &lt;&lt; &quot;2&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;3&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;4&quot; &lt;&lt; endl;

FLAG:

cout &lt;&lt; &quot;5&quot; &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>
<p>5 数组<br>5.1 概述<br>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>
<p><strong>特点1：</strong>数组中的每个数据元素都是相同的数据类型</p>
<p><strong>特点2：</strong>数组是由连续的内存位置组成的</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-cOenFQXL-1599301407534)(assets/1541748375356.png)]</p>
<p>5.2 一维数组<br>5.2.1 一维数组定义方式<br>一维数组定义的三种方式：</p>
<p>数据类型 数组名[ 数组长度 ];<br>数据类型 数组名[ 数组长度 ] = { 值1，值2 …};<br>数据类型 数组名[ ] = { 值1，值2 …};<br>示例</p>
<p>int main() {</p>
<pre><code>//定义方式1
//数据类型 数组名[元素个数];
int score[10];

//利用下标赋值
score[0] = 100;
score[1] = 99;
score[2] = 85;

//利用下标输出
cout &lt;&lt; score[0] &lt;&lt; endl;
cout &lt;&lt; score[1] &lt;&lt; endl;
cout &lt;&lt; score[2] &lt;&lt; endl;


//第二种定义方式
//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;
//如果&#123;&#125;内不足10个数据，剩余数据用0补全
int score2[10] = &#123; 100, 90,80,70,60,50,40,30,20,10 &#125;;

//逐个输出
//cout &lt;&lt; score2[0] &lt;&lt; endl;
//cout &lt;&lt; score2[1] &lt;&lt; endl;

//一个一个输出太麻烦，因此可以利用循环进行输出
for (int i = 0; i &lt; 10; i++)
&#123;
    cout &lt;&lt; score2[i] &lt;&lt; endl;
&#125;

//定义方式3
//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;
int score3[] = &#123; 100,90,80,70,60,50,40,30,20,10 &#125;;

for (int i = 0; i &lt; 10; i++)
&#123;
    cout &lt;&lt; score3[i] &lt;&lt; endl;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>
<p>总结2：数组中下标是从0开始索引</p>
<p>5.2.2 一维数组数组名<br>一维数组名称的用途：</p>
<p>可以统计整个数组在内存中的长度<br>可以获取数组在内存中的首地址<br>示例：</p>
<p>int main() {</p>
<pre><code>//数组名用途
//1、可以获取整个数组占用内存空间大小
int arr[10] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;

cout &lt;&lt; &quot;整个数组所占内存空间为： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;
cout &lt;&lt; &quot;每个元素所占内存空间为： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;
cout &lt;&lt; &quot;数组的元素个数为： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;

//2、可以通过数组名获取到数组首地址
cout &lt;&lt; &quot;数组首地址为： &quot; &lt;&lt; (int)arr &lt;&lt; endl;
cout &lt;&lt; &quot;数组中第一个元素地址为： &quot; &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;
cout &lt;&lt; &quot;数组中第二个元素地址为： &quot; &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;

//arr = 100; 错误，数组名是常量，因此不可以赋值


system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>注意：数组名是常量，不可以赋值</p>
<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>
<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>
<p>练习案例1：五只小猪称体重</p>
<p>案例描述：</p>
<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>
<p>找出并打印最重的小猪体重。</p>
<p><strong>练习案例2：</strong>数组元素逆置</p>
<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p>
<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>
<p>5.2.3 冒泡排序<br>作用： 最常用的排序算法，对数组内元素进行排序</p>
<p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。<br>重复以上的步骤，每次比较次数-1，直到不需要比较<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2khLjoZH-1599301407534)(assets/1541905327273.png)]</p>
<p>示例： 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>
<p>int main() {</p>
<pre><code>int arr[9] = &#123; 4,2,8,0,5,7,1,3,9 &#125;;

for (int i = 0; i &lt; 9 - 1; i++)
&#123;
    for (int j = 0; j &lt; 9 - 1 - i; j++)
    &#123;
        if (arr[j] &gt; arr[j + 1])
        &#123;
            int temp = arr[j];
            arr[j] = arr[j + 1];
            arr[j + 1] = temp;
        &#125;
    &#125;
&#125;

for (int i = 0; i &lt; 9; i++)
&#123;
    cout &lt;&lt; arr[i] &lt;&lt; endl;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>5.3 二维数组<br>二维数组就是在一维数组上，多加一个维度。</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ql8rmRUc-1599301407535)(assets/1541905559138.png)]</p>
<p>5.3.1 二维数组定义方式<br>二维数组定义的四种方式：</p>
<p>数据类型 数组名[ 行数 ][ 列数 ];<br>数据类型 数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };<br>数据类型 数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};<br>数据类型 数组名[ ][ 列数 ] = { 数据1，数据2，数据3，数据4};<br>建议：以上4种定义方式，利用第二种更加直观，提高代码的可读性</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>//方式1  
//数组类型 数组名 [行数][列数]
int arr[2][3];
arr[0][0] = 1;
arr[0][1] = 2;
arr[0][2] = 3;
arr[1][0] = 4;
arr[1][1] = 5;
arr[1][2] = 6;

for (int i = 0; i &lt; 2; i++)
&#123;
    for (int j = 0; j &lt; 3; j++)
    &#123;
        cout &lt;&lt; arr[i][j] &lt;&lt; &quot; &quot;;
    &#125;
    cout &lt;&lt; endl;
&#125;

//方式2 
//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;
int arr2[2][3] =
&#123;
    &#123;1,2,3&#125;,
    &#123;4,5,6&#125;
&#125;;

//方式3
//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;
int arr3[2][3] = &#123; 1,2,3,4,5,6 &#125;; 

//方式4 
//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;
int arr4[][3] = &#123; 1,2,3,4,5,6 &#125;;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>
<p>5.3.2 二维数组数组名<br>查看二维数组所占内存空间<br>获取二维数组首地址<br>示例：</p>
<p>int main() {</p>
<pre><code>//二维数组数组名
int arr[2][3] =
&#123;
    &#123;1,2,3&#125;,
    &#123;4,5,6&#125;
&#125;;

cout &lt;&lt; &quot;二维数组大小： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;
cout &lt;&lt; &quot;二维数组一行大小： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;
cout &lt;&lt; &quot;二维数组元素大小： &quot; &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;

cout &lt;&lt; &quot;二维数组行数： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;
cout &lt;&lt; &quot;二维数组列数： &quot; &lt;&lt; sizeof(arr[0]) / sizeof(arr[0][0]) &lt;&lt; endl;

//地址
cout &lt;&lt; &quot;二维数组首地址：&quot; &lt;&lt; arr &lt;&lt; endl;
cout &lt;&lt; &quot;二维数组第一行地址：&quot; &lt;&lt; arr[0] &lt;&lt; endl;
cout &lt;&lt; &quot;二维数组第二行地址：&quot; &lt;&lt; arr[1] &lt;&lt; endl;

cout &lt;&lt; &quot;二维数组第一个元素地址：&quot; &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;
cout &lt;&lt; &quot;二维数组第二个元素地址：&quot; &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>总结1：二维数组名就是这个数组的首地址</p>
<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>
<p>5.3.3 二维数组应用案例<br>考试成绩统计：</p>
<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，请分别输出三名同学的总成绩</p>
<p>语文    数学    英语<br>张三    100    100    100<br>李四    90    50    100<br>王五    60    70    80<br>参考答案：</p>
<p>int main() {</p>
<pre><code>int scores[3][3] =
&#123;
    &#123;100,100,100&#125;,
    &#123;90,50,100&#125;,
    &#123;60,70,80&#125;,
&#125;;

string names[3] = &#123; &quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot; &#125;;

for (int i = 0; i &lt; 3; i++)
&#123;
    int sum = 0;
    for (int j = 0; j &lt; 3; j++)
    &#123;
        sum += scores[i][j];
    &#125;
    cout &lt;&lt; names[i] &lt;&lt; &quot;同学总成绩为： &quot; &lt;&lt; sum &lt;&lt; endl;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>6 函数<br>6.1 概述<br><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>
<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>
<p>6.2 函数的定义<br>函数的定义一般主要有5个步骤：</p>
<p>1、返回值类型</p>
<p>2、函数名</p>
<p>3、参数表列</p>
<p>4、函数体语句</p>
<p>5、return 表达式</p>
<p>语法：</p>
<p>返回值类型 函数名 （参数列表）<br>{</p>
<pre><code>   函数体语句

   return表达式</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>返回值类型 ：一个函数可以返回一个值。在函数定义中<br>函数名：给函数起个名称<br>参数列表：使用该函数时，传入的数据<br>函数体语句：花括号内的代码，函数内需要执行的语句<br>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据<br><strong>示例：</strong>定义一个加法函数，实现两个数相加</p>
<p>//函数定义<br>int add(int num1, int num2)<br>{<br>    int sum = num1 + num2;<br>    return sum;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>6.3 函数的调用<br><strong>功能：</strong>使用定义好的函数</p>
<p>语法：函数名（参数）</p>
<p>示例：</p>
<p>//函数定义<br>int add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参<br>{<br>    int sum = num1 + num2;<br>    return sum;<br>}</p>
<p>int main() {</p>
<pre><code>int a = 10;
int b = 10;
//调用add函数
int sum = add(a, b);//调用时的a，b称为实际参数，简称实参
cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl;

a = 100;
b = 100;

sum = add(a, b);
cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>
<p>6.4 值传递<br>所谓值传递，就是函数调用时实参将数值传入给形参<br>值传递时，如果形参发生，并不会影响实参<br>示例：</p>
<p>void swap(int num1, int num2)<br>{<br>    cout &lt;&lt; “交换前：” &lt;&lt; endl;<br>    cout &lt;&lt; “num1 = “ &lt;&lt; num1 &lt;&lt; endl;<br>    cout &lt;&lt; “num2 = “ &lt;&lt; num2 &lt;&lt; endl;</p>
<pre><code>int temp = num1;
num1 = num2;
num2 = temp;

cout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl;
cout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl;

//return ; 当函数声明时候，不需要返回值，可以不写return</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>int a = 10;
int b = 20;

swap(a, b);

cout &lt;&lt; &quot;mian中的 a = &quot; &lt;&lt; a &lt;&lt; endl;
cout &lt;&lt; &quot;mian中的 b = &quot; &lt;&lt; b &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>总结： 值传递时，形参是修饰不了实参的</p>
<p>6.5 函数的常见样式<br>常见的函数样式有4种</p>
<p>无参无返<br>有参无返<br>无参有返<br>有参有返<br>示例：</p>
<p>//函数常见样式<br>//1、 无参无返<br>void test01()<br>{<br>    //void a = 10; //无类型不可以创建变量,原因无法分配内存<br>    cout &lt;&lt; “this is test01” &lt;&lt; endl;<br>    //test01(); 函数调用<br>}</p>
<p>//2、 有参无返<br>void test02(int a)<br>{<br>    cout &lt;&lt; “this is test02” &lt;&lt; endl;<br>    cout &lt;&lt; “a = “ &lt;&lt; a &lt;&lt; endl;<br>}</p>
<p>//3、无参有返<br>int test03()<br>{<br>    cout &lt;&lt; “this is test03 “ &lt;&lt; endl;<br>    return 10;<br>}</p>
<p>//4、有参有返<br>int test04(int a, int b)<br>{<br>    cout &lt;&lt; “this is test04 “ &lt;&lt; endl;<br>    int sum = a + b;<br>    return sum;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>6.6 函数的声明<br>作用： 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>
<p>函数的声明可以多次，但是函数的定义只能有一次<br>示例：</p>
<p>//声明可以多次，定义只能一次<br>//声明<br>int max(int a, int b);<br>int max(int a, int b);<br>//定义<br>int max(int a, int b)<br>{<br>    return a &gt; b ? a : b;<br>}</p>
<p>int main() {</p>
<pre><code>int a = 100;
int b = 200;

cout &lt;&lt; max(a, b) &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>6.7 函数的分文件编写<br><strong>作用：</strong>让代码结构更加清晰</p>
<p>函数分文件编写一般有4个步骤</p>
<p>创建后缀名为.h的头文件<br>创建后缀名为.cpp的源文件<br>在头文件中写函数的声明<br>在源文件中写函数的定义<br>示例：</p>
<p>//swap.h文件<br>#include<iostream><br>using namespace std;</p>
<p>//实现两个数字交换的函数声明<br>void swap(int a, int b);</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>//swap.cpp文件<br>#include “swap.h”</p>
<p>void swap(int a, int b)<br>{<br>    int temp = a;<br>    a = b;<br>    b = temp;</p>
<pre><code>cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>//main函数文件<br>#include “swap.h”<br>int main() {</p>
<pre><code>int a = 100;
int b = 200;
swap(a, b);

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>7 指针<br>7.1 指针的基本概念<br>指针的作用： 可以通过指针间接访问内存</p>
<p>内存编号是从0开始记录的，一般用十六进制数字表示</p>
<p>可以利用指针变量保存地址</p>
<p>​</p>
<p>7.2 指针变量的定义和使用<br>指针变量定义语法： 数据类型 * 变量名；</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>//1、指针的定义
int a = 10; //定义整型变量a

//指针定义语法： 数据类型 * 变量名 ;
int * p;

//指针变量赋值
p = &amp;a; //指针指向变量a的地址
cout &lt;&lt; &amp;a &lt;&lt; endl; //打印数据a的地址
cout &lt;&lt; p &lt;&lt; endl;  //打印指针变量p

//2、指针的使用
//通过*操作指针变量指向的内存
cout &lt;&lt; &quot;*p = &quot; &lt;&lt; *p &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>指针变量和普通变量的区别</p>
<p>普通变量存放的是数据,指针变量存放的是地址<br>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用<br>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>
<p>总结2：利用指针可以记录地址</p>
<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>
<p>7.3 指针所占内存空间<br>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>int a = 10;

int * p;
p = &amp;a; //指针指向数据a的地址

cout &lt;&lt; *p &lt;&lt; endl; //* 解引用
cout &lt;&lt; sizeof(p) &lt;&lt; endl;
cout &lt;&lt; sizeof(char *) &lt;&lt; endl;
cout &lt;&lt; sizeof(float *) &lt;&lt; endl;
cout &lt;&lt; sizeof(double *) &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>总结：所有指针类型在32位操作系统下是4个字节</p>
<p>7.4 空指针和野指针<br>空指针：指针变量指向内存中编号为0的空间</p>
<p><strong>用途：</strong>初始化指针变量</p>
<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>
<p>示例1：空指针</p>
<p>int main() {</p>
<pre><code>//指针变量p指向内存地址编号为0的空间
int * p = NULL;

//访问空指针报错 
//内存编号0 ~255为系统占用内存，不允许用户访问
cout &lt;&lt; *p &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>野指针：指针变量指向非法的内存空间</p>
<p>示例2：野指针</p>
<p>int main() {</p>
<pre><code>//指针变量p指向内存地址编号为0x1100的空间
int * p = (int *)0x1100;

//访问野指针报错 
cout &lt;&lt; *p &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>
<p>7.5 const修饰指针<br>const修饰指针有三种情况</p>
<p>const修饰指针 — 常量指针<br>const修饰常量 — 指针常量<br>const即修饰指针，又修饰常量<br>示例：</p>
<p>int main() {</p>
<pre><code>int a = 10;
int b = 10;

//const修饰的是指针，指针指向可以改，指针指向的值不可以更改
const int * p1 = &amp;a; 
p1 = &amp;b; //正确
//*p1 = 100;  报错


//const修饰的是常量，指针指向不可以改，指针指向的值可以更改
int * const p2 = &amp;a;
//p2 = &amp;b; //错误
*p2 = 100; //正确

//const既修饰指针又修饰常量
const int * const p3 = &amp;a;
//p3 = &amp;b; //错误
//*p3 = 100; //错误

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>
<p>7.6 指针和数组<br><strong>作用：</strong>利用指针访问数组中元素</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>int arr[] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;

int * p = arr;  //指向数组的指针

cout &lt;&lt; &quot;第一个元素： &quot; &lt;&lt; arr[0] &lt;&lt; endl;
cout &lt;&lt; &quot;指针访问第一个元素： &quot; &lt;&lt; *p &lt;&lt; endl;

for (int i = 0; i &lt; 10; i++)
&#123;
    //利用指针遍历数组
    cout &lt;&lt; *p &lt;&lt; endl;
    p++;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>7.7 指针和函数<br><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>
<p>示例：</p>
<p>//值传递<br>void swap1(int a ,int b)<br>{<br>    int temp = a;<br>    a = b;<br>    b = temp;<br>}<br>//地址传递<br>void swap2(int * p1, int *p2)<br>{<br>    int temp = *p1;<br>    *p1 = *p2;<br>    *p2 = temp;<br>}</p>
<p>int main() {</p>
<pre><code>int a = 10;
int b = 20;
swap1(a, b); // 值传递不会改变实参

swap2(&amp;a, &amp;b); //地址传递会改变实参

cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;

cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>
<p>7.8 指针、数组、函数<br><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>
<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>
<p>示例：</p>
<p>//冒泡排序函数<br>void bubbleSort(int * arr, int len)  //int * arr 也可以写为int arr[]<br>{<br>    for (int i = 0; i &lt; len - 1; i++)<br>    {<br>        for (int j = 0; j &lt; len - 1 - i; j++)<br>        {<br>            if (arr[j] &gt; arr[j + 1])<br>            {<br>                int temp = arr[j];<br>                arr[j] = arr[j + 1];<br>                arr[j + 1] = temp;<br>            }<br>        }<br>    }<br>}</p>
<p>//打印数组函数<br>void printArray(int arr[], int len)<br>{<br>    for (int i = 0; i &lt; len; i++)<br>    {<br>        cout &lt;&lt; arr[i] &lt;&lt; endl;<br>    }<br>}</p>
<p>int main() {</p>
<pre><code>int arr[10] = &#123; 4,3,6,9,1,2,10,8,7,5 &#125;;
int len = sizeof(arr) / sizeof(int);

bubbleSort(arr, len);

printArray(arr, len);

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>
<p>8 结构体<br>8.1 结构体基本概念<br>结构体属于用户自定义的数据类型，允许用户存储不同的数据类型</p>
<p>8.2 结构体定义和使用<br>语法：struct 结构体名 { 结构体成员列表 }；</p>
<p>通过结构体创建变量的方式有三种：</p>
<p>struct 结构体名 变量名<br>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}<br>定义结构体时顺便创建变量<br>示例：</p>
<p>//结构体定义<br>struct student<br>{<br>    //成员列表<br>    string name;  //姓名<br>    int age;      //年龄<br>    int score;    //分数<br>}stu3; //结构体变量创建方式3 </p>
<p>int main() {</p>
<pre><code>//结构体变量创建方式1
struct student stu1; //struct 关键字可以省略

stu1.name = &quot;张三&quot;;
stu1.age = 18;
stu1.score = 100;

cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu1.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu1.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu1.score &lt;&lt; endl;

//结构体变量创建方式2
struct student stu2 = &#123; &quot;李四&quot;,19,60 &#125;;

cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu2.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu2.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu2.score &lt;&lt; endl;


stu3.name = &quot;王五&quot;;
stu3.age = 18;
stu3.score = 80;


cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu3.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu3.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu3.score &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>总结1：定义结构体时的关键字是struct，不可省略</p>
<p>总结2：创建结构体变量时，关键字struct可以省略</p>
<p>总结3：结构体变量利用操作符 ‘’.’’ 访问成员</p>
<p>8.3 结构体数组<br><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>
<p>语法：struct 结构体名 数组名[元素个数] = { {} , {} , … {} }</p>
<p>示例：</p>
<p>//结构体定义<br>struct student<br>{<br>    //成员列表<br>    string name;  //姓名<br>    int age;      //年龄<br>    int score;    //分数<br>}</p>
<p>int main() {</p>
<pre><code>//结构体数组
struct student arr[3]=
&#123;
    &#123;&quot;张三&quot;,18,80 &#125;,
    &#123;&quot;李四&quot;,19,60 &#125;,
    &#123;&quot;王五&quot;,20,70 &#125;
&#125;;

for (int i = 0; i &lt; 3; i++)
&#123;
    cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; arr[i].age &lt;&lt; &quot; 分数：&quot; &lt;&lt; arr[i].score &lt;&lt; endl;
&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>8.4 结构体指针<br><strong>作用：</strong>通过指针访问结构体中的成员</p>
<p>利用操作符 -&gt;可以通过结构体指针访问结构体属性<br>示例：</p>
<p>//结构体定义<br>struct student<br>{<br>    //成员列表<br>    string name;  //姓名<br>    int age;      //年龄<br>    int score;    //分数<br>};</p>
<p>int main() {</p>
<pre><code>struct student stu = &#123; &quot;张三&quot;,18,100, &#125;;

struct student * p = &amp;stu;

p-&gt;score = 80; //指针通过 -&gt; 操作符可以访问成员

cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; p-&gt;score &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>
<p>8.5 结构体嵌套结构体<br>作用： 结构体中的成员可以是另一个结构体</p>
<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>
<p>示例：</p>
<p>//学生结构体定义<br>struct student<br>{<br>    //成员列表<br>    string name;  //姓名<br>    int age;      //年龄<br>    int score;    //分数<br>};</p>
<p>//教师结构体定义<br>struct teacher<br>{<br>    //成员列表<br>    int id; //职工编号<br>    string name;  //教师姓名<br>    int age;   //教师年龄<br>    struct student stu; //子结构体 学生<br>};</p>
<p>int main() {</p>
<pre><code>struct teacher t1;
t1.id = 10000;
t1.name = &quot;老王&quot;;
t1.age = 40;

t1.stu.name = &quot;张三&quot;;
t1.stu.age = 18;
t1.stu.score = 100;

cout &lt;&lt; &quot;教师 职工编号： &quot; &lt;&lt; t1.id &lt;&lt; &quot; 姓名： &quot; &lt;&lt; t1.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; t1.age &lt;&lt; endl;

cout &lt;&lt; &quot;辅导学员 姓名： &quot; &lt;&lt; t1.stu.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; t1.stu.age &lt;&lt; &quot; 考试分数： &quot; &lt;&lt; t1.stu.score &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>
<p>8.6 结构体做函数参数<br><strong>作用：</strong>将结构体作为参数向函数中传递</p>
<p>传递方式有两种：</p>
<p>值传递<br>地址传递<br>示例：</p>
<p>//学生结构体定义<br>struct student<br>{<br>    //成员列表<br>    string name;  //姓名<br>    int age;      //年龄<br>    int score;    //分数<br>};</p>
<p>//值传递<br>void printStudent(student stu )<br>{<br>    stu.age = 28;<br>    cout &lt;&lt; “子函数中 姓名：” &lt;&lt; stu.name &lt;&lt; “ 年龄： “ &lt;&lt; stu.age  &lt;&lt; “ 分数：” &lt;&lt; stu.score &lt;&lt; endl;<br>}</p>
<p>//地址传递<br>void printStudent2(student *stu)<br>{<br>    stu-&gt;age = 28;<br>    cout &lt;&lt; “子函数中 姓名：” &lt;&lt; stu-&gt;name &lt;&lt; “ 年龄： “ &lt;&lt; stu-&gt;age  &lt;&lt; “ 分数：” &lt;&lt; stu-&gt;score &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>student stu = &#123; &quot;张三&quot;,18,100&#125;;
//值传递
printStudent(stu);
cout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;

cout &lt;&lt; endl;

//地址传递
printStudent2(&amp;stu);
cout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>
<p>8.7 结构体中 const使用场景<br><strong>作用：</strong>用const来防止误操作</p>
<p>示例：</p>
<p>//学生结构体定义<br>struct student<br>{<br>    //成员列表<br>    string name;  //姓名<br>    int age;      //年龄<br>    int score;    //分数<br>};</p>
<p>//const使用场景<br>void printStudent(const student *stu) //加const防止函数体中的误操作<br>{<br>    //stu-&gt;age = 100; //操作失败，因为加了const修饰<br>    cout &lt;&lt; “姓名：” &lt;&lt; stu-&gt;name &lt;&lt; “ 年龄：” &lt;&lt; stu-&gt;age &lt;&lt; “ 分数：” &lt;&lt; stu-&gt;score &lt;&lt; endl;</p>
<p>}</p>
<p>int main() {</p>
<pre><code>student stu = &#123; &quot;张三&quot;,18,100 &#125;;

printStudent(&amp;stu);

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>8.8 结构体案例<br>8.8.1 案例1<br>案例描述：</p>
<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>
<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>
<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>
<p>最终打印出老师数据以及老师所带的学生数据。</p>
<p>示例：</p>
<p>struct Student<br>{<br>    string name;<br>    int score;<br>};<br>struct Teacher<br>{<br>    string name;<br>    Student sArray[5];<br>};</p>
<p>void allocateSpace(Teacher tArray[] , int len)<br>{<br>    string tName = “教师”;<br>    string sName = “学生”;<br>    string nameSeed = “ABCDE”;<br>    for (int i = 0; i &lt; len; i++)<br>    {<br>        tArray[i].name = tName + nameSeed[i];</p>
<pre><code>    for (int j = 0; j &lt; 5; j++)
    &#123;
        tArray[i].sArray[j].name = sName + nameSeed[j];
        tArray[i].sArray[j].score = rand() % 61 + 40;
    &#125;
&#125;</code></pre>
<p>}</p>
<p>void printTeachers(Teacher tArray[], int len)<br>{<br>    for (int i = 0; i &lt; len; i++)<br>    {<br>        cout &lt;&lt; tArray[i].name &lt;&lt; endl;<br>        for (int j = 0; j &lt; 5; j++)<br>        {<br>            cout &lt;&lt; “\t姓名：” &lt;&lt; tArray[i].sArray[j].name &lt;&lt; “ 分数：” &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;<br>        }<br>    }<br>}</p>
<p>int main() {</p>
<pre><code>srand((unsigned int)time(NULL)); //随机数种子 头文件 #include &lt;ctime&gt;

Teacher tArray[3]; //老师数组

int len = sizeof(tArray) / sizeof(Teacher);

allocateSpace(tArray, len); //创建数据

printTeachers(tArray, len); //打印数据

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>8.8.2 案例2<br>案例描述：</p>
<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>
<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>
<p>五名英雄信息如下：</p>
<pre><code>    &#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,
    &#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,
    &#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,
    &#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,
    &#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,</code></pre>
<p>1<br>2<br>3<br>4<br>5<br>示例：</p>
<p>//英雄结构体<br>struct hero<br>{<br>    string name;<br>    int age;<br>    string sex;<br>};<br>//冒泡排序<br>void bubbleSort(hero arr[] , int len)<br>{<br>    for (int i = 0; i &lt; len - 1; i++)<br>    {<br>        for (int j = 0; j &lt; len - 1 - i; j++)<br>        {<br>            if (arr[j].age &gt; arr[j + 1].age)<br>            {<br>                hero temp = arr[j];<br>                arr[j] = arr[j + 1];<br>                arr[j + 1] = temp;<br>            }<br>        }<br>    }<br>}<br>//打印数组<br>void printHeros(hero arr[], int len)<br>{<br>    for (int i = 0; i &lt; len; i++)<br>    {<br>        cout &lt;&lt; “姓名： “ &lt;&lt; arr[i].name &lt;&lt; “ 性别： “ &lt;&lt; arr[i].sex &lt;&lt; “ 年龄： “ &lt;&lt; arr[i].age &lt;&lt; endl;<br>    }<br>}</p>
<p>int main() {</p>
<pre><code>struct hero arr[5] =
&#123;
    &#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,
    &#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,
    &#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,
    &#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,
    &#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,
&#125;;

int len = sizeof(arr) / sizeof(hero); //获取数组元素个数

bubbleSort(arr, len); //排序

printHeros(arr, len); //打印

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
  </entry>
  <entry>
    <title>c++学习代码总结（核心编程篇）</title>
    <url>/2020/11/28/c++%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93%EF%BC%88%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<p>C++核心编程<br>本阶段主要针对C++面向对象编程技术做详细讲解，探讨C++中的核心和精髓。</p>
<hr>
<a id="more"></a>

<p>1 内存分区模型<br>C++程序在执行时，将内存大方向划分为4个区域</p>
<p>代码区：存放函数体的二进制代码，由操作系统进行管理的<br>全局区：存放全局变量和静态变量以及常量<br>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等<br>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收<br>内存四区意义：</p>
<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>
<p>1.1 程序运行前<br>​ 在程序编译后，生成了exe可执行程序，未执行该程序前分为两个区域</p>
<p>​ 代码区：</p>
<p>​ 存放 CPU 执行的机器指令</p>
<p>​ 代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>
<p>​ 代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令</p>
<p>​ 全局区：</p>
<p>​ 全局变量和静态变量存放在此.</p>
<p>​ 全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>
<p>​ 该区域的数据在程序结束后由操作系统释放.</p>
<p>示例：</p>
<p>//全局变量<br>int g_a = 10;<br>int g_b = 10;</p>
<p>//全局常量<br>const int c_g_a = 10;<br>const int c_g_b = 10;</p>
<p>int main() {</p>
<pre><code>//局部变量
int a = 10;
int b = 10;

//打印地址
cout &lt;&lt; &quot;局部变量a地址为： &quot; &lt;&lt; (int)&amp;a &lt;&lt; endl;
cout &lt;&lt; &quot;局部变量b地址为： &quot; &lt;&lt; (int)&amp;b &lt;&lt; endl;

cout &lt;&lt; &quot;全局变量g_a地址为： &quot; &lt;&lt;  (int)&amp;g_a &lt;&lt; endl;
cout &lt;&lt; &quot;全局变量g_b地址为： &quot; &lt;&lt;  (int)&amp;g_b &lt;&lt; endl;

//静态变量
static int s_a = 10;
static int s_b = 10;

cout &lt;&lt; &quot;静态变量s_a地址为： &quot; &lt;&lt; (int)&amp;s_a &lt;&lt; endl;
cout &lt;&lt; &quot;静态变量s_b地址为： &quot; &lt;&lt; (int)&amp;s_b &lt;&lt; endl;

cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world1&quot; &lt;&lt; endl;

cout &lt;&lt; &quot;全局常量c_g_a地址为： &quot; &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl;
cout &lt;&lt; &quot;全局常量c_g_b地址为： &quot; &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl;

const int c_l_a = 10;
const int c_l_b = 10;
cout &lt;&lt; &quot;局部常量c_l_a地址为： &quot; &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl;
cout &lt;&lt; &quot;局部常量c_l_b地址为： &quot; &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>打印结果：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-z3nIsmzF-1599302023859)(assets/1545017602518.png)]</p>
<p>总结：</p>
<p>C++中在程序运行前分为全局区和代码区<br>代码区特点是共享和只读<br>全局区中存放全局变量、静态变量、常量<br>常量区中存放 const修饰的全局常量 和 字符串常量<br>1.2 程序运行后<br>​ 栈区：</p>
<p>​ 由编译器自动分配释放, 存放函数的参数值,局部变量等</p>
<p>​ 注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>
<p>示例：</p>
<p>int * func()<br>{<br>    int a = 10;<br>    return &a;<br>}</p>
<p>int main() {</p>
<pre><code>int *p = func();

cout &lt;&lt; *p &lt;&lt; endl;
cout &lt;&lt; *p &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>​ 堆区：</p>
<p>​ 由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>
<p>​ 在C++中主要利用new在堆区开辟内存</p>
<p>示例：</p>
<p>int* func()<br>{<br>    int* a = new int(10);<br>    return a;<br>}</p>
<p>int main() {</p>
<pre><code>int *p = func();

cout &lt;&lt; *p &lt;&lt; endl;
cout &lt;&lt; *p &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>总结：</p>
<p>堆区数据由程序员管理开辟和释放</p>
<p>堆区数据利用new关键字进行开辟内存</p>
<p>1.3 new操作符<br>​ C++中利用new操作符在堆区开辟数据</p>
<p>​ 堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 delete</p>
<p>​ 语法：new 数据类型</p>
<p>​ 利用new创建的数据，会返回该数据对应的类型的指针</p>
<p>示例1： 基本语法</p>
<p>int* func()<br>{<br>    int* a = new int(10);<br>    return a;<br>}</p>
<p>int main() {</p>
<pre><code>int *p = func();

cout &lt;&lt; *p &lt;&lt; endl;
cout &lt;&lt; *p &lt;&lt; endl;

//利用delete释放堆区数据
delete p;

//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>示例2：开辟数组</p>
<p>//堆区开辟数组<br>int main() {</p>
<pre><code>int* arr = new int[10];

for (int i = 0; i &lt; 10; i++)
&#123;
    arr[i] = i + 100;
&#125;

for (int i = 0; i &lt; 10; i++)
&#123;
    cout &lt;&lt; arr[i] &lt;&lt; endl;
&#125;
//释放数组 delete 后加 []
delete[] arr;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>2 引用<br>2.1 引用的基本使用<br>**作用： **给变量起别名</p>
<p>语法： 数据类型 &amp;别名 = 原名</p>
<p>示例：</p>
<p>int main() {</p>
<pre><code>int a = 10;
int &amp;b = a;

cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;

b = 100;

cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>2.2 引用注意事项<br>引用必须初始化<br>引用在初始化后，不可以改变<br>示例：</p>
<p>int main() {</p>
<pre><code>int a = 10;
int b = 20;
//int &amp;c; //错误，引用必须初始化
int &amp;c = a; //一旦初始化后，就不可以更改
c = b; //这是赋值操作，不是更改引用

cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;
cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>2.3 引用做函数参数<br><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p>
<p><strong>优点：</strong>可以简化指针修改实参</p>
<p>示例：</p>
<p>//1. 值传递<br>void mySwap01(int a, int b) {<br>    int temp = a;<br>    a = b;<br>    b = temp;<br>}</p>
<p>//2. 地址传递<br>void mySwap02(int* a, int* b) {<br>    int temp = *a;<br>    *a = *b;<br>    *b = temp;<br>}</p>
<p>//3. 引用传递<br>void mySwap03(int&amp; a, int&amp; b) {<br>    int temp = a;<br>    a = b;<br>    b = temp;<br>}</p>
<p>int main() {</p>
<pre><code>int a = 10;
int b = 20;

mySwap01(a, b);
cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;

mySwap02(&amp;a, &amp;b);
cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;

mySwap03(a, b);
cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>
<p>2.4 引用做函数返回值<br>作用：引用是可以作为函数的返回值存在的</p>
<p>注意：不要返回局部变量引用</p>
<p>用法：函数调用作为左值</p>
<p>示例：</p>
<p>//返回局部变量引用<br>int&amp; test01() {<br>    int a = 10; //局部变量<br>    return a;<br>}</p>
<p>//返回静态变量引用<br>int&amp; test02() {<br>    static int a = 20;<br>    return a;<br>}</p>
<p>int main() {</p>
<pre><code>//不能返回局部变量的引用
int&amp; ref = test01();
cout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl;
cout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl;

//如果函数做左值，那么必须返回引用
int&amp; ref2 = test02();
cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;
cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;

test02() = 1000;

cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;
cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>​</p>
<p>2.5 引用的本质<br>本质：引用的本质在c++内部实现是一个指针常量.</p>
<p>讲解示例：</p>
<p>//发现是引用，转换为 int* const ref = &a;<br>void func(int&amp; ref){<br>    ref = 100; // ref是引用，转换为*ref = 100<br>}<br>int main(){<br>    int a = 10;</p>
<pre><code>//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改
int&amp; ref = a; 
ref = 20; //内部发现ref是引用，自动帮我们转换为: *ref = 20;

cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl;
cout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl;

func(a);
return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>
<p>2.6 常量引用<br><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p>
<p>在函数形参列表中，可以加const修饰形参，防止形参改变实参</p>
<p>示例：</p>
<p>//引用使用的场景，通常用来修饰形参<br>void showValue(const int&amp; v) {<br>    //v += 10;<br>    cout &lt;&lt; v &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误
//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;
const int&amp; ref = 10;

//ref = 100;  //加入const后不可以修改变量
cout &lt;&lt; ref &lt;&lt; endl;

//函数中利用常量引用防止误操作修改实参
int a = 10;
showValue(a);

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>3 函数提高<br>3.1 函数默认参数<br>在C++中，函数的形参列表中的形参是可以有默认值的。</p>
<p>语法：返回值类型 函数名 （参数= 默认值）{}</p>
<p>示例：</p>
<p>int func(int a, int b = 10, int c = 10) {<br>    return a + b + c;<br>}</p>
<p>//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值<br>//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数<br>int func2(int a = 10, int b = 10);<br>int func2(int a, int b) {<br>    return a + b;<br>}</p>
<p>int main() {</p>
<pre><code>cout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(20, 20) &lt;&lt; endl;
cout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(100) &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>3.2 函数占位参数<br>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>
<p>语法： 返回值类型 函数名 (数据类型){}</p>
<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>
<p>示例：</p>
<p>//函数占位参数 ，占位参数也可以有默认参数<br>void func(int a, int) {<br>    cout &lt;&lt; “this is func” &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>func(10,10); //占位参数必须填补

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>3.3 函数重载<br>3.3.1 函数重载概述<br><strong>作用：</strong>函数名可以相同，提高复用性</p>
<p>函数重载满足条件：</p>
<p>同一个作用域下<br>函数名称相同<br>函数参数类型不同 或者 个数不同 或者 顺序不同<br>注意: 函数的返回值不可以作为函数重载的条件</p>
<p>示例：</p>
<p>//函数重载需要函数都在同一个作用域下<br>void func()<br>{<br>    cout &lt;&lt; “func 的调用！” &lt;&lt; endl;<br>}<br>void func(int a)<br>{<br>    cout &lt;&lt; “func (int a) 的调用！” &lt;&lt; endl;<br>}<br>void func(double a)<br>{<br>    cout &lt;&lt; “func (double a)的调用！” &lt;&lt; endl;<br>}<br>void func(int a ,double b)<br>{<br>    cout &lt;&lt; “func (int a ,double b) 的调用！” &lt;&lt; endl;<br>}<br>void func(double a ,int b)<br>{<br>    cout &lt;&lt; “func (double a ,int b)的调用！” &lt;&lt; endl;<br>}</p>
<p>//函数返回值不可以作为函数重载条件<br>//int func(double a, int b)<br>//{<br>//    cout &lt;&lt; “func (double a ,int b)的调用！” &lt;&lt; endl;<br>//}</p>
<p>int main() {</p>
<pre><code>func();
func(10);
func(3.14);
func(10,3.14);
func(3.14 , 10);

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>3.3.2 函数重载注意事项<br>引用作为重载条件<br>函数重载碰到函数默认参数<br>示例：</p>
<p>//函数重载注意事项<br>//1、引用作为重载条件</p>
<p>void func(int &amp;a)<br>{<br>    cout &lt;&lt; “func (int &amp;a) 调用 “ &lt;&lt; endl;<br>}</p>
<p>void func(const int &amp;a)<br>{<br>    cout &lt;&lt; “func (const int &amp;a) 调用 “ &lt;&lt; endl;<br>}</p>
<p>//2、函数重载碰到函数默认参数</p>
<p>void func2(int a, int b = 10)<br>{<br>    cout &lt;&lt; “func2(int a, int b = 10) 调用” &lt;&lt; endl;<br>}</p>
<p>void func2(int a)<br>{<br>    cout &lt;&lt; “func2(int a) 调用” &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>int a = 10;
func(a); //调用无const
func(10);//调用有const


//func2(10); //碰到默认参数产生歧义，需要避免

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>4 类和对象<br>C++面向对象的三大特性为：封装、继承、多态</p>
<p>C++认为万事万物都皆为对象，对象上有其属性和行为</p>
<p>例如：</p>
<p>​ 人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p>
<p>​ 车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p>
<p>​ 具有相同性质的对象，我们可以抽象称为类，人属于人类，车属于车类</p>
<p>4.1 封装<br>4.1.1 封装的意义<br>封装是C++面向对象三大特性之一</p>
<p>封装的意义：</p>
<p>将属性和行为作为一个整体，表现生活中的事物<br>将属性和行为加以权限控制<br>封装意义一：</p>
<p>​ 在设计类的时候，属性和行为写在一起，表现事物</p>
<p>语法： class 类名{ 访问权限： 属性 / 行为 };</p>
<p><strong>示例1：</strong>设计一个圆类，求圆的周长</p>
<p>示例代码：</p>
<p>//圆周率<br>const double PI = 3.14;</p>
<p>//1、封装的意义<br>//将属性和行为作为一个整体，用来表现生活中的事物</p>
<p>//封装一个圆类，求圆的周长<br>//class代表设计一个类，后面跟着的是类名<br>class Circle<br>{<br>public:  //访问权限  公共的权限</p>
<pre><code>//属性
int m_r;//半径

//行为
//获取到圆的周长
double calculateZC()
&#123;
    //2 * pi  * r
    //获取圆的周长
    return  2 * PI * m_r;
&#125;</code></pre>
<p>};</p>
<p>int main() {</p>
<pre><code>//通过圆类，创建圆的对象
// c1就是一个具体的圆
Circle c1;
c1.m_r = 10; //给圆对象的半径 进行赋值操作

//2 * pi * 10 = = 62.8
cout &lt;&lt; &quot;圆的周长为： &quot; &lt;&lt; c1.calculateZC() &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>
<p>示例2代码：</p>
<p>//学生类<br>class Student {<br>public:<br>    void setName(string name) {<br>        m_name = name;<br>    }<br>    void setID(int id) {<br>        m_id = id;<br>    }</p>
<pre><code>void showStudent() &#123;
    cout &lt;&lt; &quot;name:&quot; &lt;&lt; m_name &lt;&lt; &quot; ID:&quot; &lt;&lt; m_id &lt;&lt; endl;
&#125;</code></pre>
<p>public:<br>    string m_name;<br>    int m_id;<br>};</p>
<p>int main() {</p>
<pre><code>Student stu;
stu.setName(&quot;德玛西亚&quot;);
stu.setID(250);
stu.showStudent();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>封装意义二：</p>
<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>
<p>访问权限有三种：</p>
<p>public 公共权限<br>protected 保护权限<br>private 私有权限<br>示例：</p>
<p>//三种权限<br>//公共权限  public     类内可以访问  类外可以访问<br>//保护权限  protected  类内可以访问  类外不可以访问<br>//私有权限  private    类内可以访问  类外不可以访问</p>
<p>class Person<br>{<br>    //姓名  公共权限<br>public:<br>    string m_Name;</p>
<pre><code>//汽车  保护权限</code></pre>
<p>protected:<br>    string m_Car;</p>
<pre><code>//银行卡密码  私有权限</code></pre>
<p>private:<br>    int m_Password;</p>
<p>public:<br>    void func()<br>    {<br>        m_Name = “张三”;<br>        m_Car = “拖拉机”;<br>        m_Password = 123456;<br>    }<br>};</p>
<p>int main() {</p>
<pre><code>Person p;
p.m_Name = &quot;李四&quot;;
//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到
//p.m_Password = 123; //私有权限类外访问不到

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>4.1.2 struct和class区别<br>在C++中 struct和class唯一的区别就在于 默认的访问权限不同</p>
<p>区别：</p>
<p>struct 默认权限为公共<br>class 默认权限为私有<br>class C1<br>{<br>    int  m_A; //默认是私有权限<br>};</p>
<p>struct C2<br>{<br>    int m_A;  //默认是公共权限<br>};</p>
<p>int main() {</p>
<pre><code>C1 c1;
c1.m_A = 10; //错误，访问权限是私有

C2 c2;
c2.m_A = 10; //正确，访问权限是公共

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>4.1.3 成员属性设置为私有<br><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p>
<p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p>
<p>示例：</p>
<p>class Person {<br>public:</p>
<pre><code>//姓名设置可读可写
void setName(string name) &#123;
    m_Name = name;
&#125;
string getName()
&#123;
    return m_Name;
&#125;


//获取年龄 
int getAge() &#123;
    return m_Age;
&#125;
//设置年龄
void setAge(int age) &#123;
    if (age &lt; 0 || age &gt; 150) &#123;
        cout &lt;&lt; &quot;你个老妖精!&quot; &lt;&lt; endl;
        return;
    &#125;
    m_Age = age;
&#125;

//情人设置为只写
void setLover(string lover) &#123;
    m_Lover = lover;
&#125;</code></pre>
<p>private:<br>    string m_Name; //可读可写  姓名</p>
<pre><code>int m_Age; //只读  年龄

string m_Lover; //只写  情人</code></pre>
<p>};</p>
<p>int main() {</p>
<pre><code>Person p;
//姓名设置
p.setName(&quot;张三&quot;);
cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.getName() &lt;&lt; endl;

//年龄设置
p.setAge(50);
cout &lt;&lt; &quot;年龄： &quot; &lt;&lt; p.getAge() &lt;&lt; endl;

//情人设置
p.setLover(&quot;苍井&quot;);
//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>练习案例1：设计立方体类</p>
<p>设计立方体类(Cube)</p>
<p>求出立方体的面积和体积</p>
<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-uBTORH6K-1599302023861)(assets/1545533548532.png)]</p>
<p>练习案例2：点和圆的关系</p>
<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-yJAU0c0C-1599302023863)(assets/1545533829184.png)]</p>
<p>4.2 对象的初始化和清理<br>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全<br>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。<br>4.2.1 构造函数和析构函数<br>对象的初始化和清理也是两个非常重要的安全问题</p>
<p>​ 一个对象或者变量没有初始状态，对其使用后果是未知</p>
<p>​ 同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>
<p>c++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>
<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供</p>
<p>编译器提供的构造函数和析构函数是空实现。</p>
<p>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。<br>析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。<br>构造函数语法：类名(){}</p>
<p>构造函数，没有返回值也不写void<br>函数名称与类名相同<br>构造函数可以有参数，因此可以发生重载<br>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次<br>析构函数语法： ~类名(){}</p>
<p>析构函数，没有返回值也不写void<br>函数名称与类名相同,在名称前加上符号 ~<br>析构函数不可以有参数，因此不可以发生重载<br>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次<br>class Person<br>{<br>public:<br>    //构造函数<br>    Person()<br>    {<br>        cout &lt;&lt; “Person的构造函数调用” &lt;&lt; endl;<br>    }<br>    //析构函数<br>    ~Person()<br>    {<br>        cout &lt;&lt; “Person的析构函数调用” &lt;&lt; endl;<br>    }</p>
<p>};</p>
<p>void test01()<br>{<br>    Person p;<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>4.2.2 构造函数的分类及调用<br>两种分类方式：</p>
<p>​ 按参数分为： 有参构造和无参构造</p>
<p>​ 按类型分为： 普通构造和拷贝构造</p>
<p>三种调用方式：</p>
<p>​ 括号法</p>
<p>​ 显示法</p>
<p>​ 隐式转换法</p>
<p>示例：</p>
<p>//1、构造函数分类<br>// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数<br>// 按照类型分类分为 普通构造和拷贝构造</p>
<p>class Person {<br>public:<br>    //无参（默认）构造函数<br>    Person() {<br>        cout &lt;&lt; “无参构造函数!” &lt;&lt; endl;<br>    }<br>    //有参构造函数<br>    Person(int a) {<br>        age = a;<br>        cout &lt;&lt; “有参构造函数!” &lt;&lt; endl;<br>    }<br>    //拷贝构造函数<br>    Person(const Person&amp; p) {<br>        age = p.age;<br>        cout &lt;&lt; “拷贝构造函数!” &lt;&lt; endl;<br>    }<br>    //析构函数<br>    ~Person() {<br>        cout &lt;&lt; “析构函数!” &lt;&lt; endl;<br>    }<br>public:<br>    int age;<br>};</p>
<p>//2、构造函数的调用<br>//调用无参构造函数<br>void test01() {<br>    Person p; //调用无参构造函数<br>}</p>
<p>//调用有参的构造函数<br>void test02() {</p>
<pre><code>//2.1  括号法，常用
Person p1(10);
//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明
//Person p2();

//2.2 显式法
Person p2 = Person(10); 
Person p3 = Person(p2);
//Person(10)单独写就是匿名对象  当前行结束之后，马上析构

//2.3 隐式转换法
Person p4 = 10; // Person p4 = Person(10); 
Person p5 = p4; // Person p5 = Person(p4); 

//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明
//Person p5(p4);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();
//test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>4.2.3 拷贝构造函数调用时机<br>C++中拷贝构造函数调用时机通常有三种情况</p>
<p>使用一个已经创建完毕的对象来初始化一个新对象<br>值传递的方式给函数参数传值<br>以值方式返回局部对象<br>示例：</p>
<p>class Person {<br>public:<br>    Person() {<br>        cout &lt;&lt; “无参构造函数!” &lt;&lt; endl;<br>        mAge = 0;<br>    }<br>    Person(int age) {<br>        cout &lt;&lt; “有参构造函数!” &lt;&lt; endl;<br>        mAge = age;<br>    }<br>    Person(const Person&amp; p) {<br>        cout &lt;&lt; “拷贝构造函数!” &lt;&lt; endl;<br>        mAge = p.mAge;<br>    }<br>    //析构函数在释放内存之前调用<br>    ~Person() {<br>        cout &lt;&lt; “析构函数!” &lt;&lt; endl;<br>    }<br>public:<br>    int mAge;<br>};</p>
<p>//1. 使用一个已经创建完毕的对象来初始化一个新对象<br>void test01() {</p>
<pre><code>Person man(100); //p对象已经创建完毕
Person newman(man); //调用拷贝构造函数
Person newman2 = man; //拷贝构造

//Person newman3;
//newman3 = man; //不是调用拷贝构造函数，赋值操作</code></pre>
<p>}</p>
<p>//2. 值传递的方式给函数参数传值<br>//相当于Person p1 = p;<br>void doWork(Person p1) {}<br>void test02() {<br>    Person p; //无参构造函数<br>    doWork(p);<br>}</p>
<p>//3. 以值方式返回局部对象<br>Person doWork2()<br>{<br>    Person p1;<br>    cout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl;<br>    return p1;<br>}</p>
<p>void test03()<br>{<br>    Person p = doWork2();<br>    cout &lt;&lt; (int *)&amp;p &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>//test01();
//test02();
test03();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>4.2.4 构造函数调用规则<br>默认情况下，c++编译器至少给一个类添加3个函数</p>
<p>1．默认构造函数(无参，函数体为空)</p>
<p>2．默认析构函数(无参，函数体为空)</p>
<p>3．默认拷贝构造函数，对属性进行值拷贝</p>
<p>构造函数调用规则如下：</p>
<p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p>
<p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p>
<p>示例：</p>
<p>class Person {<br>public:<br>    //无参（默认）构造函数<br>    Person() {<br>        cout &lt;&lt; “无参构造函数!” &lt;&lt; endl;<br>    }<br>    //有参构造函数<br>    Person(int a) {<br>        age = a;<br>        cout &lt;&lt; “有参构造函数!” &lt;&lt; endl;<br>    }<br>    //拷贝构造函数<br>    Person(const Person&amp; p) {<br>        age = p.age;<br>        cout &lt;&lt; “拷贝构造函数!” &lt;&lt; endl;<br>    }<br>    //析构函数<br>    ~Person() {<br>        cout &lt;&lt; “析构函数!” &lt;&lt; endl;<br>    }<br>public:<br>    int age;<br>};</p>
<p>void test01()<br>{<br>    Person p1(18);<br>    //如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作<br>    Person p2(p1);</p>
<pre><code>cout &lt;&lt; &quot;p2的年龄为： &quot; &lt;&lt; p2.age &lt;&lt; endl;</code></pre>
<p>}</p>
<p>void test02()<br>{<br>    //如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造<br>    Person p1; //此时如果用户自己没有提供默认构造，会出错<br>    Person p2(10); //用户提供的有参<br>    Person p3(p2); //此时如果用户没有提供拷贝构造，编译器会提供</p>
<pre><code>//如果用户提供拷贝构造，编译器不会提供其他构造函数
Person p4; //此时如果用户自己没有提供默认构造，会出错
Person p5(10); //此时如果用户自己没有提供有参，会出错
Person p6(p5); //用户自己提供拷贝构造</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>4.2.5 深拷贝与浅拷贝<br>深浅拷贝是面试经典问题，也是常见的一个坑</p>
<p>浅拷贝：简单的赋值拷贝操作</p>
<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>
<p>示例：</p>
<p>class Person {<br>public:<br>    //无参（默认）构造函数<br>    Person() {<br>        cout &lt;&lt; “无参构造函数!” &lt;&lt; endl;<br>    }<br>    //有参构造函数<br>    Person(int age ,int height) {</p>
<pre><code>    cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;

    m_age = age;
    m_height = new int(height);

&#125;
//拷贝构造函数  
Person(const Person&amp; p) &#123;
    cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;
    //如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题
    m_age = p.m_age;
    m_height = new int(*p.m_height);

&#125;

//析构函数
~Person() &#123;
    cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;
    if (m_height != NULL)
    &#123;
        delete m_height;
    &#125;
&#125;</code></pre>
<p>public:<br>    int m_age;<br>    int* m_height;<br>};</p>
<p>void test01()<br>{<br>    Person p1(18, 180);</p>
<pre><code>Person p2(p1);

cout &lt;&lt; &quot;p1的年龄： &quot; &lt;&lt; p1.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p1.m_height &lt;&lt; endl;

cout &lt;&lt; &quot;p2的年龄： &quot; &lt;&lt; p2.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p2.m_height &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>
<p>4.2.6 初始化列表<br>作用：</p>
<p>C++提供了初始化列表语法，用来初始化属性</p>
<p>语法：构造函数()：属性1(值1),属性2（值2）… {}</p>
<p>示例：</p>
<p>class Person {<br>public:</p>
<pre><code>传统方式初始化
//Person(int a, int b, int c) &#123;
//    m_A = a;
//    m_B = b;
//    m_C = c;
//&#125;

//初始化列表方式初始化
Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c) &#123;&#125;
void PrintPerson() &#123;
    cout &lt;&lt; &quot;mA:&quot; &lt;&lt; m_A &lt;&lt; endl;
    cout &lt;&lt; &quot;mB:&quot; &lt;&lt; m_B &lt;&lt; endl;
    cout &lt;&lt; &quot;mC:&quot; &lt;&lt; m_C &lt;&lt; endl;
&#125;</code></pre>
<p>private:<br>    int m_A;<br>    int m_B;<br>    int m_C;<br>};</p>
<p>int main() {</p>
<pre><code>Person p(1, 2, 3);
p.PrintPerson();


system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>4.2.7 类对象作为类成员<br>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>
<p>例如：</p>
<p>class A {}<br>class B<br>{<br>    A a；<br>}<br>1<br>2<br>3<br>4<br>5<br>B类中有对象A作为成员，A为对象成员</p>
<p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p>
<p>示例：</p>
<p>class Phone<br>{<br>public:<br>    Phone(string name)<br>    {<br>        m_PhoneName = name;<br>        cout &lt;&lt; “Phone构造” &lt;&lt; endl;<br>    }</p>
<pre><code>~Phone()
&#123;
    cout &lt;&lt; &quot;Phone析构&quot; &lt;&lt; endl;
&#125;

string m_PhoneName;</code></pre>
<p>};</p>
<p>class Person<br>{<br>public:</p>
<pre><code>//初始化列表可以告诉编译器调用哪一个构造函数
Person(string name, string pName) :m_Name(name), m_Phone(pName)
&#123;
    cout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl;
&#125;

~Person()
&#123;
    cout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl;
&#125;

void playGame()
&#123;
    cout &lt;&lt; m_Name &lt;&lt; &quot; 使用&quot; &lt;&lt; m_Phone.m_PhoneName &lt;&lt; &quot; 牌手机! &quot; &lt;&lt; endl;
&#125;

string m_Name;
Phone m_Phone;</code></pre>
<p>};<br>void test01()<br>{<br>    //当类中成员是其他类对象时，我们称该成员为 对象成员<br>    //构造的顺序是 ：先调用对象成员的构造，再调用本类构造<br>    //析构顺序与构造相反<br>    Person p(“张三” , “苹果X”);<br>    p.playGame();</p>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>4.2.8 静态成员<br>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>
<p>静态成员分为：</p>
<p>静态成员变量<br>所有对象共享同一份数据<br>在编译阶段分配内存<br>类内声明，类外初始化<br>静态成员函数<br>所有对象共享同一个函数<br>静态成员函数只能访问静态成员变量<br><strong>示例1 ：</strong>静态成员变量</p>
<p>class Person<br>{</p>
<p>public:</p>
<pre><code>static int m_A; //静态成员变量

//静态成员变量特点：
//1 在编译阶段分配内存
//2 类内声明，类外初始化
//3 所有对象共享同一份数据</code></pre>
<p>private:<br>    static int m_B; //静态成员变量也是有访问权限的<br>};<br>int Person::m_A = 10;<br>int Person::m_B = 10;</p>
<p>void test01()<br>{<br>    //静态成员变量两种访问方式</p>
<pre><code>//1、通过对象
Person p1;
p1.m_A = 100;
cout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl;

Person p2;
p2.m_A = 200;
cout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl; //共享同一份数据
cout &lt;&lt; &quot;p2.m_A = &quot; &lt;&lt; p2.m_A &lt;&lt; endl;

//2、通过类名
cout &lt;&lt; &quot;m_A = &quot; &lt;&lt; Person::m_A &lt;&lt; endl;


//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br><strong>示例2：</strong>静态成员函数</p>
<p>class Person<br>{</p>
<p>public:</p>
<pre><code>//静态成员函数特点：
//1 程序共享一个函数
//2 静态成员函数只能访问静态成员变量

static void func()
&#123;
    cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;
    m_A = 100;
    //m_B = 100; //错误，不可以访问非静态成员变量
&#125;

static int m_A; //静态成员变量
int m_B; // </code></pre>
<p>private:</p>
<pre><code>//静态成员函数也是有访问权限的
static void func2()
&#123;
    cout &lt;&lt; &quot;func2调用&quot; &lt;&lt; endl;
&#125;</code></pre>
<p>};<br>int Person::m_A = 10;</p>
<p>void test01()<br>{<br>    //静态成员变量两种访问方式</p>
<pre><code>//1、通过对象
Person p1;
p1.func();

//2、通过类名
Person::func();


//Person::func2(); //私有权限访问不到</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>4.3 C++对象模型和this指针<br>4.3.1 成员变量和成员函数分开存储<br>在C++中，类内的成员变量和成员函数分开存储</p>
<p>只有非静态成员变量才属于类的对象上</p>
<p>class Person {<br>public:<br>    Person() {<br>        mA = 0;<br>    }<br>    //非静态成员变量占对象空间<br>    int mA;<br>    //静态成员变量不占对象空间<br>    static int mB;<br>    //函数也不占对象空间，所有函数共享一个函数实例<br>    void func() {<br>        cout &lt;&lt; “mA:” &lt;&lt; this-&gt;mA &lt;&lt; endl;<br>    }<br>    //静态成员函数也不占对象空间<br>    static void sfunc() {<br>    }<br>};</p>
<p>int main() {</p>
<pre><code>cout &lt;&lt; sizeof(Person) &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>4.3.2 this指针概念<br>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p>
<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>
<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>
<p>c++通过提供特殊的对象指针，this指针，解决上述问题。this指针指向被调用的成员函数所属的对象</p>
<p>this指针是隐含每一个非静态成员函数内的一种指针</p>
<p>this指针不需要定义，直接使用即可</p>
<p>this指针的用途：</p>
<p>当形参和成员变量同名时，可用this指针来区分<br>在类的非静态成员函数中返回对象本身，可使用return *this<br>class Person<br>{<br>public:</p>
<pre><code>Person(int age)
&#123;
    //1、当形参和成员变量同名时，可用this指针来区分
    this-&gt;age = age;
&#125;

Person&amp; PersonAddPerson(Person p)
&#123;
    this-&gt;age += p.age;
    //返回对象本身
    return *this;
&#125;

int age;</code></pre>
<p>};</p>
<p>void test01()<br>{<br>    Person p1(10);<br>    cout &lt;&lt; “p1.age = “ &lt;&lt; p1.age &lt;&lt; endl;</p>
<pre><code>Person p2(10);
p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);
cout &lt;&lt; &quot;p2.age = &quot; &lt;&lt; p2.age &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>4.3.3 空指针访问成员函数<br>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>
<p>如果用到this指针，需要加以判断保证代码的健壮性</p>
<p>示例：</p>
<p>//空指针访问成员函数<br>class Person {<br>public:</p>
<pre><code>void ShowClassName() &#123;
    cout &lt;&lt; &quot;我是Person类!&quot; &lt;&lt; endl;
&#125;

void ShowPerson() &#123;
    if (this == NULL) &#123;
        return;
    &#125;
    cout &lt;&lt; mAge &lt;&lt; endl;
&#125;</code></pre>
<p>public:<br>    int mAge;<br>};</p>
<p>void test01()<br>{<br>    Person * p = NULL;<br>    p-&gt;ShowClassName(); //空指针，可以调用成员函数<br>    p-&gt;ShowPerson();  //但是如果成员函数中用到了this指针，就不可以了<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>4.3.4 const修饰成员函数<br>常函数：</p>
<p>成员函数后加const后我们称为这个函数为常函数<br>常函数内不可以修改成员属性<br>成员属性声明时加关键字mutable后，在常函数中依然可以修改<br>常对象：</p>
<p>声明对象前加const称该对象为常对象<br>常对象只能调用常函数<br>示例：</p>
<p>class Person {<br>public:<br>    Person() {<br>        m_A = 0;<br>        m_B = 0;<br>    }</p>
<pre><code>//this指针的本质是一个指针常量，指针的指向不可修改
//如果想让指针指向的值也不可以修改，需要声明常函数
void ShowPerson() const &#123;
    //const Type* const pointer;
    //this = NULL; //不能修改指针的指向 Person* const this;
    //this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的

    //const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量
    this-&gt;m_B = 100;
&#125;

void MyFunc() const &#123;
    //mA = 10000;
&#125;</code></pre>
<p>public:<br>    int m_A;<br>    mutable int m_B; //可修改 可变的<br>};</p>
<p>//const修饰对象  常对象<br>void test01() {</p>
<pre><code>const Person person; //常量对象  
cout &lt;&lt; person.m_A &lt;&lt; endl;
//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问
person.m_B = 100; //但是常对象可以修改mutable修饰成员变量

//常对象访问成员函数
person.MyFunc(); //常对象不能调用const的函数</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>4.4 友元<br>生活中你的家有客厅(Public)，有你的卧室(Private)</p>
<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>
<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>
<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>
<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>
<p>友元的关键字为 friend</p>
<p>友元的三种实现</p>
<p>全局函数做友元<br>类做友元<br>成员函数做友元<br>4.4.1 全局函数做友元<br>class Building<br>{<br>    //告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容<br>    friend void goodGay(Building * building);</p>
<p>public:</p>
<pre><code>Building()
&#123;
    this-&gt;m_SittingRoom = &quot;客厅&quot;;
    this-&gt;m_BedRoom = &quot;卧室&quot;;
&#125;</code></pre>
<p>public:<br>    string m_SittingRoom; //客厅</p>
<p>private:<br>    string m_BedRoom; //卧室<br>};</p>
<p>void goodGay(Building * building)<br>{<br>    cout &lt;&lt; “好基友正在访问： “ &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>    cout &lt;&lt; “好基友正在访问： “ &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>}</p>
<p>void test01()<br>{<br>    Building b;<br>    goodGay(&amp;b);<br>}</p>
<p>int main(){</p>
<pre><code>test01();

system(&quot;pause&quot;);
return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>4.4.2 类做友元<br>class Building;<br>class goodGay<br>{<br>public:</p>
<pre><code>goodGay();
void visit();</code></pre>
<p>private:<br>    Building *building;<br>};</p>
<p>class Building<br>{<br>    //告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容<br>    friend class goodGay;</p>
<p>public:<br>    Building();</p>
<p>public:<br>    string m_SittingRoom; //客厅<br>private:<br>    string m_BedRoom;//卧室<br>};</p>
<p>Building::Building()<br>{<br>    this-&gt;m_SittingRoom = “客厅”;<br>    this-&gt;m_BedRoom = “卧室”;<br>}</p>
<p>goodGay::goodGay()<br>{<br>    building = new Building;<br>}</p>
<p>void goodGay::visit()<br>{<br>    cout &lt;&lt; “好基友正在访问” &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>    cout &lt;&lt; “好基友正在访问” &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>}</p>
<p>void test01()<br>{<br>    goodGay gg;<br>    gg.visit();</p>
<p>}</p>
<p>int main(){</p>
<pre><code>test01();

system(&quot;pause&quot;);
return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>4.4.3 成员函数做友元</p>
<p>class Building;<br>class goodGay<br>{<br>public:</p>
<pre><code>goodGay();
void visit(); //只让visit函数作为Building的好朋友，可以发访问Building中私有内容
void visit2(); </code></pre>
<p>private:<br>    Building *building;<br>};</p>
<p>class Building<br>{<br>    //告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容<br>    friend void goodGay::visit();</p>
<p>public:<br>    Building();</p>
<p>public:<br>    string m_SittingRoom; //客厅<br>private:<br>    string m_BedRoom;//卧室<br>};</p>
<p>Building::Building()<br>{<br>    this-&gt;m_SittingRoom = “客厅”;<br>    this-&gt;m_BedRoom = “卧室”;<br>}</p>
<p>goodGay::goodGay()<br>{<br>    building = new Building;<br>}</p>
<p>void goodGay::visit()<br>{<br>    cout &lt;&lt; “好基友正在访问” &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>    cout &lt;&lt; “好基友正在访问” &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>}</p>
<p>void goodGay::visit2()<br>{<br>    cout &lt;&lt; “好基友正在访问” &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>    //cout &lt;&lt; “好基友正在访问” &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>}</p>
<p>void test01()<br>{<br>    goodGay  gg;<br>    gg.visit();</p>
<p>}</p>
<p>int main(){</p>
<pre><code>test01();

system(&quot;pause&quot;);
return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>4.5 运算符重载<br>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>
<p>4.5.1 加号运算符重载<br>作用：实现两个自定义数据类型相加的运算</p>
<p>class Person {<br>public:<br>    Person() {};<br>    Person(int a, int b)<br>    {<br>        this-&gt;m_A = a;<br>        this-&gt;m_B = b;<br>    }<br>    //成员函数实现 + 号运算符重载<br>    Person operator+(const Person&amp; p) {<br>        Person temp;<br>        temp.m_A = this-&gt;m_A + p.m_A;<br>        temp.m_B = this-&gt;m_B + p.m_B;<br>        return temp;<br>    }</p>
<p>public:<br>    int m_A;<br>    int m_B;<br>};</p>
<p>//全局函数实现 + 号运算符重载<br>//Person operator+(const Person&amp; p1, const Person&amp; p2) {<br>//    Person temp(0, 0);<br>//    temp.m_A = p1.m_A + p2.m_A;<br>//    temp.m_B = p1.m_B + p2.m_B;<br>//    return temp;<br>//}</p>
<p>//运算符重载 可以发生函数重载<br>Person operator+(const Person&amp; p2, int val)<br>{<br>    Person temp;<br>    temp.m_A = p2.m_A + val;<br>    temp.m_B = p2.m_B + val;<br>    return temp;<br>}</p>
<p>void test() {</p>
<pre><code>Person p1(10, 10);
Person p2(20, 20);

//成员函数方式
Person p3 = p2 + p1;  //相当于 p2.operaor+(p1)
cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p3.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p3.m_B &lt;&lt; endl;


Person p4 = p3 + 10; //相当于 operator+(p3,10)
cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p4.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p4.m_B &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p>
<p>总结2：不要滥用运算符重载</p>
<p>4.5.2 左移运算符重载<br>作用：可以输出自定义数据类型</p>
<p>class Person {<br>    friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);</p>
<p>public:</p>
<pre><code>Person(int a, int b)
&#123;
    this-&gt;m_A = a;
    this-&gt;m_B = b;
&#125;

//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果
//void operator&lt;&lt;(Person&amp; p)&#123;
//&#125;</code></pre>
<p>private:<br>    int m_A;<br>    int m_B;<br>};</p>
<p>//全局函数实现左移重载<br>//ostream对象只能有一个<br>ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) {<br>    out &lt;&lt; “a:” &lt;&lt; p.m_A &lt;&lt; “ b:” &lt;&lt; p.m_B;<br>    return out;<br>}</p>
<p>void test() {</p>
<pre><code>Person p1(10, 20);

cout &lt;&lt; p1 &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; //链式编程</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p>
<p>4.5.3 递增运算符重载<br>作用： 通过重载递增运算符，实现自己的整型数据</p>
<p>class MyInteger {</p>
<pre><code>friend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);</code></pre>
<p>public:<br>    MyInteger() {<br>        m_Num = 0;<br>    }<br>    //前置++<br>    MyInteger&amp; operator++() {<br>        //先++<br>        m_Num++;<br>        //再返回<br>        return *this;<br>    }</p>
<pre><code>//后置++
MyInteger operator++(int) &#123;
    //先返回
    MyInteger temp = *this; //记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；
    m_Num++;
    return temp;
&#125;</code></pre>
<p>private:<br>    int m_Num;<br>};</p>
<p>ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) {<br>    out &lt;&lt; myint.m_Num;<br>    return out;<br>}</p>
<p>//前置++ 先++ 再返回<br>void test01() {<br>    MyInteger myInt;<br>    cout &lt;&lt; ++myInt &lt;&lt; endl;<br>    cout &lt;&lt; myInt &lt;&lt; endl;<br>}</p>
<p>//后置++ 先返回 再++<br>void test02() {</p>
<pre><code>MyInteger myInt;
cout &lt;&lt; myInt++ &lt;&lt; endl;
cout &lt;&lt; myInt &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();
//test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>总结： 前置递增返回引用，后置递增返回值</p>
<p>4.5.4 赋值运算符重载<br>c++编译器至少给一个类添加4个函数</p>
<p>默认构造函数(无参，函数体为空)<br>默认析构函数(无参，函数体为空)<br>默认拷贝构造函数，对属性进行值拷贝<br>赋值运算符 operator=, 对属性进行值拷贝<br>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>
<p>示例：</p>
<p>class Person<br>{<br>public:</p>
<pre><code>Person(int age)
&#123;
    //将年龄数据开辟到堆区
    m_Age = new int(age);
&#125;

//重载赋值运算符 
Person&amp; operator=(Person &amp;p)
&#123;
    if (m_Age != NULL)
    &#123;
        delete m_Age;
        m_Age = NULL;
    &#125;
    //编译器提供的代码是浅拷贝
    //m_Age = p.m_Age;

    //提供深拷贝 解决浅拷贝的问题
    m_Age = new int(*p.m_Age);

    //返回自身
    return *this;
&#125;


~Person()
&#123;
    if (m_Age != NULL)
    &#123;
        delete m_Age;
        m_Age = NULL;
    &#125;
&#125;

//年龄的指针
int *m_Age;</code></pre>
<p>};</p>
<p>void test01()<br>{<br>    Person p1(18);</p>
<pre><code>Person p2(20);

Person p3(30);

p3 = p2 = p1; //赋值操作

cout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; *p1.m_Age &lt;&lt; endl;

cout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; *p2.m_Age &lt;&lt; endl;

cout &lt;&lt; &quot;p3的年龄为：&quot; &lt;&lt; *p3.m_Age &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

//int a = 10;
//int b = 20;
//int c = 30;

//c = b = a;
//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;
//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>4.5.5 关系运算符重载<br><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p>
<p>示例：</p>
<p>class Person<br>{<br>public:<br>    Person(string name, int age)<br>    {<br>        this-&gt;m_Name = name;<br>        this-&gt;m_Age = age;<br>    };</p>
<pre><code>bool operator==(Person &amp; p)
&#123;
    if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)
    &#123;
        return true;
    &#125;
    else
    &#123;
        return false;
    &#125;
&#125;

bool operator!=(Person &amp; p)
&#123;
    if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)
    &#123;
        return false;
    &#125;
    else
    &#123;
        return true;
    &#125;
&#125;

string m_Name;
int m_Age;</code></pre>
<p>};</p>
<p>void test01()<br>{<br>    //int a = 0;<br>    //int b = 0;</p>
<pre><code>Person a(&quot;孙悟空&quot;, 18);
Person b(&quot;孙悟空&quot;, 18);

if (a == b)
&#123;
    cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;
&#125;

if (a != b)
&#123;
    cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>4.5.6 函数调用运算符重载<br>函数调用运算符 () 也可以重载<br>由于重载后使用的方式非常像函数的调用，因此称为仿函数<br>仿函数没有固定写法，非常灵活<br>示例：</p>
<p>class MyPrint<br>{<br>public:<br>    void operator()(string text)<br>    {<br>        cout &lt;&lt; text &lt;&lt; endl;<br>    }</p>
<p>};<br>void test01()<br>{<br>    //重载的（）操作符 也称为仿函数<br>    MyPrint myFunc;<br>    myFunc(“hello world”);<br>}</p>
<p>class MyAdd<br>{<br>public:<br>    int operator()(int v1, int v2)<br>    {<br>        return v1 + v2;<br>    }<br>};</p>
<p>void test02()<br>{<br>    MyAdd add;<br>    int ret = add(10, 10);<br>    cout &lt;&lt; “ret = “ &lt;&lt; ret &lt;&lt; endl;</p>
<pre><code>//匿名对象调用  
cout &lt;&lt; &quot;MyAdd()(100,100) = &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();
test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>4.6 继承<br>继承是面向对象三大特性之一</p>
<p>有些类与类之间存在特殊的关系，例如下图中：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-q4LuDlTt-1599302023865)(assets/1544861202252.png)]</p>
<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>
<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>
<p>4.6.1 继承的基本语法<br>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>
<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>
<p>普通实现：</p>
<p>//Java页面<br>class Java<br>{<br>public:<br>    void header()<br>    {<br>        cout &lt;&lt; “首页、公开课、登录、注册…（公共头部）” &lt;&lt; endl;<br>    }<br>    void footer()<br>    {<br>        cout &lt;&lt; “帮助中心、交流合作、站内地图…(公共底部)” &lt;&lt; endl;<br>    }<br>    void left()<br>    {<br>        cout &lt;&lt; “Java,Python,C++…(公共分类列表)” &lt;&lt; endl;<br>    }<br>    void content()<br>    {<br>        cout &lt;&lt; “JAVA学科视频” &lt;&lt; endl;<br>    }<br>};<br>//Python页面<br>class Python<br>{<br>public:<br>    void header()<br>    {<br>        cout &lt;&lt; “首页、公开课、登录、注册…（公共头部）” &lt;&lt; endl;<br>    }<br>    void footer()<br>    {<br>        cout &lt;&lt; “帮助中心、交流合作、站内地图…(公共底部)” &lt;&lt; endl;<br>    }<br>    void left()<br>    {<br>        cout &lt;&lt; “Java,Python,C++…(公共分类列表)” &lt;&lt; endl;<br>    }<br>    void content()<br>    {<br>        cout &lt;&lt; “Python学科视频” &lt;&lt; endl;<br>    }<br>};<br>//C++页面<br>class CPP<br>{<br>public:<br>    void header()<br>    {<br>        cout &lt;&lt; “首页、公开课、登录、注册…（公共头部）” &lt;&lt; endl;<br>    }<br>    void footer()<br>    {<br>        cout &lt;&lt; “帮助中心、交流合作、站内地图…(公共底部)” &lt;&lt; endl;<br>    }<br>    void left()<br>    {<br>        cout &lt;&lt; “Java,Python,C++…(公共分类列表)” &lt;&lt; endl;<br>    }<br>    void content()<br>    {<br>        cout &lt;&lt; “C++学科视频” &lt;&lt; endl;<br>    }<br>};</p>
<p>void test01()<br>{<br>    //Java页面<br>    cout &lt;&lt; “Java下载视频页面如下： “ &lt;&lt; endl;<br>    Java ja;<br>    ja.header();<br>    ja.footer();<br>    ja.left();<br>    ja.content();<br>    cout &lt;&lt; “——————–” &lt;&lt; endl;</p>
<pre><code>//Python页面
cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;
Python py;
py.header();
py.footer();
py.left();
py.content();
cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;

//C++页面
cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;
CPP cp;
cp.header();
cp.footer();
cp.left();
cp.content();</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>继承实现：</p>
<p>//公共页面<br>class BasePage<br>{<br>public:<br>    void header()<br>    {<br>        cout &lt;&lt; “首页、公开课、登录、注册…（公共头部）” &lt;&lt; endl;<br>    }</p>
<pre><code>void footer()
&#123;
    cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;
&#125;
void left()
&#123;
    cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;
&#125;</code></pre>
<p>};</p>
<p>//Java页面<br>class Java : public BasePage<br>{<br>public:<br>    void content()<br>    {<br>        cout &lt;&lt; “JAVA学科视频” &lt;&lt; endl;<br>    }<br>};<br>//Python页面<br>class Python : public BasePage<br>{<br>public:<br>    void content()<br>    {<br>        cout &lt;&lt; “Python学科视频” &lt;&lt; endl;<br>    }<br>};<br>//C++页面<br>class CPP : public BasePage<br>{<br>public:<br>    void content()<br>    {<br>        cout &lt;&lt; “C++学科视频” &lt;&lt; endl;<br>    }<br>};</p>
<p>void test01()<br>{<br>    //Java页面<br>    cout &lt;&lt; “Java下载视频页面如下： “ &lt;&lt; endl;<br>    Java ja;<br>    ja.header();<br>    ja.footer();<br>    ja.left();<br>    ja.content();<br>    cout &lt;&lt; “——————–” &lt;&lt; endl;</p>
<pre><code>//Python页面
cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;
Python py;
py.header();
py.footer();
py.left();
py.content();
cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;

//C++页面
cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;
CPP cp;
cp.header();
cp.footer();
cp.left();
cp.content();</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>总结：</p>
<p>继承的好处：可以减少重复的代码</p>
<p>class A : public B;</p>
<p>A 类称为子类 或 派生类</p>
<p>B 类称为父类 或 基类</p>
<p>派生类中的成员，包含两大部分：</p>
<p>一类是从基类继承过来的，一类是自己增加的成员。</p>
<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>
<p>4.6.2 继承方式<br>继承的语法：class 子类 : 继承方式 父类</p>
<p>继承方式一共有三种：</p>
<p>公共继承<br>保护继承<br>私有继承<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-aDOh81u7-1599302023867)(assets/clip_image002.png)]</p>
<p>示例：</p>
<p>class Base1<br>{<br>public:<br>    int m_A;<br>protected:<br>    int m_B;<br>private:<br>    int m_C;<br>};</p>
<p>//公共继承<br>class Son1 :public Base1<br>{<br>public:<br>    void func()<br>    {<br>        m_A; //可访问 public权限<br>        m_B; //可访问 protected权限<br>        //m_C; //不可访问<br>    }<br>};</p>
<p>void myClass()<br>{<br>    Son1 s1;<br>    s1.m_A; //其他类只能访问到公共权限<br>}</p>
<p>//保护继承<br>class Base2<br>{<br>public:<br>    int m_A;<br>protected:<br>    int m_B;<br>private:<br>    int m_C;<br>};<br>class Son2:protected Base2<br>{<br>public:<br>    void func()<br>    {<br>        m_A; //可访问 protected权限<br>        m_B; //可访问 protected权限<br>        //m_C; //不可访问<br>    }<br>};<br>void myClass2()<br>{<br>    Son2 s;<br>    //s.m_A; //不可访问<br>}</p>
<p>//私有继承<br>class Base3<br>{<br>public:<br>    int m_A;<br>protected:<br>    int m_B;<br>private:<br>    int m_C;<br>};<br>class Son3:private Base3<br>{<br>public:<br>    void func()<br>    {<br>        m_A; //可访问 private权限<br>        m_B; //可访问 private权限<br>        //m_C; //不可访问<br>    }<br>};<br>class GrandSon3 :public Son3<br>{<br>public:<br>    void func()<br>    {<br>        //Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到<br>        //m_A;<br>        //m_B;<br>        //m_C;<br>    }<br>};<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>4.6.3 继承中的对象模型<br><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p>
<p>示例：</p>
<p>class Base<br>{<br>public:<br>    int m_A;<br>protected:<br>    int m_B;<br>private:<br>    int m_C; //私有成员只是被隐藏了，但是还是会继承下去<br>};</p>
<p>//公共继承<br>class Son :public Base<br>{<br>public:<br>    int m_D;<br>};</p>
<p>void test01()<br>{<br>    cout &lt;&lt; “sizeof Son = “ &lt;&lt; sizeof(Son) &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>利用工具查看：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-S7lum5IJ-1599302023868)(assets/1545881904150.png)]</p>
<p>打开工具窗口后，定位到当前CPP文件的盘符</p>
<p>然后输入： cl /d1 reportSingleClassLayout查看的类名 所属文件名</p>
<p>效果如下图：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-kRfHBh09-1599302023868)(assets/1545882158050.png)]</p>
<p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p>
<p>4.6.4 继承中构造和析构顺序<br>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>
<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>
<p>示例：</p>
<p>class Base<br>{<br>public:<br>    Base()<br>    {<br>        cout &lt;&lt; “Base构造函数!” &lt;&lt; endl;<br>    }<br>    ~Base()<br>    {<br>        cout &lt;&lt; “Base析构函数!” &lt;&lt; endl;<br>    }<br>};</p>
<p>class Son : public Base<br>{<br>public:<br>    Son()<br>    {<br>        cout &lt;&lt; “Son构造函数!” &lt;&lt; endl;<br>    }<br>    ~Son()<br>    {<br>        cout &lt;&lt; “Son析构函数!” &lt;&lt; endl;<br>    }</p>
<p>};</p>
<p>void test01()<br>{<br>    //继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反<br>    Son s;<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p>
<p>4.6.5 继承同名成员处理方式<br>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>
<p>访问子类同名成员 直接访问即可<br>访问父类同名成员 需要加作用域<br>示例：</p>
<p>class Base {<br>public:<br>    Base()<br>    {<br>        m_A = 100;<br>    }</p>
<pre><code>void func()
&#123;
    cout &lt;&lt; &quot;Base - func()调用&quot; &lt;&lt; endl;
&#125;

void func(int a)
&#123;
    cout &lt;&lt; &quot;Base - func(int a)调用&quot; &lt;&lt; endl;
&#125;</code></pre>
<p>public:<br>    int m_A;<br>};</p>
<p>class Son : public Base {<br>public:<br>    Son()<br>    {<br>        m_A = 200;<br>    }</p>
<pre><code>//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数
//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域
void func()
&#123;
    cout &lt;&lt; &quot;Son - func()调用&quot; &lt;&lt; endl;
&#125;</code></pre>
<p>public:<br>    int m_A;<br>};</p>
<p>void test01()<br>{<br>    Son s;</p>
<pre><code>cout &lt;&lt; &quot;Son下的m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl;
cout &lt;&lt; &quot;Base下的m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;

s.func();
s.Base::func();
s.Base::func(10);</code></pre>
<p>}<br>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);
return EXIT_SUCCESS;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>总结：</p>
<p>子类对象可以直接访问到子类中同名成员<br>子类对象加作用域可以访问到父类同名成员<br>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数<br>4.6.6 继承同名静态成员处理方式<br>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>
<p>静态成员和非静态成员出现同名，处理方式一致</p>
<p>访问子类同名成员 直接访问即可<br>访问父类同名成员 需要加作用域<br>示例：</p>
<p>class Base {<br>public:<br>    static void func()<br>    {<br>        cout &lt;&lt; “Base - static void func()” &lt;&lt; endl;<br>    }<br>    static void func(int a)<br>    {<br>        cout &lt;&lt; “Base - static void func(int a)” &lt;&lt; endl;<br>    }</p>
<pre><code>static int m_A;</code></pre>
<p>};</p>
<p>int Base::m_A = 100;</p>
<p>class Son : public Base {<br>public:<br>    static void func()<br>    {<br>        cout &lt;&lt; “Son - static void func()” &lt;&lt; endl;<br>    }<br>    static int m_A;<br>};</p>
<p>int Son::m_A = 200;</p>
<p>//同名成员属性<br>void test01()<br>{<br>    //通过对象访问<br>    cout &lt;&lt; “通过对象访问： “ &lt;&lt; endl;<br>    Son s;<br>    cout &lt;&lt; “Son  下 m_A = “ &lt;&lt; s.m_A &lt;&lt; endl;<br>    cout &lt;&lt; “Base 下 m_A = “ &lt;&lt; s.Base::m_A &lt;&lt; endl;</p>
<pre><code>//通过类名访问
cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;
cout &lt;&lt; &quot;Son  下 m_A = &quot; &lt;&lt; Son::m_A &lt;&lt; endl;
cout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;</code></pre>
<p>}</p>
<p>//同名成员函数<br>void test02()<br>{<br>    //通过对象访问<br>    cout &lt;&lt; “通过对象访问： “ &lt;&lt; endl;<br>    Son s;<br>    s.func();<br>    s.Base::func();</p>
<pre><code>cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;
Son::func();
Son::Base::func();
//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问
Son::Base::func(100);</code></pre>
<p>}<br>int main() {</p>
<pre><code>//test01();
test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p>
<p>4.6.7 多继承语法<br>C++允许一个类继承多个类</p>
<p>语法：class 子类 ：继承方式 父类1 ， 继承方式 父类2…</p>
<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>
<p>C++实际开发中不建议用多继承</p>
<p>示例：</p>
<p>class Base1 {<br>public:<br>    Base1()<br>    {<br>        m_A = 100;<br>    }<br>public:<br>    int m_A;<br>};</p>
<p>class Base2 {<br>public:<br>    Base2()<br>    {<br>        m_A = 200;  //开始是m_B 不会出问题，但是改为mA就会出现不明确<br>    }<br>public:<br>    int m_A;<br>};</p>
<p>//语法：class 子类：继承方式 父类1 ，继承方式 父类2<br>class Son : public Base2, public Base1<br>{<br>public:<br>    Son()<br>    {<br>        m_C = 300;<br>        m_D = 400;<br>    }<br>public:<br>    int m_C;<br>    int m_D;<br>};</p>
<p>//多继承容易产生成员同名的情况<br>//通过使用类名作用域可以区分调用哪一个基类的成员<br>void test01()<br>{<br>    Son s;<br>    cout &lt;&lt; “sizeof Son = “ &lt;&lt; sizeof(s) &lt;&lt; endl;<br>    cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;<br>    cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p>
<p>4.6.8 菱形继承<br>菱形继承概念：</p>
<p>​ 两个派生类继承同一个基类</p>
<p>​ 又有某个类同时继承者两个派生类</p>
<p>​ 这种继承被称为菱形继承，或者钻石继承</p>
<p>典型的菱形继承案例：</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-3VLa1zsh-1599302023870)(assets/clip_image002.jpg)]</p>
<p>菱形继承问题：</p>
<p>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。<br>1<br>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p>
<p>示例：</p>
<p>class Animal<br>{<br>public:<br>    int m_Age;<br>};</p>
<p>//继承前加virtual关键字后，变为虚继承<br>//此时公共的父类Animal称为虚基类<br>class Sheep : virtual public Animal {};<br>class Tuo   : virtual public Animal {};<br>class SheepTuo : public Sheep, public Tuo {};</p>
<p>void test01()<br>{<br>    SheepTuo st;<br>    st.Sheep::m_Age = 100;<br>    st.Tuo::m_Age = 200;</p>
<pre><code>cout &lt;&lt; &quot;st.Sheep::m_Age = &quot; &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;
cout &lt;&lt; &quot;st.Tuo::m_Age = &quot; &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;
cout &lt;&lt; &quot;st.m_Age = &quot; &lt;&lt; st.m_Age &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>总结：</p>
<p>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义<br>利用虚继承可以解决菱形继承问题<br>4.7 多态<br>4.7.1 多态的基本概念<br>多态是C++面向对象三大特性之一</p>
<p>多态分为两类</p>
<p>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名<br>动态多态: 派生类和虚函数实现运行时多态<br>静态多态和动态多态区别：</p>
<p>静态多态的函数地址早绑定 - 编译阶段确定函数地址<br>动态多态的函数地址晚绑定 - 运行阶段确定函数地址<br>下面通过案例进行讲解多态</p>
<p>class Animal<br>{<br>public:<br>    //Speak函数就是虚函数<br>    //函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。<br>    virtual void speak()<br>    {<br>        cout &lt;&lt; “动物在说话” &lt;&lt; endl;<br>    }<br>};</p>
<p>class Cat :public Animal<br>{<br>public:<br>    void speak()<br>    {<br>        cout &lt;&lt; “小猫在说话” &lt;&lt; endl;<br>    }<br>};</p>
<p>class Dog :public Animal<br>{<br>public:</p>
<pre><code>void speak()
&#123;
    cout &lt;&lt; &quot;小狗在说话&quot; &lt;&lt; endl;
&#125;</code></pre>
<p>};<br>//我们希望传入什么对象，那么就调用什么对象的函数<br>//如果函数地址在编译阶段就能确定，那么静态联编<br>//如果函数地址在运行阶段才能确定，就是动态联编</p>
<p>void DoSpeak(Animal &amp; animal)<br>{<br>    animal.speak();<br>}<br>//<br>//多态满足条件：<br>//1、有继承关系<br>//2、子类重写父类中的虚函数<br>//多态使用：<br>//父类指针或引用指向子类对象</p>
<p>void test01()<br>{<br>    Cat cat;<br>    DoSpeak(cat);</p>
<pre><code>Dog dog;
DoSpeak(dog);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>总结：</p>
<p>多态满足条件</p>
<p>有继承关系<br>子类重写父类中的虚函数<br>多态使用条件</p>
<p>父类指针或引用指向子类对象<br>重写：函数返回值类型 函数名 参数列表 完全一致称为重写</p>
<p>4.7.2 多态案例一-计算器类<br>案例描述：</p>
<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>
<p>多态的优点：</p>
<p>代码组织结构清晰<br>可读性强<br>利于前期和后期的扩展以及维护<br>示例：</p>
<p>//普通实现<br>class Calculator {<br>public:<br>    int getResult(string oper)<br>    {<br>        if (oper == “+”) {<br>            return m_Num1 + m_Num2;<br>        }<br>        else if (oper == “-“) {<br>            return m_Num1 - m_Num2;<br>        }<br>        else if (oper == “*”) {<br>            return m_Num1 * m_Num2;<br>        }<br>        //如果要提供新的运算，需要修改源码<br>    }<br>public:<br>    int m_Num1;<br>    int m_Num2;<br>};</p>
<p>void test01()<br>{<br>    //普通实现测试<br>    Calculator c;<br>    c.m_Num1 = 10;<br>    c.m_Num2 = 10;<br>    cout &lt;&lt; c.m_Num1 &lt;&lt; “ + “ &lt;&lt; c.m_Num2 &lt;&lt; “ = “ &lt;&lt; c.getResult(“+”) &lt;&lt; endl;</p>
<pre><code>cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;-&quot;) &lt;&lt; endl;

cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;*&quot;) &lt;&lt; endl;</code></pre>
<p>}</p>
<p>//多态实现<br>//抽象计算器类<br>//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护<br>class AbstractCalculator<br>{<br>public :</p>
<pre><code>virtual int getResult()
&#123;
    return 0;
&#125;

int m_Num1;
int m_Num2;</code></pre>
<p>};</p>
<p>//加法计算器<br>class AddCalculator :public AbstractCalculator<br>{<br>public:<br>    int getResult()<br>    {<br>        return m_Num1 + m_Num2;<br>    }<br>};</p>
<p>//减法计算器<br>class SubCalculator :public AbstractCalculator<br>{<br>public:<br>    int getResult()<br>    {<br>        return m_Num1 - m_Num2;<br>    }<br>};</p>
<p>//乘法计算器<br>class MulCalculator :public AbstractCalculator<br>{<br>public:<br>    int getResult()<br>    {<br>        return m_Num1 * m_Num2;<br>    }<br>};</p>
<p>void test02()<br>{<br>    //创建加法计算器<br>    AbstractCalculator *abc = new AddCalculator;<br>    abc-&gt;m_Num1 = 10;<br>    abc-&gt;m_Num2 = 10;<br>    cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; “ + “ &lt;&lt; abc-&gt;m_Num2 &lt;&lt; “ = “ &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;<br>    delete abc;  //用完了记得销毁</p>
<pre><code>//创建减法计算器
abc = new SubCalculator;
abc-&gt;m_Num1 = 10;
abc-&gt;m_Num2 = 10;
cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;
delete abc;  

//创建乘法计算器
abc = new MulCalculator;
abc-&gt;m_Num1 = 10;
abc-&gt;m_Num2 = 10;
cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;
delete abc;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>//test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p>
<p>4.7.3 纯虚函数和抽象类<br>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>
<p>因此可以将虚函数改为纯虚函数</p>
<p>纯虚函数语法：virtual 返回值类型 函数名 （参数列表）= 0 ;</p>
<p>当类中有了纯虚函数，这个类也称为抽象类</p>
<p>抽象类特点：</p>
<p>无法实例化对象<br>子类必须重写抽象类中的纯虚函数，否则也属于抽象类<br>示例：</p>
<p>class Base<br>{<br>public:<br>    //纯虚函数<br>    //类中只要有一个纯虚函数就称为抽象类<br>    //抽象类无法实例化对象<br>    //子类必须重写父类中的纯虚函数，否则也属于抽象类<br>    virtual void func() = 0;<br>};</p>
<p>class Son :public Base<br>{<br>public:<br>    virtual void func()<br>    {<br>        cout &lt;&lt; “func调用” &lt;&lt; endl;<br>    };<br>};</p>
<p>void test01()<br>{<br>    Base * base = NULL;<br>    //base = new Base; // 错误，抽象类无法实例化对象<br>    base = new Son;<br>    base-&gt;func();<br>    delete base;//记得销毁<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>4.7.4 多态案例二-制作饮品<br>案例描述：</p>
<p>制作饮品的大致流程为：煮水 - 冲泡 - 倒入杯中 - 加入辅料</p>
<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ryWrUSph-1599302023871)(assets/1545985945198.png)]</p>
<p>示例：</p>
<p>//抽象制作饮品<br>class AbstractDrinking {<br>public:<br>    //烧水<br>    virtual void Boil() = 0;<br>    //冲泡<br>    virtual void Brew() = 0;<br>    //倒入杯中<br>    virtual void PourInCup() = 0;<br>    //加入辅料<br>    virtual void PutSomething() = 0;<br>    //规定流程<br>    void MakeDrink() {<br>        Boil();<br>        Brew();<br>        PourInCup();<br>        PutSomething();<br>    }<br>};</p>
<p>//制作咖啡<br>class Coffee : public AbstractDrinking {<br>public:<br>    //烧水<br>    virtual void Boil() {<br>        cout &lt;&lt; “煮农夫山泉!” &lt;&lt; endl;<br>    }<br>    //冲泡<br>    virtual void Brew() {<br>        cout &lt;&lt; “冲泡咖啡!” &lt;&lt; endl;<br>    }<br>    //倒入杯中<br>    virtual void PourInCup() {<br>        cout &lt;&lt; “将咖啡倒入杯中!” &lt;&lt; endl;<br>    }<br>    //加入辅料<br>    virtual void PutSomething() {<br>        cout &lt;&lt; “加入牛奶!” &lt;&lt; endl;<br>    }<br>};</p>
<p>//制作茶水<br>class Tea : public AbstractDrinking {<br>public:<br>    //烧水<br>    virtual void Boil() {<br>        cout &lt;&lt; “煮自来水!” &lt;&lt; endl;<br>    }<br>    //冲泡<br>    virtual void Brew() {<br>        cout &lt;&lt; “冲泡茶叶!” &lt;&lt; endl;<br>    }<br>    //倒入杯中<br>    virtual void PourInCup() {<br>        cout &lt;&lt; “将茶水倒入杯中!” &lt;&lt; endl;<br>    }<br>    //加入辅料<br>    virtual void PutSomething() {<br>        cout &lt;&lt; “加入枸杞!” &lt;&lt; endl;<br>    }<br>};</p>
<p>//业务函数<br>void DoWork(AbstractDrinking* drink) {<br>    drink-&gt;MakeDrink();<br>    delete drink;<br>}</p>
<p>void test01() {<br>    DoWork(new Coffee);<br>    cout &lt;&lt; “————–” &lt;&lt; endl;<br>    DoWork(new Tea);<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>4.7.5 虚析构和纯虚析构<br>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>
<p>解决方式：将父类中的析构函数改为虚析构或者纯虚析构</p>
<p>虚析构和纯虚析构共性：</p>
<p>可以解决父类指针释放子类对象<br>都需要有具体的函数实现<br>虚析构和纯虚析构区别：</p>
<p>如果是纯虚析构，该类属于抽象类，无法实例化对象<br>虚析构语法：</p>
<p>virtual ~类名(){}</p>
<p>纯虚析构语法：</p>
<p>virtual ~类名() = 0;</p>
<p>类名::~类名(){}</p>
<p>示例：</p>
<p>class Animal {<br>public:</p>
<pre><code>Animal()
&#123;
    cout &lt;&lt; &quot;Animal 构造函数调用！&quot; &lt;&lt; endl;
&#125;
virtual void Speak() = 0;

//析构函数加上virtual关键字，变成虚析构函数
//virtual ~Animal()
//&#123;
//    cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;
//&#125;


virtual ~Animal() = 0;</code></pre>
<p>};</p>
<p>Animal::~Animal()<br>{<br>    cout &lt;&lt; “Animal 纯虚析构函数调用！” &lt;&lt; endl;<br>}</p>
<p>//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</p>
<p>class Cat : public Animal {<br>public:<br>    Cat(string name)<br>    {<br>        cout &lt;&lt; “Cat构造函数调用！” &lt;&lt; endl;<br>        m_Name = new string(name);<br>    }<br>    virtual void Speak()<br>    {<br>        cout &lt;&lt; *m_Name &lt;&lt;  “小猫在说话!” &lt;&lt; endl;<br>    }<br>    ~Cat()<br>    {<br>        cout &lt;&lt; “Cat析构函数调用!” &lt;&lt; endl;<br>        if (this-&gt;m_Name != NULL) {<br>            delete m_Name;<br>            m_Name = NULL;<br>        }<br>    }</p>
<p>public:<br>    string *m_Name;<br>};</p>
<p>void test01()<br>{<br>    Animal *animal = new Cat(“Tom”);<br>    animal-&gt;Speak();</p>
<pre><code>//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏
//怎么解决？给基类增加一个虚析构函数
//虚析构函数就是用来解决通过父类指针释放子类对象
delete animal;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>总结：</p>
<p>​ 1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p>
<p>​ 2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p>
<p>​ 3. 拥有纯虚析构函数的类也属于抽象类</p>
<p>4.7.6 多态案例三-电脑组装<br>案例描述：</p>
<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>
<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p>
<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>
<p>测试时组装三台不同的电脑进行工作</p>
<p>示例：</p>
<p>#include<iostream><br>using namespace std;</p>
<p>//抽象CPU类<br>class CPU<br>{<br>public:<br>    //抽象的计算函数<br>    virtual void calculate() = 0;<br>};</p>
<p>//抽象显卡类<br>class VideoCard<br>{<br>public:<br>    //抽象的显示函数<br>    virtual void display() = 0;<br>};</p>
<p>//抽象内存条类<br>class Memory<br>{<br>public:<br>    //抽象的存储函数<br>    virtual void storage() = 0;<br>};</p>
<p>//电脑类<br>class Computer<br>{<br>public:<br>    Computer(CPU * cpu, VideoCard * vc, Memory * mem)<br>    {<br>        m_cpu = cpu;<br>        m_vc = vc;<br>        m_mem = mem;<br>    }</p>
<pre><code>//提供工作的函数
void work()
&#123;
    //让零件工作起来，调用接口
    m_cpu-&gt;calculate();

    m_vc-&gt;display();

    m_mem-&gt;storage();
&#125;

//提供析构函数 释放3个电脑零件
~Computer()
&#123;

    //释放CPU零件
    if (m_cpu != NULL)
    &#123;
        delete m_cpu;
        m_cpu = NULL;
    &#125;

    //释放显卡零件
    if (m_vc != NULL)
    &#123;
        delete m_vc;
        m_vc = NULL;
    &#125;

    //释放内存条零件
    if (m_mem != NULL)
    &#123;
        delete m_mem;
        m_mem = NULL;
    &#125;
&#125;</code></pre>
<p>private:</p>
<pre><code>CPU * m_cpu; //CPU的零件指针
VideoCard * m_vc; //显卡零件指针
Memory * m_mem; //内存条零件指针</code></pre>
<p>};</p>
<p>//具体厂商<br>//Intel厂商<br>class IntelCPU :public CPU<br>{<br>public:<br>    virtual void calculate()<br>    {<br>        cout &lt;&lt; “Intel的CPU开始计算了！” &lt;&lt; endl;<br>    }<br>};</p>
<p>class IntelVideoCard :public VideoCard<br>{<br>public:<br>    virtual void display()<br>    {<br>        cout &lt;&lt; “Intel的显卡开始显示了！” &lt;&lt; endl;<br>    }<br>};</p>
<p>class IntelMemory :public Memory<br>{<br>public:<br>    virtual void storage()<br>    {<br>        cout &lt;&lt; “Intel的内存条开始存储了！” &lt;&lt; endl;<br>    }<br>};</p>
<p>//Lenovo厂商<br>class LenovoCPU :public CPU<br>{<br>public:<br>    virtual void calculate()<br>    {<br>        cout &lt;&lt; “Lenovo的CPU开始计算了！” &lt;&lt; endl;<br>    }<br>};</p>
<p>class LenovoVideoCard :public VideoCard<br>{<br>public:<br>    virtual void display()<br>    {<br>        cout &lt;&lt; “Lenovo的显卡开始显示了！” &lt;&lt; endl;<br>    }<br>};</p>
<p>class LenovoMemory :public Memory<br>{<br>public:<br>    virtual void storage()<br>    {<br>        cout &lt;&lt; “Lenovo的内存条开始存储了！” &lt;&lt; endl;<br>    }<br>};</p>
<p>void test01()<br>{<br>    //第一台电脑零件<br>    CPU * intelCpu = new IntelCPU;<br>    VideoCard * intelCard = new IntelVideoCard;<br>    Memory * intelMem = new IntelMemory;</p>
<pre><code>cout &lt;&lt; &quot;第一台电脑开始工作：&quot; &lt;&lt; endl;
//创建第一台电脑
Computer * computer1 = new Computer(intelCpu, intelCard, intelMem);
computer1-&gt;work();
delete computer1;

cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;第二台电脑开始工作：&quot; &lt;&lt; endl;
//第二台电脑组装
Computer * computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;
computer2-&gt;work();
delete computer2;

cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;第三台电脑开始工作：&quot; &lt;&lt; endl;
//第三台电脑组装
Computer * computer3 = new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;
computer3-&gt;work();
delete computer3;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>5 文件操作<br>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>
<p>通过文件可以将数据持久化</p>
<p>C++中对文件操作需要包含头文件 &lt; fstream &gt;</p>
<p>文件类型分为两种：</p>
<p>文本文件 - 文件以文本的ASCII码形式存储在计算机中<br>二进制文件 - 文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂它们<br>操作文件的三大类:</p>
<p>ofstream：写操作<br>ifstream： 读操作<br>fstream ： 读写操作<br>5.1文本文件<br>5.1.1写文件<br>写文件步骤如下：</p>
<p>包含头文件</p>
<p>#include <fstream></p>
<p>创建流对象</p>
<p>ofstream ofs;</p>
<p>打开文件</p>
<p>ofs.open(“文件路径”,打开方式);</p>
<p>写数据</p>
<p>ofs &lt;&lt; “写入的数据”;</p>
<p>关闭文件</p>
<p>ofs.close();</p>
<p>​</p>
<p>文件打开方式：</p>
<p>打开方式    解释<br>ios::in    为读文件而打开文件<br>ios::out    为写文件而打开文件<br>ios::ate    初始位置：文件尾<br>ios::app    追加方式写文件<br>ios::trunc    如果文件存在先删除，再创建<br>ios::binary    二进制方式<br>注意： 文件打开方式可以配合使用，利用|操作符</p>
<p><strong>例如：</strong>用二进制方式写文件 ios::binary | ios:: out</p>
<p>示例：</p>
<p>#include <fstream></p>
<p>void test01()<br>{<br>    ofstream ofs;<br>    ofs.open(“test.txt”, ios::out);</p>
<pre><code>ofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl;
ofs &lt;&lt; &quot;性别：男&quot; &lt;&lt; endl;
ofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl;

ofs.close();</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>总结：</p>
<p>文件操作必须包含头文件 fstream<br>读文件可以利用 ofstream ，或者fstream类<br>打开文件时候需要指定操作文件的路径，以及打开方式<br>利用&lt;&lt;可以向文件中写数据<br>操作完毕，要关闭文件<br>5.1.2读文件<br>读文件与写文件步骤相似，但是读取方式相对于比较多</p>
<p>读文件步骤如下：</p>
<p>包含头文件</p>
<p>#include <fstream></p>
<p>创建流对象</p>
<p>ifstream ifs;</p>
<p>打开文件并判断文件是否打开成功</p>
<p>ifs.open(“文件路径”,打开方式);</p>
<p>读数据</p>
<p>四种方式读取</p>
<p>关闭文件</p>
<p>ifs.close();</p>
<p>示例：</p>
<p>#include <fstream><br>#include <string><br>void test01()<br>{<br>    ifstream ifs;<br>    ifs.open(“test.txt”, ios::in);</p>
<pre><code>if (!ifs.is_open())
&#123;
    cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;
    return;
&#125;

//第一种方式
//char buf[1024] = &#123; 0 &#125;;
//while (ifs &gt;&gt; buf)
//&#123;
//    cout &lt;&lt; buf &lt;&lt; endl;
//&#125;

//第二种
//char buf[1024] = &#123; 0 &#125;;
//while (ifs.getline(buf,sizeof(buf)))
//&#123;
//    cout &lt;&lt; buf &lt;&lt; endl;
//&#125;

//第三种
//string buf;
//while (getline(ifs, buf))
//&#123;
//    cout &lt;&lt; buf &lt;&lt; endl;
//&#125;

char c;
while ((c = ifs.get()) != EOF)
&#123;
    cout &lt;&lt; c;
&#125;

ifs.close();</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>总结：</p>
<p>读文件可以利用 ifstream ，或者fstream类<br>利用is_open函数可以判断文件是否打开成功<br>close 关闭文件<br>5.2 二进制文件<br>以二进制的方式对文件进行读写操作</p>
<p>打开方式要指定为 ios::binary</p>
<p>5.2.1 写文件<br>二进制方式写文件主要利用流对象调用成员函数write</p>
<p>函数原型 ：ostream&amp; write(const char * buffer,int len);</p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p>示例：</p>
<p>#include <fstream><br>#include <string></p>
<p>class Person<br>{<br>public:<br>    char m_Name[64];<br>    int m_Age;<br>};</p>
<p>//二进制文件  写文件<br>void test01()<br>{<br>    //1、包含头文件</p>
<pre><code>//2、创建输出流对象
ofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary);

//3、打开文件
//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);

Person p = &#123;&quot;张三&quot;  , 18&#125;;

//4、写文件
ofs.write((const char *)&amp;p, sizeof(p));

//5、关闭文件
ofs.close();</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>总结：</p>
<p>文件输出流对象 可以通过write函数，以二进制方式写数据<br>5.2.2 读文件<br>二进制方式读文件主要利用流对象调用成员函数read</p>
<p>函数原型：istream&amp; read(char *buffer,int len);</p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p>示例：</p>
<p>#include <fstream><br>#include <string></p>
<p>class Person<br>{<br>public:<br>    char m_Name[64];<br>    int m_Age;<br>};</p>
<p>void test01()<br>{<br>    ifstream ifs(“person.txt”, ios::in | ios::binary);<br>    if (!ifs.is_open())<br>    {<br>        cout &lt;&lt; “文件打开失败” &lt;&lt; endl;<br>    }</p>
<pre><code>Person p;
ifs.read((char *)&amp;p, sizeof(p));

cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>文件输入流对象 可以通过read函数，以二进制方式读数据<br>l void storage()<br>{<br>cout &lt;&lt; “Intel的内存条开始存储了！” &lt;&lt; endl;<br>}<br>};</p>
<p>//Lenovo厂商<br>class LenovoCPU :public CPU<br>{<br>public:<br>virtual void calculate()<br>{<br>cout &lt;&lt; “Lenovo的CPU开始计算了！” &lt;&lt; endl;<br>}<br>};</p>
<p>class LenovoVideoCard :public VideoCard<br>{<br>public:<br>virtual void display()<br>{<br>cout &lt;&lt; “Lenovo的显卡开始显示了！” &lt;&lt; endl;<br>}<br>};</p>
<p>class LenovoMemory :public Memory<br>{<br>public:<br>virtual void storage()<br>{<br>cout &lt;&lt; “Lenovo的内存条开始存储了！” &lt;&lt; endl;<br>}<br>};</p>
<p>void test01()<br>{<br>//第一台电脑零件<br>CPU * intelCpu = new IntelCPU;<br>VideoCard * intelCard = new IntelVideoCard;<br>Memory * intelMem = new IntelMemory;</p>
<p>cout &lt;&lt; “第一台电脑开始工作：” &lt;&lt; endl;<br>//创建第一台电脑<br>Computer * computer1 = new Computer(intelCpu, intelCard, intelMem);<br>computer1-&gt;work();<br>delete computer1;</p>
<p>cout &lt;&lt; “———————–” &lt;&lt; endl;<br>cout &lt;&lt; “第二台电脑开始工作：” &lt;&lt; endl;<br>//第二台电脑组装<br>Computer * computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;<br>computer2-&gt;work();<br>delete computer2;</p>
<p>cout &lt;&lt; “———————–” &lt;&lt; endl;<br>cout &lt;&lt; “第三台电脑开始工作：” &lt;&lt; endl;<br>//第三台电脑组装<br>Computer * computer3 = new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;<br>computer3-&gt;work();<br>delete computer3;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>}</p>
<h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>
<p>通过<strong>文件可以将数据持久化</strong></p>
<p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p>
<p>文件类型分为两种：</p>
<ol>
<li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li>
<li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li>
</ol>
<p>操作文件的三大类:</p>
<ol>
<li>ofstream：写操作</li>
<li>ifstream： 读操作</li>
<li>fstream ： 读写操作</li>
</ol>
<h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p>
<ol>
<li><p>包含头文件   </p>
<p>  #include &lt;fstream&gt;</p>
</li>
<li><p>创建流对象  </p>
<p>ofstream ofs;</p>
</li>
<li><p>打开文件</p>
<p>ofs.open(“文件路径”,打开方式);</p>
</li>
<li><p>写数据</p>
<p>ofs &lt;&lt; “写入的数据”;</p>
</li>
<li><p>关闭文件</p>
<p>ofs.close();</p>
<p>​</p>
</li>
</ol>
<p>文件打开方式：</p>
<table>
<thead>
<tr>
<th>打开方式</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>ios::in</td>
<td>为读文件而打开文件</td>
</tr>
<tr>
<td>ios::out</td>
<td>为写文件而打开文件</td>
</tr>
<tr>
<td>ios::ate</td>
<td>初始位置：文件尾</td>
</tr>
<tr>
<td>ios::app</td>
<td>追加方式写文件</td>
</tr>
<tr>
<td>ios::trunc</td>
<td>如果文件存在先删除，再创建</td>
</tr>
<tr>
<td>ios::binary</td>
<td>二进制方式</td>
</tr>
</tbody></table>
<p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p>
<p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p>
<p><strong>示例：</strong></p>
<p>```C++<br>#include <fstream></p>
<p>void test01()<br>{<br>    ofstream ofs;<br>    ofs.open(“test.txt”, ios::out);</p>
<pre><code>ofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl;
ofs &lt;&lt; &quot;性别：男&quot; &lt;&lt; endl;
ofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl;

ofs.close();</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>总结：</p>
<p>文件操作必须包含头文件 fstream<br>读文件可以利用 ofstream ，或者fstream类<br>打开文件时候需要指定操作文件的路径，以及打开方式<br>利用&lt;&lt;可以向文件中写数据<br>操作完毕，要关闭文件<br>5.1.2读文件<br>读文件与写文件步骤相似，但是读取方式相对于比较多</p>
<p>读文件步骤如下：</p>
<p>包含头文件</p>
<p>#include <fstream></p>
<p>创建流对象</p>
<p>ifstream ifs;</p>
<p>打开文件并判断文件是否打开成功</p>
<p>ifs.open(“文件路径”,打开方式);</p>
<p>读数据</p>
<p>四种方式读取</p>
<p>关闭文件</p>
<p>ifs.close();</p>
<p>示例：</p>
<p>#include <fstream><br>#include <string><br>void test01()<br>{<br>    ifstream ifs;<br>    ifs.open(“test.txt”, ios::in);</p>
<pre><code>if (!ifs.is_open())
&#123;
    cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;
    return;
&#125;

//第一种方式
//char buf[1024] = &#123; 0 &#125;;
//while (ifs &gt;&gt; buf)
//&#123;
//    cout &lt;&lt; buf &lt;&lt; endl;
//&#125;

//第二种
//char buf[1024] = &#123; 0 &#125;;
//while (ifs.getline(buf,sizeof(buf)))
//&#123;
//    cout &lt;&lt; buf &lt;&lt; endl;
//&#125;

//第三种
//string buf;
//while (getline(ifs, buf))
//&#123;
//    cout &lt;&lt; buf &lt;&lt; endl;
//&#125;

char c;
while ((c = ifs.get()) != EOF)
&#123;
    cout &lt;&lt; c;
&#125;

ifs.close();</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>总结：</p>
<p>读文件可以利用 ifstream ，或者fstream类<br>利用is_open函数可以判断文件是否打开成功<br>close 关闭文件<br>5.2 二进制文件<br>以二进制的方式对文件进行读写操作</p>
<p>打开方式要指定为 ios::binary</p>
<p>5.2.1 写文件<br>二进制方式写文件主要利用流对象调用成员函数write</p>
<p>函数原型 ：ostream&amp; write(const char * buffer,int len);</p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p>示例：</p>
<p>#include <fstream><br>#include <string></p>
<p>class Person<br>{<br>public:<br>    char m_Name[64];<br>    int m_Age;<br>};</p>
<p>//二进制文件  写文件<br>void test01()<br>{<br>    //1、包含头文件</p>
<pre><code>//2、创建输出流对象
ofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary);

//3、打开文件
//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);

Person p = &#123;&quot;张三&quot;  , 18&#125;;

//4、写文件
ofs.write((const char *)&amp;p, sizeof(p));

//5、关闭文件
ofs.close();</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>总结：</p>
<p>文件输出流对象 可以通过write函数，以二进制方式写数据<br>5.2.2 读文件<br>二进制方式读文件主要利用流对象调用成员函数read</p>
<p>函数原型：istream&amp; read(char *buffer,int len);</p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p>示例：</p>
<p>#include <fstream><br>#include <string></p>
<p>class Person<br>{<br>public:<br>    char m_Name[64];<br>    int m_Age;<br>};</p>
<p>void test01()<br>{<br>    ifstream ifs(“person.txt”, ios::in | ios::binary);<br>    if (!ifs.is_open())<br>    {<br>        cout &lt;&lt; “文件打开失败” &lt;&lt; endl;<br>    }</p>
<pre><code>Person p;
ifs.read((char *)&amp;p, sizeof(p));

cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>文件输入流对象 可以通过read函数，以二进制方式读数据</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
  </entry>
  <entry>
    <title>c++学习代码总结（提高篇）</title>
    <url>/2020/11/28/c++%E5%AD%A6%E4%B9%A0%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93%EF%BC%88%E6%8F%90%E9%AB%98%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<p>C++提高编程<br>本阶段主要针对C++泛型编程和STL技术做详细讲解，探讨C++更深层的使用</p>
<hr>
<a id="more"></a>

<p>1 模板<br>1.1 模板的概念<br>模板就是建立通用的模具，大大提高复用性</p>
<p>模板的特点：</p>
<p>模板不可以直接使用，它只是一个框架<br>模板的通用并不是万能的<br>1.2 函数模板<br>C++另一种编程思想称为 泛型编程 ，主要利用的技术就是模板</p>
<p>C++提供两种模板机制:函数模板和类模板</p>
<p>1.2.1 函数模板语法<br>函数模板作用：</p>
<p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个虚拟的类型来代表。</p>
<p>语法：</p>
<p>template<typename T><br>函数声明或定义<br>1<br>2<br>解释：</p>
<p>template — 声明创建模板</p>
<p>typename — 表面其后面的符号是一种数据类型，可以用class代替</p>
<p>T — 通用的数据类型，名称可以替换，通常为大写字母</p>
<p>示例：</p>
<p>//交换整型函数<br>void swapInt(int&amp; a, int&amp; b) {<br>    int temp = a;<br>    a = b;<br>    b = temp;<br>}</p>
<p>//交换浮点型函数<br>void swapDouble(double&amp; a, double&amp; b) {<br>    double temp = a;<br>    a = b;<br>    b = temp;<br>}</p>
<p>//利用模板提供通用的交换函数<br>template<typename T><br>void mySwap(T&amp; a, T&amp; b)<br>{<br>    T temp = a;<br>    a = b;<br>    b = temp;<br>}</p>
<p>void test01()<br>{<br>    int a = 10;<br>    int b = 20;</p>
<pre><code>//swapInt(a, b);

//利用模板实现交换
//1、自动类型推导
mySwap(a, b);

//2、显示指定类型
mySwap&lt;int&gt;(a, b);

cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>总结：</p>
<p>函数模板利用关键字 template<br>使用函数模板有两种方式：自动类型推导、显示指定类型<br>模板的目的是为了提高复用性，将类型参数化<br>1.2.2 函数模板注意事项<br>注意事项：</p>
<p>自动类型推导，必须推导出一致的数据类型T,才可以使用</p>
<p>模板必须要确定出T的数据类型，才可以使用</p>
<p>示例：</p>
<p>//利用模板提供通用的交换函数<br>template<class T><br>void mySwap(T&amp; a, T&amp; b)<br>{<br>    T temp = a;<br>    a = b;<br>    b = temp;<br>}</p>
<p>// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用<br>void test01()<br>{<br>    int a = 10;<br>    int b = 20;<br>    char c = ‘c’;</p>
<pre><code>mySwap(a, b); // 正确，可以推导出一致的T
//mySwap(a, c); // 错误，推导不出一致的T类型</code></pre>
<p>}</p>
<p>// 2、模板必须要确定出T的数据类型，才可以使用<br>template<class T><br>void func()<br>{<br>    cout &lt;&lt; “func 调用” &lt;&lt; endl;<br>}</p>
<p>void test02()<br>{<br>    //func(); //错误，模板不能独立使用，必须确定出T的类型<br>    func<int>(); //利用显示指定类型的方式，给T一个类型，才可以使用该模板<br>}</p>
<p>int main() {</p>
<pre><code>test01();
test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>总结：</p>
<p>使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型<br>1.2.3 函数模板案例<br>案例描述：</p>
<p>利用函数模板封装一个排序的函数，可以对不同数据类型数组进行排序<br>排序规则从大到小，排序算法为选择排序<br>分别利用char数组和int数组进行测试<br>示例：</p>
<p>//交换的函数模板<br>template<typename T><br>void mySwap(T &amp;a, T&amp;b)<br>{<br>    T temp = a;<br>    a = b;<br>    b = temp;<br>}</p>
<p>template<class T> // 也可以替换成typename<br>//利用选择排序，进行对数组从大到小的排序<br>void mySort(T arr[], int len)<br>{<br>    for (int i = 0; i &lt; len; i++)<br>    {<br>        int max = i; //最大数的下标<br>        for (int j = i + 1; j &lt; len; j++)<br>        {<br>            if (arr[max] &lt; arr[j])<br>            {<br>                max = j;<br>            }<br>        }<br>        if (max != i) //如果最大数的下标不是i，交换两者<br>        {<br>            mySwap(arr[max], arr[i]);<br>        }<br>    }<br>}<br>template<typename T><br>void printArray(T arr[], int len) {</p>
<pre><code>for (int i = 0; i &lt; len; i++) &#123;
    cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}<br>void test01()<br>{<br>    //测试char数组<br>    char charArr[] = “bdcfeagh”;<br>    int num = sizeof(charArr) / sizeof(char);<br>    mySort(charArr, num);<br>    printArray(charArr, num);<br>}</p>
<p>void test02()<br>{<br>    //测试int数组<br>    int intArr[] = { 7, 5, 8, 1, 3, 9, 2, 4, 6 };<br>    int num = sizeof(intArr) / sizeof(int);<br>    mySort(intArr, num);<br>    printArray(intArr, num);<br>}</p>
<p>int main() {</p>
<pre><code>test01();
test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>总结：模板可以提高代码复用，需要熟练掌握</p>
<p>1.2.4 普通函数与函数模板的区别<br>普通函数与函数模板区别：</p>
<p>普通函数调用时可以发生自动类型转换（隐式类型转换）<br>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换<br>如果利用显示指定类型的方式，可以发生隐式类型转换<br>示例：</p>
<p>//普通函数<br>int myAdd01(int a, int b)<br>{<br>    return a + b;<br>}</p>
<p>//函数模板<br>template<class T><br>T myAdd02(T a, T b)<br>{<br>    return a + b;<br>}</p>
<p>//使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换<br>void test01()<br>{<br>    int a = 10;<br>    int b = 20;<br>    char c = ‘c’;</p>
<pre><code>cout &lt;&lt; myAdd01(a, c) &lt;&lt; endl; //正确，将char类型的&#39;c&#39;隐式转换为int类型  &#39;c&#39; 对应 ASCII码 99

//myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换

myAdd02&lt;int&gt;(a, c); //正确，如果用显示指定类型，可以发生隐式类型转换</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T</p>
<p>1.2.5 普通函数与函数模板的调用规则<br>调用规则如下：</p>
<p>如果函数模板和普通函数都可以实现，优先调用普通函数<br>可以通过空模板参数列表来强制调用函数模板<br>函数模板也可以发生重载<br>如果函数模板可以产生更好的匹配,优先调用函数模板<br>示例：</p>
<p>//普通函数与函数模板调用规则<br>void myPrint(int a, int b)<br>{<br>    cout &lt;&lt; “调用的普通函数” &lt;&lt; endl;<br>}</p>
<p>template<typename T><br>void myPrint(T a, T b)<br>{<br>    cout &lt;&lt; “调用的模板” &lt;&lt; endl;<br>}</p>
<p>template<typename T><br>void myPrint(T a, T b, T c)<br>{<br>    cout &lt;&lt; “调用重载的模板” &lt;&lt; endl;<br>}</p>
<p>void test01()<br>{<br>    //1、如果函数模板和普通函数都可以实现，优先调用普通函数<br>    // 注意 如果告诉编译器  普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到<br>    int a = 10;<br>    int b = 20;<br>    myPrint(a, b); //调用普通函数</p>
<pre><code>//2、可以通过空模板参数列表来强制调用函数模板
myPrint&lt;&gt;(a, b); //调用函数模板

//3、函数模板也可以发生重载
int c = 30;
myPrint(a, b, c); //调用重载的函数模板

//4、 如果函数模板可以产生更好的匹配,优先调用函数模板
char c1 = &#39;a&#39;;
char c2 = &#39;b&#39;;
myPrint(c1, c2); //调用函数模板</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性</p>
<p>1.2.6 模板的局限性<br>局限性：</p>
<p>模板的通用性并不是万能的<br>例如：</p>
<pre><code>template&lt;class T&gt;
void f(T a, T b)
&#123; 
    a = b;
&#125;</code></pre>
<p>1<br>2<br>3<br>4<br>5<br>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了</p>
<p>再例如：</p>
<pre><code>template&lt;class T&gt;
void f(T a, T b)
&#123; 
    if(a &gt; b) &#123; ... &#125;
&#125;</code></pre>
<p>1<br>2<br>3<br>4<br>5<br>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行</p>
<p>因此C++为了解决这种问题，提供模板的重载，可以为这些特定的类型提供具体化的模板</p>
<p>示例：</p>
<p>#include<iostream><br>using namespace std;</p>
<p>#include <string></p>
<p>class Person<br>{<br>public:<br>    Person(string name, int age)<br>    {<br>        this-&gt;m_Name = name;<br>        this-&gt;m_Age = age;<br>    }<br>    string m_Name;<br>    int m_Age;<br>};</p>
<p>//普通函数模板<br>template<class T><br>bool myCompare(T&amp; a, T&amp; b)<br>{<br>    if (a == b)<br>    {<br>        return true;<br>    }<br>    else<br>    {<br>        return false;<br>    }<br>}</p>
<p>//具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型<br>//具体化优先于常规模板<br>template&lt;&gt; bool myCompare(Person &amp;p1, Person &amp;p2)<br>{<br>    if ( p1.m_Name  == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age)<br>    {<br>        return true;<br>    }<br>    else<br>    {<br>        return false;<br>    }<br>}</p>
<p>void test01()<br>{<br>    int a = 10;<br>    int b = 20;<br>    //内置数据类型可以直接使用通用的函数模板<br>    bool ret = myCompare(a, b);<br>    if (ret)<br>    {<br>        cout &lt;&lt; “a == b “ &lt;&lt; endl;<br>    }<br>    else<br>    {<br>        cout &lt;&lt; “a != b “ &lt;&lt; endl;<br>    }<br>}</p>
<p>void test02()<br>{<br>    Person p1(“Tom”, 10);<br>    Person p2(“Tom”, 10);<br>    //自定义数据类型，不会调用普通的函数模板<br>    //可以创建具体化的Person数据类型的模板，用于特殊处理这个类型<br>    bool ret = myCompare(p1, p2);<br>    if (ret)<br>    {<br>        cout &lt;&lt; “p1 == p2 “ &lt;&lt; endl;<br>    }<br>    else<br>    {<br>        cout &lt;&lt; “p1 != p2 “ &lt;&lt; endl;<br>    }<br>}</p>
<p>int main() {</p>
<pre><code>test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>总结：</p>
<p>利用具体化的模板，可以解决自定义类型的通用化<br>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板<br>1.3 类模板<br>1.3.1 类模板语法<br>类模板作用：</p>
<p>建立一个通用类，类中的成员 数据类型可以不具体制定，用一个虚拟的类型来代表。<br>语法：</p>
<p>template<typename T><br>类<br>1<br>2<br>解释：</p>
<p>template — 声明创建模板</p>
<p>typename — 表面其后面的符号是一种数据类型，可以用class代替</p>
<p>T — 通用的数据类型，名称可以替换，通常为大写字母</p>
<p>示例：</p>
<p>#include <string><br>//类模板<br>template&lt;class NameType, class AgeType&gt;<br>class Person<br>{<br>public:<br>    Person(NameType name, AgeType age)<br>    {<br>        this-&gt;mName = name;<br>        this-&gt;mAge = age;<br>    }<br>    void showPerson()<br>    {<br>        cout &lt;&lt; “name: “ &lt;&lt; this-&gt;mName &lt;&lt; “ age: “ &lt;&lt; this-&gt;mAge &lt;&lt; endl;<br>    }<br>public:<br>    NameType mName;<br>    AgeType mAge;<br>};</p>
<p>void test01()<br>{<br>    // 指定NameType 为string类型，AgeType 为 int类型<br>    Person&lt;string, int&gt;P1(“孙悟空”, 999);<br>    P1.showPerson();<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板</p>
<p>1.3.2 类模板与函数模板区别<br>类模板与函数模板区别主要有两点：</p>
<p>类模板没有自动类型推导的使用方式<br>类模板在模板参数列表中可以有默认参数<br>示例：</p>
<p>#include <string><br>//类模板<br>template&lt;class NameType, class AgeType = int&gt;<br>class Person<br>{<br>public:<br>    Person(NameType name, AgeType age)<br>    {<br>        this-&gt;mName = name;<br>        this-&gt;mAge = age;<br>    }<br>    void showPerson()<br>    {<br>        cout &lt;&lt; “name: “ &lt;&lt; this-&gt;mName &lt;&lt; “ age: “ &lt;&lt; this-&gt;mAge &lt;&lt; endl;<br>    }<br>public:<br>    NameType mName;<br>    AgeType mAge;<br>};</p>
<p>//1、类模板没有自动类型推导的使用方式<br>void test01()<br>{<br>    // Person p(“孙悟空”, 1000); // 错误 类模板使用时候，不可以用自动类型推导<br>    Person &lt;string ,int&gt;p(“孙悟空”, 1000); //必须使用显示指定类型的方式，使用类模板<br>    p.showPerson();<br>}</p>
<p>//2、类模板在模板参数列表中可以有默认参数<br>void test02()<br>{<br>    Person <string> p(“猪八戒”, 999); //类模板中的模板参数列表 可以指定默认参数<br>    p.showPerson();<br>}</p>
<p>int main() {</p>
<pre><code>test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>总结：</p>
<p>类模板使用只能用显示指定类型方式<br>类模板中的模板参数列表可以有默认参数<br>1.3.3 类模板中成员函数创建时机<br>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p>
<p>普通类中的成员函数一开始就可以创建<br>类模板中的成员函数在调用时才创建<br>示例：</p>
<p>class Person1<br>{<br>public:<br>    void showPerson1()<br>    {<br>        cout &lt;&lt; “Person1 show” &lt;&lt; endl;<br>    }<br>};</p>
<p>class Person2<br>{<br>public:<br>    void showPerson2()<br>    {<br>        cout &lt;&lt; “Person2 show” &lt;&lt; endl;<br>    }<br>};</p>
<p>template<class T><br>class MyClass<br>{<br>public:<br>    T obj;</p>
<pre><code>//类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成

void fun1() &#123; obj.showPerson1(); &#125;
void fun2() &#123; obj.showPerson2(); &#125;</code></pre>
<p>};</p>
<p>void test01()<br>{<br>    MyClass<Person1> m;</p>
<pre><code>m.fun1();

//m.fun2();//编译会出错，说明函数调用才会去创建成员函数</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建</p>
<p>1.3.4 类模板对象做函数参数<br>学习目标：</p>
<p>类模板实例化出的对象，向函数传参的方式<br>一共有三种传入方式：</p>
<p>指定传入的类型 — 直接显示对象的数据类型<br>参数模板化 — 将对象中的参数变为模板进行传递<br>整个类模板化 — 将这个对象类型 模板化进行传递<br>示例：</p>
<p>#include <string><br>//类模板<br>template&lt;class NameType, class AgeType = int&gt;<br>class Person<br>{<br>public:<br>    Person(NameType name, AgeType age)<br>    {<br>        this-&gt;mName = name;<br>        this-&gt;mAge = age;<br>    }<br>    void showPerson()<br>    {<br>        cout &lt;&lt; “name: “ &lt;&lt; this-&gt;mName &lt;&lt; “ age: “ &lt;&lt; this-&gt;mAge &lt;&lt; endl;<br>    }<br>public:<br>    NameType mName;<br>    AgeType mAge;<br>};</p>
<p>//1、指定传入的类型<br>void printPerson1(Person&lt;string, int&gt; &amp;p)<br>{<br>    p.showPerson();<br>}<br>void test01()<br>{<br>    Person &lt;string, int &gt;p(“孙悟空”, 100);<br>    printPerson1(p);<br>}</p>
<p>//2、参数模板化<br>template &lt;class T1, class T2&gt;<br>void printPerson2(Person&lt;T1, T2&gt;&amp;p)<br>{<br>    p.showPerson();<br>    cout &lt;&lt; “T1的类型为： “ &lt;&lt; typeid(T1).name() &lt;&lt; endl;<br>    cout &lt;&lt; “T2的类型为： “ &lt;&lt; typeid(T2).name() &lt;&lt; endl;<br>}<br>void test02()<br>{<br>    Person &lt;string, int &gt;p(“猪八戒”, 90);<br>    printPerson2(p);<br>}</p>
<p>//3、整个类模板化<br>template<class T><br>void printPerson3(T &amp; p)<br>{<br>    cout &lt;&lt; “T的类型为： “ &lt;&lt; typeid(T).name() &lt;&lt; endl;<br>    p.showPerson();</p>
<p>}<br>void test03()<br>{<br>    Person &lt;string, int &gt;p(“唐僧”, 30);<br>    printPerson3(p);<br>}</p>
<p>int main() {</p>
<pre><code>test01();
test02();
test03();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>总结：</p>
<p>通过类模板创建的对象，可以有三种方式向函数中进行传参<br>使用比较广泛是第一种：指定传入的类型<br>1.3.5 类模板与继承<br>当类模板碰到继承时，需要注意一下几点：</p>
<p>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型<br>如果不指定，编译器无法给子类分配内存<br>如果想灵活指定出父类中T的类型，子类也需变为类模板<br>示例：</p>
<p>template<class T><br>class Base<br>{<br>    T m;<br>};</p>
<p>//class Son:public Base  //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承<br>class Son :public Base<int> //必须指定一个类型<br>{<br>};<br>void test01()<br>{<br>    Son c;<br>}</p>
<p>//类模板继承类模板 ,可以用T2指定父类中的T类型<br>template&lt;class T1, class T2&gt;<br>class Son2 :public Base<T2><br>{<br>public:<br>    Son2()<br>    {<br>        cout &lt;&lt; typeid(T1).name() &lt;&lt; endl;<br>        cout &lt;&lt; typeid(T2).name() &lt;&lt; endl;<br>    }<br>};</p>
<p>void test02()<br>{<br>    Son2&lt;int, char&gt; child1;<br>}</p>
<p>int main() {</p>
<pre><code>test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>总结：如果父类是类模板，子类需要指定出父类中T的数据类型</p>
<p>1.3.6 类模板成员函数类外实现<br>学习目标：能够掌握类模板中的成员函数类外实现</p>
<p>示例：</p>
<p>#include <string></p>
<p>//类模板中成员函数类外实现<br>template&lt;class T1, class T2&gt;<br>class Person {<br>public:<br>    //成员函数类内声明<br>    Person(T1 name, T2 age);<br>    void showPerson();</p>
<p>public:<br>    T1 m_Name;<br>    T2 m_Age;<br>};</p>
<p>//构造函数 类外实现<br>template&lt;class T1, class T2&gt;<br>Person&lt;T1, T2&gt;::Person(T1 name, T2 age) {<br>    this-&gt;m_Name = name;<br>    this-&gt;m_Age = age;<br>}</p>
<p>//成员函数 类外实现<br>template&lt;class T1, class T2&gt;<br>void Person&lt;T1, T2&gt;::showPerson() {<br>    cout &lt;&lt; “姓名: “ &lt;&lt; this-&gt;m_Name &lt;&lt; “ 年龄:” &lt;&lt; this-&gt;m_Age &lt;&lt; endl;<br>}</p>
<p>void test01()<br>{<br>    Person&lt;string, int&gt; p(“Tom”, 20);<br>    p.showPerson();<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p>
<p>1.3.7 类模板分文件编写<br>学习目标：</p>
<p>掌握类模板成员函数分文件编写产生的问题以及解决方式<br>问题：</p>
<p>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到<br>解决：</p>
<p>解决方式1：直接包含.cpp源文件<br>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制<br>示例：</p>
<p>person.hpp中代码：</p>
<p>#pragma once<br>#include <iostream><br>using namespace std;<br>#include <string></p>
<p>template&lt;class T1, class T2&gt;<br>class Person {<br>public:<br>    Person(T1 name, T2 age);<br>    void showPerson();<br>public:<br>    T1 m_Name;<br>    T2 m_Age;<br>};</p>
<p>//构造函数 类外实现<br>template&lt;class T1, class T2&gt;<br>Person&lt;T1, T2&gt;::Person(T1 name, T2 age) {<br>    this-&gt;m_Name = name;<br>    this-&gt;m_Age = age;<br>}</p>
<p>//成员函数 类外实现<br>template&lt;class T1, class T2&gt;<br>void Person&lt;T1, T2&gt;::showPerson() {<br>    cout &lt;&lt; “姓名: “ &lt;&lt; this-&gt;m_Name &lt;&lt; “ 年龄:” &lt;&lt; this-&gt;m_Age &lt;&lt; endl;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>类模板分文件编写.cpp中代码</p>
<p>#include<iostream><br>using namespace std;</p>
<p>//#include “person.h”<br>#include “person.cpp” //解决方式1，包含cpp源文件</p>
<p>//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp<br>#include “person.hpp”<br>void test01()<br>{<br>    Person&lt;string, int&gt; p(“Tom”, 10);<br>    p.showPerson();<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p>
<p>1.3.8 类模板与友元<br>学习目标：</p>
<p>掌握类模板配合友元函数的类内和类外实现<br>全局函数类内实现 - 直接在类内声明友元即可</p>
<p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p>
<p>示例：</p>
<p>#include <string></p>
<p>//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元<br>template&lt;class T1, class T2&gt; class Person;</p>
<p>//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到<br>//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); </p>
<p>template&lt;class T1, class T2&gt;<br>void printPerson2(Person&lt;T1, T2&gt; &amp; p)<br>{<br>    cout &lt;&lt; “类外实现 —- 姓名： “ &lt;&lt; p.m_Name &lt;&lt; “ 年龄：” &lt;&lt; p.m_Age &lt;&lt; endl;<br>}</p>
<p>template&lt;class T1, class T2&gt;<br>class Person<br>{<br>    //1、全局函数配合友元   类内实现<br>    friend void printPerson(Person&lt;T1, T2&gt; &amp; p)<br>    {<br>        cout &lt;&lt; “姓名： “ &lt;&lt; p.m_Name &lt;&lt; “ 年龄：” &lt;&lt; p.m_Age &lt;&lt; endl;<br>    }</p>
<pre><code>//全局函数配合友元  类外实现
friend void printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);</code></pre>
<p>public:</p>
<pre><code>Person(T1 name, T2 age)
&#123;
    this-&gt;m_Name = name;
    this-&gt;m_Age = age;
&#125;</code></pre>
<p>private:<br>    T1 m_Name;<br>    T2 m_Age;</p>
<p>};</p>
<p>//1、全局函数在类内实现<br>void test01()<br>{<br>    Person &lt;string, int &gt;p(“Tom”, 20);<br>    printPerson(p);<br>}</p>
<p>//2、全局函数在类外实现<br>void test02()<br>{<br>    Person &lt;string, int &gt;p(“Jerry”, 30);<br>    printPerson2(p);<br>}</p>
<p>int main() {</p>
<pre><code>//test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p>
<p>1.3.9 类模板案例<br>案例描述: 实现一个通用的数组类，要求如下：</p>
<p>可以对内置数据类型以及自定义数据类型的数据进行存储<br>将数组中的数据存储到堆区<br>构造函数中可以传入数组的容量<br>提供对应的拷贝构造函数以及operator=防止浅拷贝问题<br>提供尾插法和尾删法对数组中的数据进行增加和删除<br>可以通过下标的方式访问数组中的元素<br>可以获取数组中当前元素个数和数组的容量<br>示例：</p>
<p>myArray.hpp中代码</p>
<p>#pragma once<br>#include <iostream><br>using namespace std;</p>
<p>template<class T><br>class MyArray<br>{<br>public:</p>
<pre><code>//构造函数
MyArray(int capacity)
&#123;
    this-&gt;m_Capacity = capacity;
    this-&gt;m_Size = 0;
    pAddress = new T[this-&gt;m_Capacity];
&#125;

//拷贝构造
MyArray(const MyArray &amp; arr)
&#123;
    this-&gt;m_Capacity = arr.m_Capacity;
    this-&gt;m_Size = arr.m_Size;
    this-&gt;pAddress = new T[this-&gt;m_Capacity];
    for (int i = 0; i &lt; this-&gt;m_Size; i++)
    &#123;
        //如果T为对象，而且还包含指针，必须需要重载 = 操作符，因为这个等号不是 构造 而是赋值，
        // 普通类型可以直接= 但是指针类型需要深拷贝
        this-&gt;pAddress[i] = arr.pAddress[i];
    &#125;
&#125;

//重载= 操作符  防止浅拷贝问题
MyArray&amp; operator=(const MyArray&amp; myarray) &#123;

    if (this-&gt;pAddress != NULL) &#123;
        delete[] this-&gt;pAddress;
        this-&gt;m_Capacity = 0;
        this-&gt;m_Size = 0;
    &#125;

    this-&gt;m_Capacity = myarray.m_Capacity;
    this-&gt;m_Size = myarray.m_Size;
    this-&gt;pAddress = new T[this-&gt;m_Capacity];
    for (int i = 0; i &lt; this-&gt;m_Size; i++) &#123;
        this-&gt;pAddress[i] = myarray[i];
    &#125;
    return *this;
&#125;

//重载[] 操作符  arr[0]
T&amp; operator [](int index)
&#123;
    return this-&gt;pAddress[index]; //不考虑越界，用户自己去处理
&#125;

//尾插法
void Push_back(const T &amp; val)
&#123;
    if (this-&gt;m_Capacity == this-&gt;m_Size)
    &#123;
        return;
    &#125;
    this-&gt;pAddress[this-&gt;m_Size] = val;
    this-&gt;m_Size++;
&#125;

//尾删法
void Pop_back()
&#123;
    if (this-&gt;m_Size == 0)
    &#123;
        return;
    &#125;
    this-&gt;m_Size--;
&#125;

//获取数组容量
int getCapacity()
&#123;
    return this-&gt;m_Capacity;
&#125;

//获取数组大小
int    getSize()
&#123;
    return this-&gt;m_Size;
&#125;


//析构
~MyArray()
&#123;
    if (this-&gt;pAddress != NULL)
    &#123;
        delete[] this-&gt;pAddress;
        this-&gt;pAddress = NULL;
        this-&gt;m_Capacity = 0;
        this-&gt;m_Size = 0;
    &#125;
&#125;</code></pre>
<p>private:<br>    T * pAddress;  //指向一个堆空间，这个空间存储真正的数据<br>    int m_Capacity; //容量<br>    int m_Size;   // 大小<br>};<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>类模板案例—数组类封装.cpp中</p>
<p>#include “myArray.hpp”<br>#include <string></p>
<p>void printIntArray(MyArray<int>&amp; arr) {<br>    for (int i = 0; i &lt; arr.getSize(); i++) {<br>        cout &lt;&lt; arr[i] &lt;&lt; “ “;<br>    }<br>    cout &lt;&lt; endl;<br>}</p>
<p>//测试内置数据类型<br>void test01()<br>{<br>    MyArray<int> array1(10);<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        array1.Push_back(i);<br>    }<br>    cout &lt;&lt; “array1打印输出：” &lt;&lt; endl;<br>    printIntArray(array1);<br>    cout &lt;&lt; “array1的大小：” &lt;&lt; array1.getSize() &lt;&lt; endl;<br>    cout &lt;&lt; “array1的容量：” &lt;&lt; array1.getCapacity() &lt;&lt; endl;</p>
<pre><code>cout &lt;&lt; &quot;--------------------------&quot; &lt;&lt; endl;

MyArray&lt;int&gt; array2(array1);
array2.Pop_back();
cout &lt;&lt; &quot;array2打印输出：&quot; &lt;&lt; endl;
printIntArray(array2);
cout &lt;&lt; &quot;array2的大小：&quot; &lt;&lt; array2.getSize() &lt;&lt; endl;
cout &lt;&lt; &quot;array2的容量：&quot; &lt;&lt; array2.getCapacity() &lt;&lt; endl;</code></pre>
<p>}</p>
<p>//测试自定义数据类型<br>class Person {<br>public:<br>    Person() {}<br>        Person(string name, int age) {<br>        this-&gt;m_Name = name;<br>        this-&gt;m_Age = age;<br>    }<br>public:<br>    string m_Name;<br>    int m_Age;<br>};</p>
<p>void printPersonArray(MyArray<Person>&amp; personArr)<br>{<br>    for (int i = 0; i &lt; personArr.getSize(); i++) {<br>        cout &lt;&lt; “姓名：” &lt;&lt; personArr[i].m_Name &lt;&lt; “ 年龄： “ &lt;&lt; personArr[i].m_Age &lt;&lt; endl;<br>    }</p>
<p>}</p>
<p>void test02()<br>{<br>    //创建数组<br>    MyArray<Person> pArray(10);<br>    Person p1(“孙悟空”, 30);<br>    Person p2(“韩信”, 20);<br>    Person p3(“妲己”, 18);<br>    Person p4(“王昭君”, 15);<br>    Person p5(“赵云”, 24);</p>
<pre><code>//插入数据
pArray.Push_back(p1);
pArray.Push_back(p2);
pArray.Push_back(p3);
pArray.Push_back(p4);
pArray.Push_back(p5);

printPersonArray(pArray);

cout &lt;&lt; &quot;pArray的大小：&quot; &lt;&lt; pArray.getSize() &lt;&lt; endl;
cout &lt;&lt; &quot;pArray的容量：&quot; &lt;&lt; pArray.getCapacity() &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>//test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>总结：</p>
<p>能够利用所学知识点实现通用的数组</p>
<p>2 STL初识<br>2.1 STL的诞生<br>长久以来，软件界一直希望建立一种可重复利用的东西</p>
<p>C++的面向对象和泛型编程思想，目的就是复用性的提升</p>
<p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p>
<p>为了建立数据结构和算法的一套标准,诞生了STL</p>
<p>​</p>
<p>2.2 STL基本概念<br>STL(Standard Template Library,标准模板库)<br>STL 从广义上分为: 容器(container) 算法(algorithm) 迭代器(iterator)<br>容器和算法之间通过迭代器进行无缝连接。<br>STL 几乎所有的代码都采用了模板类或者模板函数<br>2.3 STL六大组件<br>STL大体分为六大组件，分别是:容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</p>
<p>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。<br>算法：各种常用的算法，如sort、find、copy、for_each等<br>迭代器：扮演了容器与算法之间的胶合剂。<br>仿函数：行为类似函数，可作为算法的某种策略。<br>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。<br>空间配置器：负责空间的配置与管理。<br>2.4 STL中容器、算法、迭代器<br><strong>容器：</strong>置物之所也</p>
<p>STL容器就是将运用最广泛的一些数据结构实现出来</p>
<p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p>
<p>这些容器分为序列式容器和关联式容器两种:</p>
<p>​ 序列式容器:强调值的排序，序列式容器中的每个元素均有固定的位置。<br>关联式容器:二叉树结构，各元素之间没有严格的物理上的顺序关系</p>
<p><strong>算法：</strong>问题之解法也</p>
<p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p>
<p>算法分为:质变算法和非质变算法。</p>
<p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p>
<p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p>
<p><strong>迭代器：</strong>容器和算法之间粘合剂</p>
<p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p>
<p>每个容器都有自己专属的迭代器</p>
<p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p>
<p>迭代器种类：</p>
<p>种类    功能    支持运算<br>输入迭代器    对数据的只读访问    只读，支持++、==、！=<br>输出迭代器    对数据的只写访问    只写，支持++<br>前向迭代器    读写操作，并能向前推进迭代器    读写，支持++、==、！=<br>双向迭代器    读写操作，并能向前和向后操作    读写，支持++、–，<br>随机访问迭代器    读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器    读写，支持++、–、[n]、-n、&lt;、&lt;=、&gt;、&gt;=<br>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p>
<p>2.5 容器算法迭代器初识<br>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力</p>
<p>STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p>
<p>2.5.1 vector存放内置数据类型<br>容器： vector</p>
<p>算法： for_each</p>
<p>迭代器： vector<int>::iterator</p>
<p>示例：</p>
<p>#include <vector><br>#include <algorithm></p>
<p>void MyPrint(int val)<br>{<br>    cout &lt;&lt; val &lt;&lt; endl;<br>}</p>
<p>void test01() {</p>
<pre><code>//创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型
vector&lt;int&gt; v;
//向容器中放数据
v.push_back(10);
v.push_back(20);
v.push_back(30);
v.push_back(40);

//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素
//v.begin()返回迭代器，这个迭代器指向容器中第一个数据
//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置
//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型

vector&lt;int&gt;::iterator pBegin = v.begin();
vector&lt;int&gt;::iterator pEnd = v.end();

//第一种遍历方式：
while (pBegin != pEnd) &#123;
    cout &lt;&lt; *pBegin &lt;&lt; endl;
    pBegin++;
&#125;


//第二种遍历方式：
for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; endl;
&#125;
cout &lt;&lt; endl;

//第三种遍历方式：
//使用STL提供标准遍历算法  头文件 algorithm
for_each(v.begin(), v.end(), MyPrint);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>2.5.2 Vector存放自定义数据类型<br>学习目标：vector中存放自定义数据类型，并打印输出</p>
<p>示例：</p>
<p>#include <vector><br>#include <string></p>
<p>//自定义数据类型<br>class Person {<br>public:<br>    Person(string name, int age) {<br>        mName = name;<br>        mAge = age;<br>    }<br>public:<br>    string mName;<br>    int mAge;<br>};<br>//存放对象<br>void test01() {</p>
<pre><code>vector&lt;Person&gt; v;

//创建数据
Person p1(&quot;aaa&quot;, 10);
Person p2(&quot;bbb&quot;, 20);
Person p3(&quot;ccc&quot;, 30);
Person p4(&quot;ddd&quot;, 40);
Person p5(&quot;eee&quot;, 50);

v.push_back(p1);
v.push_back(p2);
v.push_back(p3);
v.push_back(p4);
v.push_back(p5);

for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;
    cout &lt;&lt; &quot;Name:&quot; &lt;&lt; (*it).mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it).mAge &lt;&lt; endl;

&#125;</code></pre>
<p>}</p>
<p>//放对象指针<br>void test02() {</p>
<pre><code>vector&lt;Person*&gt; v;

//创建数据
Person p1(&quot;aaa&quot;, 10);
Person p2(&quot;bbb&quot;, 20);
Person p3(&quot;ccc&quot;, 30);
Person p4(&quot;ddd&quot;, 40);
Person p5(&quot;eee&quot;, 50);

v.push_back(&amp;p1);
v.push_back(&amp;p2);
v.push_back(&amp;p3);
v.push_back(&amp;p4);
v.push_back(&amp;p5);

for (vector&lt;Person*&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;
    Person * p = (*it);
    cout &lt;&lt; &quot;Name:&quot; &lt;&lt; p-&gt;mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it)-&gt;mAge &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>2.5.3 Vector容器嵌套容器<br>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p>
<p>示例：</p>
<p>#include <vector></p>
<p>//容器嵌套容器<br>void test01() {</p>
<pre><code>vector&lt; vector&lt;int&gt; &gt;  v;

vector&lt;int&gt; v1;
vector&lt;int&gt; v2;
vector&lt;int&gt; v3;
vector&lt;int&gt; v4;

for (int i = 0; i &lt; 4; i++) &#123;
    v1.push_back(i + 1);
    v2.push_back(i + 2);
    v3.push_back(i + 3);
    v4.push_back(i + 4);
&#125;

//将容器元素插入到vector v中
v.push_back(v1);
v.push_back(v2);
v.push_back(v3);
v.push_back(v4);


for (vector&lt;vector&lt;int&gt;&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;

    for (vector&lt;int&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++) &#123;
        cout &lt;&lt; *vit &lt;&lt; &quot; &quot;;
    &#125;
    cout &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>3 STL- 常用容器<br>3.1 string容器<br>3.1.1 string基本概念<br>本质：</p>
<p>string是C++风格的字符串，而string本质上是一个类<br>string和char * 区别：</p>
<p>char * 是一个指针<br>string是一个类，类内部封装了char<em>，管理这个字符串，是一个char</em>型的容器。<br>特点：</p>
<p>string 类内部封装了很多成员方法</p>
<p>例如：查找find，拷贝copy，删除delete 替换replace，插入insert</p>
<p>string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p>
<p>3.1.2 string构造函数<br>构造函数原型：</p>
<p>string(); //创建一个空的字符串 例如: string str;<br>string(const char* s); //使用字符串s初始化<br>string(const string&amp; str); //使用一个string对象初始化另一个string对象<br>string(int n, char c); //使用n个字符c初始化<br>示例：</p>
<p>#include <string><br>//string构造<br>void test01()<br>{<br>    string s1; //创建空字符串，调用无参构造函数<br>    cout &lt;&lt; “str1 = “ &lt;&lt; s1 &lt;&lt; endl;</p>
<pre><code>const char* str = &quot;hello world&quot;;
string s2(str); //把c_string转换成了string

cout &lt;&lt; &quot;str2 = &quot; &lt;&lt; s2 &lt;&lt; endl;

string s3(s2); //调用拷贝构造函数
cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; s3 &lt;&lt; endl;

string s4(10, &#39;a&#39;);
cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; s3 &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>总结：string的多种构造方式没有可比性，灵活使用即可</p>
<p>3.1.3 string赋值操作<br>功能描述：</p>
<p>给string字符串进行赋值<br>赋值的函数原型：</p>
<p>string&amp; operator=(const char* s); //char*类型字符串 赋值给当前的字符串<br>string&amp; operator=(const string &amp;s); //把字符串s赋给当前的字符串<br>string&amp; operator=(char c); //字符赋值给当前的字符串<br>string&amp; assign(const char *s); //把字符串s赋给当前的字符串<br>string&amp; assign(const char *s, int n); //把字符串s的前n个字符赋给当前的字符串<br>string&amp; assign(const string &amp;s); //把字符串s赋给当前字符串<br>string&amp; assign(int n, char c); //用n个字符c赋给当前字符串<br>示例：</p>
<p>//赋值<br>void test01()<br>{<br>    string str1;<br>    str1 = “hello world”;<br>    cout &lt;&lt; “str1 = “ &lt;&lt; str1 &lt;&lt; endl;</p>
<pre><code>string str2;
str2 = str1;
cout &lt;&lt; &quot;str2 = &quot; &lt;&lt; str2 &lt;&lt; endl;

string str3;
str3 = &#39;a&#39;;
cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; str3 &lt;&lt; endl;

string str4;
str4.assign(&quot;hello c++&quot;);
cout &lt;&lt; &quot;str4 = &quot; &lt;&lt; str4 &lt;&lt; endl;

string str5;
str5.assign(&quot;hello c++&quot;,5);
cout &lt;&lt; &quot;str5 = &quot; &lt;&lt; str5 &lt;&lt; endl;


string str6;
str6.assign(str5);
cout &lt;&lt; &quot;str6 = &quot; &lt;&lt; str6 &lt;&lt; endl;

string str7;
str7.assign(5, &#39;x&#39;);
cout &lt;&lt; &quot;str7 = &quot; &lt;&lt; str7 &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>总结：</p>
<p>​ string的赋值方式很多，operator= 这种方式是比较实用的</p>
<p>3.1.4 string字符串拼接<br>功能描述：</p>
<p>实现在字符串末尾拼接字符串<br>函数原型：</p>
<p>string&amp; operator+=(const char* str); //重载+=操作符<br>string&amp; operator+=(const char c); //重载+=操作符<br>string&amp; operator+=(const string&amp; str); //重载+=操作符<br>string&amp; append(const char *s); //把字符串s连接到当前字符串结尾<br>string&amp; append(const char *s, int n); //把字符串s的前n个字符连接到当前字符串结尾<br>string&amp; append(const string &amp;s); //同operator+=(const string&amp; str)<br>string&amp; append(const string &amp;s, int pos, int n);//字符串s中从pos开始的n个字符连接到字符串结尾<br>示例：</p>
<p>//字符串拼接<br>void test01()<br>{<br>    string str1 = “我”;</p>
<pre><code>str1 += &quot;爱玩游戏&quot;;

cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;

str1 += &#39;:&#39;;

cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;

string str2 = &quot;LOL DNF&quot;;

str1 += str2;

cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;

string str3 = &quot;I&quot;;
str3.append(&quot; love &quot;);
str3.append(&quot;game abcde&quot;, 4);
//str3.append(str2);
str3.append(str2, 4, 3); // 从下标4位置开始 ，截取3个字符，拼接到字符串末尾
cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; str3 &lt;&lt; endl;</code></pre>
<p>}<br>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>总结：字符串拼接的重载版本很多，初学阶段记住几种即可</p>
<p>3.1.5 string查找和替换<br>功能描述：</p>
<p>查找：查找指定字符串是否存在<br>替换：在指定的位置替换字符串<br>函数原型：</p>
<p>int find(const string&amp; str, int pos = 0) const; //查找str第一次出现位置,从pos开始查找<br>int find(const char* s, int pos = 0) const; //查找s第一次出现位置,从pos开始查找<br>int find(const char* s, int pos, int n) const; //从pos位置查找s的前n个字符第一次位置<br>int find(const char c, int pos = 0) const; //查找字符c第一次出现位置<br>int rfind(const string&amp; str, int pos = npos) const; //查找str最后一次位置,从pos开始查找<br>int rfind(const char* s, int pos = npos) const; //查找s最后一次出现位置,从pos开始查找<br>int rfind(const char* s, int pos, int n) const; //从pos查找s的前n个字符最后一次位置<br>int rfind(const char c, int pos = 0) const; //查找字符c最后一次出现位置<br>string&amp; replace(int pos, int n, const string&amp; str); //替换从pos开始n个字符为字符串str<br>string&amp; replace(int pos, int n,const char* s); //替换从pos开始的n个字符为字符串s<br>示例：</p>
<p>//查找和替换<br>void test01()<br>{<br>    //查找<br>    string str1 = “abcdefgde”;</p>
<pre><code>int pos = str1.find(&quot;de&quot;);

if (pos == -1)
&#123;
    cout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;pos = &quot; &lt;&lt; pos &lt;&lt; endl;
&#125;


pos = str1.rfind(&quot;de&quot;);

cout &lt;&lt; &quot;pos = &quot; &lt;&lt; pos &lt;&lt; endl;</code></pre>
<p>}</p>
<p>void test02()<br>{<br>    //替换<br>    string str1 = “abcdefgde”;<br>    str1.replace(1, 3, “1111”);</p>
<pre><code>cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>//test01();
//test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>总结：</p>
<p>find查找是从左往后，rfind从右往左<br>find找到字符串后返回查找的第一个字符位置，找不到返回-1<br>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串<br>3.1.6 string字符串比较<br>功能描述：</p>
<p>字符串之间的比较<br>比较方式：</p>
<p>字符串比较是按字符的ASCII码进行对比<br>= 返回 0</p>
<blockquote>
<p>返回 1</p>
</blockquote>
<p>&lt; 返回 -1</p>
<p>函数原型：</p>
<p>int compare(const string &amp;s) const; //与字符串s比较<br>int compare(const char *s) const; //与字符串s比较<br>示例：</p>
<p>//字符串比较<br>void test01()<br>{</p>
<pre><code>string s1 = &quot;hello&quot;;
string s2 = &quot;aello&quot;;

int ret = s1.compare(s2);

if (ret == 0) &#123;
    cout &lt;&lt; &quot;s1 等于 s2&quot; &lt;&lt; endl;
&#125;
else if (ret &gt; 0)
&#123;
    cout &lt;&lt; &quot;s1 大于 s2&quot; &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;s1 小于 s2&quot; &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p>
<p>3.1.7 string字符存取<br>string中单个字符存取方式有两种</p>
<p>char&amp; operator[](int n); //通过[]方式取字符<br>char&amp; at(int n); //通过at方法获取字符<br>示例：</p>
<p>void test01()<br>{<br>    string str = “hello world”;</p>
<pre><code>for (int i = 0; i &lt; str.size(); i++)
&#123;
    cout &lt;&lt; str[i] &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;

for (int i = 0; i &lt; str.size(); i++)
&#123;
    cout &lt;&lt; str.at(i) &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;


//字符修改
str[0] = &#39;x&#39;;
str.at(1) = &#39;x&#39;;
cout &lt;&lt; str &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>总结：string字符串中单个字符存取有两种方式，利用 [ ] 或 at</p>
<p>3.1.8 string插入和删除<br>功能描述：</p>
<p>对string字符串进行插入和删除字符操作<br>函数原型：</p>
<p>string&amp; insert(int pos, const char* s); //插入字符串<br>string&amp; insert(int pos, const string&amp; str); //插入字符串<br>string&amp; insert(int pos, int n, char c); //在指定位置插入n个字符c<br>string&amp; erase(int pos, int n = npos); //删除从Pos开始的n个字符<br>示例：</p>
<p>//字符串插入和删除<br>void test01()<br>{<br>    string str = “hello”;<br>    str.insert(1, “111”);<br>    cout &lt;&lt; str &lt;&lt; endl;</p>
<pre><code>str.erase(1, 3);  //从1号位置开始3个字符
cout &lt;&lt; str &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br><strong>总结：</strong>插入和删除的起始下标都是从0开始</p>
<p>3.1.9 string子串<br>功能描述：</p>
<p>从字符串中获取想要的子串<br>函数原型：</p>
<p>string substr(int pos = 0, int n = npos) const; //返回由pos开始的n个字符组成的字符串<br>示例：</p>
<p>//子串<br>void test01()<br>{</p>
<pre><code>string str = &quot;abcdefg&quot;;
string subStr = str.substr(1, 3);
cout &lt;&lt; &quot;subStr = &quot; &lt;&lt; subStr &lt;&lt; endl;

string email = &quot;hello@sina.com&quot;;
int pos = email.find(&quot;@&quot;);
string username = email.substr(0, pos);
cout &lt;&lt; &quot;username: &quot; &lt;&lt; username &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br><strong>总结：</strong>灵活的运用求子串功能，可以在实际开发中获取有效的信息</p>
<p>3.2 vector容器<br>3.2.1 vector基本概念<br>功能：</p>
<p>vector数据结构和数组非常相似，也称为单端数组<br>vector与普通数组区别：</p>
<p>不同之处在于数组是静态空间，而vector可以动态扩展<br>动态扩展：</p>
<p>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-p7chZeA2-1599302221765)(assets/clip_image002.jpg)]</p>
<p>vector容器的迭代器是支持随机访问的迭代器<br>3.2.2 vector构造函数<br>功能描述：</p>
<p>创建vector容器<br>函数原型：</p>
<p>vector<T> v; //采用模板实现类实现，默认构造函数<br>vector(v.begin(), v.end()); //将v[begin(), end())区间中的元素拷贝给本身。<br>vector(n, elem); //构造函数将n个elem拷贝给本身。<br>vector(const vector &amp;vec); //拷贝构造函数。<br>示例：</p>
<p>#include <vector></p>
<p>void printVector(vector<int>&amp; v) {</p>
<pre><code>for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>void test01()<br>{<br>    vector<int> v1; //无参构造<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        v1.push_back(i);<br>    }<br>    printVector(v1);</p>
<pre><code>vector&lt;int&gt; v2(v1.begin(), v1.end());
printVector(v2);

vector&lt;int&gt; v3(10, 100);
printVector(v3);

vector&lt;int&gt; v4(v3);
printVector(v4);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br><strong>总结：</strong>vector的多种构造方式没有可比性，灵活使用即可</p>
<p>3.2.3 vector赋值操作<br>功能描述：</p>
<p>给vector容器进行赋值<br>函数原型：</p>
<p>vector&amp; operator=(const vector &amp;vec);//重载等号操作符</p>
<p>assign(beg, end); //将[beg, end)区间中的数据拷贝赋值给本身。</p>
<p>assign(n, elem); //将n个elem拷贝赋值给本身。</p>
<p>示例：</p>
<p>#include <vector></p>
<p>void printVector(vector<int>&amp; v) {</p>
<pre><code>for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>//赋值操作<br>void test01()<br>{<br>    vector<int> v1; //无参构造<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        v1.push_back(i);<br>    }<br>    printVector(v1);</p>
<pre><code>vector&lt;int&gt;v2;
v2 = v1;
printVector(v2);

vector&lt;int&gt;v3;
v3.assign(v1.begin(), v1.end());
printVector(v3);

vector&lt;int&gt;v4;
v4.assign(10, 100);
printVector(v4);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>总结： vector赋值方式比较简单，使用operator=，或者assign都可以</p>
<p>3.2.4 vector容量和大小<br>功能描述：</p>
<p>对vector容器的容量和大小操作<br>函数原型：</p>
<p>empty(); //判断容器是否为空</p>
<p>capacity(); //容器的容量</p>
<p>size(); //返回容器中元素的个数</p>
<p>resize(int num); //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p>
<p>​ //如果容器变短，则末尾超出容器长度的元素被删除。</p>
<p>resize(int num, elem); //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p>
<p>​ //如果容器变短，则末尾超出容器长度的元素被删除</p>
<p>示例：</p>
<p>#include <vector></p>
<p>void printVector(vector<int>&amp; v) {</p>
<pre><code>for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>void test01()<br>{<br>    vector<int> v1;<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        v1.push_back(i);<br>    }<br>    printVector(v1);<br>    if (v1.empty())<br>    {<br>        cout &lt;&lt; “v1为空” &lt;&lt; endl;<br>    }<br>    else<br>    {<br>        cout &lt;&lt; “v1不为空” &lt;&lt; endl;<br>        cout &lt;&lt; “v1的容量 = “ &lt;&lt; v1.capacity() &lt;&lt; endl;<br>        cout &lt;&lt; “v1的大小 = “ &lt;&lt; v1.size() &lt;&lt; endl;<br>    }</p>
<pre><code>//resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充
v1.resize(15,10);
printVector(v1);

//resize 重新指定大小 ，若指定的更小，超出部分元素被删除
v1.resize(5);
printVector(v1);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>总结：</p>
<p>判断是否为空 — empty<br>返回元素个数 — size<br>返回容器容量 — capacity<br>重新指定大小 — resize<br>3.2.5 vector插入和删除<br>功能描述：</p>
<p>对vector容器进行插入、删除操作<br>函数原型：</p>
<p>push_back(ele); //尾部插入元素ele<br>pop_back(); //删除最后一个元素<br>insert(const_iterator pos, ele); //迭代器指向位置pos插入元素ele<br>insert(const_iterator pos, int count,ele);//迭代器指向位置pos插入count个元素ele<br>erase(const_iterator pos); //删除迭代器指向的元素<br>erase(const_iterator start, const_iterator end);//删除迭代器从start到end之间的元素<br>clear(); //删除容器中所有元素<br>示例：</p>
<p>#include <vector></p>
<p>void printVector(vector<int>&amp; v) {</p>
<pre><code>for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>//插入和删除<br>void test01()<br>{<br>    vector<int> v1;<br>    //尾插<br>    v1.push_back(10);<br>    v1.push_back(20);<br>    v1.push_back(30);<br>    v1.push_back(40);<br>    v1.push_back(50);<br>    printVector(v1);<br>    //尾删<br>    v1.pop_back();<br>    printVector(v1);<br>    //插入<br>    v1.insert(v1.begin(), 100);<br>    printVector(v1);</p>
<pre><code>v1.insert(v1.begin(), 2, 1000);
printVector(v1);

//删除
v1.erase(v1.begin());
printVector(v1);

//清空
v1.erase(v1.begin(), v1.end());
v1.clear();
printVector(v1);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>总结：</p>
<p>尾插 — push_back<br>尾删 — pop_back<br>插入 — insert (位置迭代器)<br>删除 — erase （位置迭代器）<br>清空 — clear<br>3.2.6 vector数据存取<br>功能描述：</p>
<p>对vector中的数据的存取操作<br>函数原型：</p>
<p>at(int idx); //返回索引idx所指的数据<br>operator[]; //返回索引idx所指的数据<br>front(); //返回容器中第一个数据元素<br>back(); //返回容器中最后一个数据元素<br>示例：</p>
<p>#include <vector></p>
<p>void test01()<br>{<br>    vector<int>v1;<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        v1.push_back(i);<br>    }</p>
<pre><code>for (int i = 0; i &lt; v1.size(); i++)
&#123;
    cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;

for (int i = 0; i &lt; v1.size(); i++)
&#123;
    cout &lt;&lt; v1.at(i) &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;

cout &lt;&lt; &quot;v1的第一个元素为： &quot; &lt;&lt; v1.front() &lt;&lt; endl;
cout &lt;&lt; &quot;v1的最后一个元素为： &quot; &lt;&lt; v1.back() &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>总结：</p>
<p>除了用迭代器获取vector容器中元素，[ ]和at也可以<br>front返回容器第一个元素<br>back返回容器最后一个元素<br>3.2.7 vector互换容器<br>功能描述：</p>
<p>实现两个容器内元素进行互换<br>函数原型：</p>
<p>swap(vec); // 将vec与本身的元素互换<br>示例：</p>
<p>#include <vector></p>
<p>void printVector(vector<int>&amp; v) {</p>
<pre><code>for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>void test01()<br>{<br>    vector<int>v1;<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        v1.push_back(i);<br>    }<br>    printVector(v1);</p>
<pre><code>vector&lt;int&gt;v2;
for (int i = 10; i &gt; 0; i--)
&#123;
    v2.push_back(i);
&#125;
printVector(v2);

//互换容器
cout &lt;&lt; &quot;互换后&quot; &lt;&lt; endl;
v1.swap(v2);
printVector(v1);
printVector(v2);</code></pre>
<p>}</p>
<p>void test02()<br>{<br>    vector<int> v;<br>    for (int i = 0; i &lt; 100000; i++) {<br>        v.push_back(i);<br>    }</p>
<pre><code>cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;
cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;

v.resize(3);

cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;
cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;

//收缩内存
vector&lt;int&gt;(v).swap(v); //匿名对象

cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;
cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>总结：swap可以使两个容器互换，可以达到实用的收缩内存效果</p>
<p>3.2.8 vector预留空间<br>功能描述：</p>
<p>减少vector在动态扩展容量时的扩展次数<br>函数原型：</p>
<p>reserve(int len);//容器预留len个元素长度，预留位置不初始化，元素不可访问。</p>
<p>​</p>
<p>示例：</p>
<p>#include <vector></p>
<p>void test01()<br>{<br>    vector<int> v;</p>
<pre><code>//预留空间
v.reserve(100000);

int num = 0;
int* p = NULL;
for (int i = 0; i &lt; 100000; i++) &#123;
    v.push_back(i);
    if (p != &amp;v[0]) &#123;
        p = &amp;v[0];
        num++;
    &#125;
&#125;

cout &lt;&lt; &quot;num:&quot; &lt;&lt; num &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>总结：如果数据量较大，可以一开始利用reserve预留空间</p>
<p>3.3 deque容器<br>3.3.1 deque容器基本概念<br>功能：</p>
<p>双端数组，可以对头端进行插入删除操作<br>deque与vector区别：</p>
<p>vector对于头部的插入删除效率低，数据量越大，效率越低<br>deque相对而言，对头部的插入删除速度回比vector快<br>vector访问元素时的速度会比deque快,这和两者内部实现有关<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-jC05LFJ3-1599302221767)(assets/clip_image002-1547547642923.jpg)]</p>
<p>deque内部工作原理:</p>
<p>deque内部有个中控器，维护每段缓冲区中的内容，缓冲区中存放真实数据</p>
<p>中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-VTzWcXKx-1599302221768)(assets/clip_image002-1547547896341.jpg)]</p>
<p>deque容器的迭代器也是支持随机访问的<br>3.3.2 deque构造函数<br>功能描述：</p>
<p>deque容器构造<br>函数原型：</p>
<p>deque<T> deqT; //默认构造形式<br>deque(beg, end); //构造函数将[beg, end)区间中的元素拷贝给本身。<br>deque(n, elem); //构造函数将n个elem拷贝给本身。<br>deque(const deque &amp;deq); //拷贝构造函数<br>示例：</p>
<p>#include <deque></p>
<p>void printDeque(const deque<int>&amp; d)<br>{<br>    for (deque<int>::const_iterator it = d.begin(); it != d.end(); it++) {<br>        cout &lt;&lt; *it &lt;&lt; “ “;</p>
<pre><code>&#125;
cout &lt;&lt; endl;</code></pre>
<p>}<br>//deque构造<br>void test01() {</p>
<pre><code>deque&lt;int&gt; d1; //无参构造函数
for (int i = 0; i &lt; 10; i++)
&#123;
    d1.push_back(i);
&#125;
printDeque(d1);
deque&lt;int&gt; d2(d1.begin(),d1.end());
printDeque(d2);

deque&lt;int&gt;d3(10,100);
printDeque(d3);

deque&lt;int&gt;d4 = d3;
printDeque(d4);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br><strong>总结：</strong>deque容器和vector容器的构造方式几乎一致，灵活使用即可</p>
<p>3.3.3 deque赋值操作<br>功能描述：</p>
<p>给deque容器进行赋值<br>函数原型：</p>
<p>deque&amp; operator=(const deque &amp;deq); //重载等号操作符</p>
<p>assign(beg, end); //将[beg, end)区间中的数据拷贝赋值给本身。</p>
<p>assign(n, elem); //将n个elem拷贝赋值给本身。</p>
<p>示例：</p>
<p>#include <deque></p>
<p>void printDeque(const deque<int>&amp; d)<br>{<br>    for (deque<int>::const_iterator it = d.begin(); it != d.end(); it++) {<br>        cout &lt;&lt; *it &lt;&lt; “ “;</p>
<pre><code>&#125;
cout &lt;&lt; endl;</code></pre>
<p>}<br>//赋值操作<br>void test01()<br>{<br>    deque<int> d1;<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        d1.push_back(i);<br>    }<br>    printDeque(d1);</p>
<pre><code>deque&lt;int&gt;d2;
d2 = d1;
printDeque(d2);

deque&lt;int&gt;d3;
d3.assign(d1.begin(), d1.end());
printDeque(d3);

deque&lt;int&gt;d4;
d4.assign(10, 100);
printDeque(d4);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>总结：deque赋值操作也与vector相同，需熟练掌握</p>
<p>3.3.4 deque大小操作<br>功能描述：</p>
<p>对deque容器的大小进行操作<br>函数原型：</p>
<p>deque.empty(); //判断容器是否为空</p>
<p>deque.size(); //返回容器中元素的个数</p>
<p>deque.resize(num); //重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</p>
<p>​ //如果容器变短，则末尾超出容器长度的元素被删除。</p>
<p>deque.resize(num, elem); //重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</p>
<p>​ //如果容器变短，则末尾超出容器长度的元素被删除。</p>
<p>​</p>
<p>示例：</p>
<p>#include <deque></p>
<p>void printDeque(const deque<int>&amp; d)<br>{<br>    for (deque<int>::const_iterator it = d.begin(); it != d.end(); it++) {<br>        cout &lt;&lt; *it &lt;&lt; “ “;</p>
<pre><code>&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>//大小操作<br>void test01()<br>{<br>    deque<int> d1;<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        d1.push_back(i);<br>    }<br>    printDeque(d1);</p>
<pre><code>//判断容器是否为空
if (d1.empty()) &#123;
    cout &lt;&lt; &quot;d1为空!&quot; &lt;&lt; endl;
&#125;
else &#123;
    cout &lt;&lt; &quot;d1不为空!&quot; &lt;&lt; endl;
    //统计大小
    cout &lt;&lt; &quot;d1的大小为：&quot; &lt;&lt; d1.size() &lt;&lt; endl;
&#125;

//重新指定大小
d1.resize(15, 1);
printDeque(d1);

d1.resize(5);
printDeque(d1);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>总结：</p>
<p>deque没有容量的概念<br>判断是否为空 — empty<br>返回元素个数 — size<br>重新指定个数 — resize<br>3.3.5 deque 插入和删除<br>功能描述：</p>
<p>向deque容器中插入和删除数据<br>函数原型：</p>
<p>两端插入操作：</p>
<p>push_back(elem); //在容器尾部添加一个数据<br>push_front(elem); //在容器头部插入一个数据<br>pop_back(); //删除容器最后一个数据<br>pop_front(); //删除容器第一个数据<br>指定位置操作：</p>
<p>insert(pos,elem); //在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p>
<p>insert(pos,n,elem); //在pos位置插入n个elem数据，无返回值。</p>
<p>insert(pos,beg,end); //在pos位置插入[beg,end)区间的数据，无返回值。</p>
<p>clear(); //清空容器的所有数据</p>
<p>erase(beg,end); //删除[beg,end)区间的数据，返回下一个数据的位置。</p>
<p>erase(pos); //删除pos位置的数据，返回下一个数据的位置。</p>
<p>​</p>
<p>​</p>
<p>示例：</p>
<p>#include <deque></p>
<p>void printDeque(const deque<int>&amp; d)<br>{<br>    for (deque<int>::const_iterator it = d.begin(); it != d.end(); it++) {<br>        cout &lt;&lt; *it &lt;&lt; “ “;</p>
<pre><code>&#125;
cout &lt;&lt; endl;</code></pre>
<p>}<br>//两端操作<br>void test01()<br>{<br>    deque<int> d;<br>    //尾插<br>    d.push_back(10);<br>    d.push_back(20);<br>    //头插<br>    d.push_front(100);<br>    d.push_front(200);</p>
<pre><code>printDeque(d);

//尾删
d.pop_back();
//头删
d.pop_front();
printDeque(d);</code></pre>
<p>}</p>
<p>//插入<br>void test02()<br>{<br>    deque<int> d;<br>    d.push_back(10);<br>    d.push_back(20);<br>    d.push_front(100);<br>    d.push_front(200);<br>    printDeque(d);</p>
<pre><code>d.insert(d.begin(), 1000);
printDeque(d);

d.insert(d.begin(), 2,10000);
printDeque(d);

deque&lt;int&gt;d2;
d2.push_back(1);
d2.push_back(2);
d2.push_back(3);

d.insert(d.begin(), d2.begin(), d2.end());
printDeque(d);</code></pre>
<p>}</p>
<p>//删除<br>void test03()<br>{<br>    deque<int> d;<br>    d.push_back(10);<br>    d.push_back(20);<br>    d.push_front(100);<br>    d.push_front(200);<br>    printDeque(d);</p>
<pre><code>d.erase(d.begin());
printDeque(d);

d.erase(d.begin(), d.end());
d.clear();
printDeque(d);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>//test01();

//test02();

test03();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>总结：</p>
<p>插入和删除提供的位置是迭代器！<br>尾插 — push_back<br>尾删 — pop_back<br>头插 — push_front<br>头删 — pop_front<br>3.3.6 deque 数据存取<br>功能描述：</p>
<p>对deque 中的数据的存取操作<br>函数原型：</p>
<p>at(int idx); //返回索引idx所指的数据<br>operator[]; //返回索引idx所指的数据<br>front(); //返回容器中第一个数据元素<br>back(); //返回容器中最后一个数据元素<br>示例：</p>
<p>#include <deque></p>
<p>void printDeque(const deque<int>&amp; d)<br>{<br>    for (deque<int>::const_iterator it = d.begin(); it != d.end(); it++) {<br>        cout &lt;&lt; *it &lt;&lt; “ “;</p>
<pre><code>&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>//数据存取<br>void test01()<br>{</p>
<pre><code>deque&lt;int&gt; d;
d.push_back(10);
d.push_back(20);
d.push_front(100);
d.push_front(200);

for (int i = 0; i &lt; d.size(); i++) &#123;
    cout &lt;&lt; d[i] &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;


for (int i = 0; i &lt; d.size(); i++) &#123;
    cout &lt;&lt; d.at(i) &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;

cout &lt;&lt; &quot;front:&quot; &lt;&lt; d.front() &lt;&lt; endl;

cout &lt;&lt; &quot;back:&quot; &lt;&lt; d.back() &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>总结：</p>
<p>除了用迭代器获取deque容器中元素，[ ]和at也可以<br>front返回容器第一个元素<br>back返回容器最后一个元素<br>3.3.7 deque 排序<br>功能描述：</p>
<p>利用算法实现对deque容器进行排序<br>算法：</p>
<p>sort(iterator beg, iterator end) //对beg和end区间内元素进行排序<br>示例：</p>
<p>#include <deque><br>#include <algorithm></p>
<p>void printDeque(const deque<int>&amp; d)<br>{<br>    for (deque<int>::const_iterator it = d.begin(); it != d.end(); it++) {<br>        cout &lt;&lt; *it &lt;&lt; “ “;</p>
<pre><code>&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>void test01()<br>{</p>
<pre><code>deque&lt;int&gt; d;
d.push_back(10);
d.push_back(20);
d.push_front(100);
d.push_front(200);

printDeque(d);
sort(d.begin(), d.end());
printDeque(d);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>总结：sort算法非常实用，使用时包含头文件 algorithm即可</p>
<p>3.4 案例-评委打分<br>3.4.1 案例描述<br>有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。</p>
<p>3.4.2 实现步骤<br>创建五名选手，放到vector中<br>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中<br>sort算法对deque容器中分数排序，去除最高和最低分<br>deque容器遍历一遍，累加总分<br>获取平均分<br>示例代码：</p>
<p>//选手类<br>class Person<br>{<br>public:<br>    Person(string name, int score)<br>    {<br>        this-&gt;m_Name = name;<br>        this-&gt;m_Score = score;<br>    }</p>
<pre><code>string m_Name; //姓名
int m_Score;  //平均分</code></pre>
<p>};</p>
<p>void createPerson(vector<Person>&amp;v)<br>{<br>    string nameSeed = “ABCDE”;<br>    for (int i = 0; i &lt; 5; i++)<br>    {<br>        string name = “选手”;<br>        name += nameSeed[i];</p>
<pre><code>    int score = 0;

    Person p(name, score);

    //将创建的person对象 放入到容器中
    v.push_back(p);
&#125;</code></pre>
<p>}</p>
<p>//打分<br>void setScore(vector<Person>&amp;v)<br>{<br>    for (vector<Person>::iterator it = v.begin(); it != v.end(); it++)<br>    {<br>        //将评委的分数 放入到deque容器中<br>        deque<int>d;<br>        for (int i = 0; i &lt; 10; i++)<br>        {<br>            int score = rand() % 41 + 60;  // 60 ~ 100<br>            d.push_back(score);<br>        }</p>
<pre><code>    //cout &lt;&lt; &quot;选手： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 打分： &quot; &lt;&lt; endl;
    //for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++)
    //&#123;
    //    cout &lt;&lt; *dit &lt;&lt; &quot; &quot;;
    //&#125;
    //cout &lt;&lt; endl;

    //排序
    sort(d.begin(), d.end());

    //去除最高和最低分
    d.pop_back();
    d.pop_front();

    //取平均分
    int sum = 0;
    for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++)
    &#123;
        sum += *dit; //累加每个评委的分数
    &#125;

    int avg = sum / d.size();

    //将平均分 赋值给选手身上
    it-&gt;m_Score = avg;
&#125;</code></pre>
<p>}</p>
<p>void showScore(vector<Person>&amp;v)<br>{<br>    for (vector<Person>::iterator it = v.begin(); it != v.end(); it++)<br>    {<br>        cout &lt;&lt; “姓名： “ &lt;&lt; it-&gt;m_Name &lt;&lt; “ 平均分： “ &lt;&lt; it-&gt;m_Score &lt;&lt; endl;<br>    }<br>}</p>
<p>int main() {</p>
<pre><code>//随机数种子
srand((unsigned int)time(NULL));

//1、创建5名选手
vector&lt;Person&gt;v;  //存放选手容器
createPerson(v);

//测试
//for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)
//&#123;
//    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot; 分数： &quot; &lt;&lt; (*it).m_Score &lt;&lt; endl;
//&#125;

//2、给5名选手打分
setScore(v);

//3、显示最后得分
showScore(v);

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>总结： 选取不同的容器操作数据，可以提升代码的效率</p>
<p>3.5 stack容器<br>3.5.1 stack 基本概念<br>概念：stack是一种先进后出(First In Last Out,FILO)的数据结构，它只有一个出口</p>
<p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</p>
<p>栈中进入数据称为 — 入栈 push</p>
<p>栈中弹出数据称为 — 出栈 pop</p>
<p>3.5.2 stack 常用接口<br>功能描述：栈容器常用的对外接口</p>
<p>构造函数：</p>
<p>stack<T> stk; //stack采用模板类实现， stack对象的默认构造形式<br>stack(const stack &amp;stk); //拷贝构造函数<br>赋值操作：</p>
<p>stack&amp; operator=(const stack &amp;stk); //重载等号操作符<br>数据存取：</p>
<p>push(elem); //向栈顶添加元素<br>pop(); //从栈顶移除第一个元素<br>top(); //返回栈顶元素<br>大小操作：</p>
<p>empty(); //判断堆栈是否为空<br>size(); //返回栈的大小<br>示例：</p>
<p>#include <stack></p>
<p>//栈容器常用接口<br>void test01()<br>{<br>    //创建栈容器 栈容器必须符合先进后出<br>    stack<int> s;</p>
<pre><code>//向栈中添加元素，叫做 压栈 入栈
s.push(10);
s.push(20);
s.push(30);

while (!s.empty()) &#123;
    //输出栈顶元素
    cout &lt;&lt; &quot;栈顶元素为： &quot; &lt;&lt; s.top() &lt;&lt; endl;
    //弹出栈顶元素
    s.pop();
&#125;
cout &lt;&lt; &quot;栈的大小为：&quot; &lt;&lt; s.size() &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>总结：</p>
<p>入栈 — push<br>出栈 — pop<br>返回栈顶 — top<br>判断栈是否为空 — empty<br>返回栈大小 — size<br>3.6 queue 容器<br>3.6.1 queue 基本概念<br>概念：Queue是一种先进先出(First In First Out,FIFO)的数据结构，它有两个出口</p>
<p>队列容器允许从一端新增元素，从另一端移除元素</p>
<p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为</p>
<p>队列中进数据称为 — 入队 push</p>
<p>队列中出数据称为 — 出队 pop</p>
<p>3.6.2 queue 常用接口<br>功能描述：栈容器常用的对外接口</p>
<p>构造函数：</p>
<p>queue<T> que; //queue采用模板类实现，queue对象的默认构造形式<br>queue(const queue &amp;que); //拷贝构造函数<br>赋值操作：</p>
<p>queue&amp; operator=(const queue &amp;que); //重载等号操作符<br>数据存取：</p>
<p>push(elem); //往队尾添加元素<br>pop(); //从队头移除第一个元素<br>back(); //返回最后一个元素<br>front(); //返回第一个元素<br>大小操作：</p>
<p>empty(); //判断堆栈是否为空<br>size(); //返回栈的大小<br>示例：</p>
<p>#include <queue><br>#include <string><br>class Person<br>{<br>public:<br>    Person(string name, int age)<br>    {<br>        this-&gt;m_Name = name;<br>        this-&gt;m_Age = age;<br>    }</p>
<pre><code>string m_Name;
int m_Age;</code></pre>
<p>};</p>
<p>void test01() {</p>
<pre><code>//创建队列
queue&lt;Person&gt; q;

//准备数据
Person p1(&quot;唐僧&quot;, 30);
Person p2(&quot;孙悟空&quot;, 1000);
Person p3(&quot;猪八戒&quot;, 900);
Person p4(&quot;沙僧&quot;, 800);

//向队列中添加元素  入队操作
q.push(p1);
q.push(p2);
q.push(p3);
q.push(p4);

//队列不提供迭代器，更不支持随机访问    
while (!q.empty()) &#123;
    //输出队头元素
    cout &lt;&lt; &quot;队头元素-- 姓名： &quot; &lt;&lt; q.front().m_Name 
          &lt;&lt; &quot; 年龄： &quot;&lt;&lt; q.front().m_Age &lt;&lt; endl;

    cout &lt;&lt; &quot;队尾元素-- 姓名： &quot; &lt;&lt; q.back().m_Name  
          &lt;&lt; &quot; 年龄： &quot; &lt;&lt; q.back().m_Age &lt;&lt; endl;

    cout &lt;&lt; endl;
    //弹出队头元素
    q.pop();
&#125;

cout &lt;&lt; &quot;队列大小为：&quot; &lt;&lt; q.size() &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>总结：</p>
<p>入队 — push<br>出队 — pop<br>返回队头元素 — front<br>返回队尾元素 — back<br>判断队是否为空 — empty<br>返回队列大小 — size<br>3.7 list容器<br>3.7.1 list基本概念<br><strong>功能：</strong>将数据进行链式存储</p>
<p>链表（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p>
<p>链表的组成：链表由一系列结点组成</p>
<p>结点的组成：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域</p>
<p>STL中的链表是一个双向循环链表</p>
<p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于双向迭代器</p>
<p>list的优点：</p>
<p>采用动态存储分配，不会造成内存浪费和溢出<br>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素<br>list的缺点：</p>
<p>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大<br>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。</p>
<p>总结：STL中List和vector是两个最常被使用的容器，各有优缺点</p>
<p>3.7.2 list构造函数<br>功能描述：</p>
<p>创建list容器<br>函数原型：</p>
<p>list<T> lst; //list采用采用模板类实现,对象的默认构造形式：<br>list(beg,end); //构造函数将[beg, end)区间中的元素拷贝给本身。<br>list(n,elem); //构造函数将n个elem拷贝给本身。<br>list(const list &amp;lst); //拷贝构造函数。<br>示例：</p>
<p>#include <list></p>
<p>void printList(const list<int>&amp; L) {</p>
<pre><code>for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>void test01()<br>{<br>    list<int>L1;<br>    L1.push_back(10);<br>    L1.push_back(20);<br>    L1.push_back(30);<br>    L1.push_back(40);</p>
<pre><code>printList(L1);

list&lt;int&gt;L2(L1.begin(),L1.end());
printList(L2);

list&lt;int&gt;L3(L2);
printList(L3);

list&lt;int&gt;L4(10, 1000);
printList(L4);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>总结：list构造方式同其他几个STL常用容器，熟练掌握即可</p>
<p>3.7.3 list 赋值和交换<br>功能描述：</p>
<p>给list容器进行赋值，以及交换list容器<br>函数原型：</p>
<p>assign(beg, end); //将[beg, end)区间中的数据拷贝赋值给本身。<br>assign(n, elem); //将n个elem拷贝赋值给本身。<br>list&amp; operator=(const list &amp;lst); //重载等号操作符<br>swap(lst); //将lst与本身的元素互换。<br>示例：</p>
<p>#include <list></p>
<p>void printList(const list<int>&amp; L) {</p>
<pre><code>for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>//赋值和交换<br>void test01()<br>{<br>    list<int>L1;<br>    L1.push_back(10);<br>    L1.push_back(20);<br>    L1.push_back(30);<br>    L1.push_back(40);<br>    printList(L1);</p>
<pre><code>//赋值
list&lt;int&gt;L2;
L2 = L1;
printList(L2);

list&lt;int&gt;L3;
L3.assign(L2.begin(), L2.end());
printList(L3);

list&lt;int&gt;L4;
L4.assign(10, 100);
printList(L4);</code></pre>
<p>}</p>
<p>//交换<br>void test02()<br>{</p>
<pre><code>list&lt;int&gt;L1;
L1.push_back(10);
L1.push_back(20);
L1.push_back(30);
L1.push_back(40);

list&lt;int&gt;L2;
L2.assign(10, 100);

cout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl;
printList(L1);
printList(L2);

cout &lt;&lt; endl;

L1.swap(L2);

cout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl;
printList(L1);
printList(L2);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>//test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>总结：list赋值和交换操作能够灵活运用即可</p>
<p>3.7.4 list 大小操作<br>功能描述：</p>
<p>对list容器的大小进行操作<br>函数原型：</p>
<p>size(); //返回容器中元素的个数</p>
<p>empty(); //判断容器是否为空</p>
<p>resize(num); //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p>
<p>​ //如果容器变短，则末尾超出容器长度的元素被删除。</p>
<p>resize(num, elem); //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p>
<pre><code>            ​                        //如果容器变短，则末尾超出容器长度的元素被删除。</code></pre>
<p>1<br>示例：</p>
<p>#include <list></p>
<p>void printList(const list<int>&amp; L) {</p>
<pre><code>for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>//大小操作<br>void test01()<br>{<br>    list<int>L1;<br>    L1.push_back(10);<br>    L1.push_back(20);<br>    L1.push_back(30);<br>    L1.push_back(40);</p>
<pre><code>if (L1.empty())
&#123;
    cout &lt;&lt; &quot;L1为空&quot; &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;L1不为空&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;L1的大小为： &quot; &lt;&lt; L1.size() &lt;&lt; endl;
&#125;

//重新指定大小
L1.resize(10);
printList(L1);

L1.resize(2);
printList(L1);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>总结：</p>
<p>判断是否为空 — empty<br>返回元素个数 — size<br>重新指定个数 — resize<br>3.7.5 list 插入和删除<br>功能描述：</p>
<p>对list容器进行数据的插入和删除<br>函数原型：</p>
<p>push_back(elem);//在容器尾部加入一个元素<br>pop_back();//删除容器中最后一个元素<br>push_front(elem);//在容器开头插入一个元素<br>pop_front();//从容器开头移除第一个元素<br>insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。<br>insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。<br>insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。<br>clear();//移除容器的所有数据<br>erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置。<br>erase(pos);//删除pos位置的数据，返回下一个数据的位置。<br>remove(elem);//删除容器中所有与elem值匹配的元素。<br>示例：</p>
<p>#include <list></p>
<p>void printList(const list<int>&amp; L) {</p>
<pre><code>for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>//插入和删除<br>void test01()<br>{<br>    list<int> L;<br>    //尾插<br>    L.push_back(10);<br>    L.push_back(20);<br>    L.push_back(30);<br>    //头插<br>    L.push_front(100);<br>    L.push_front(200);<br>    L.push_front(300);</p>
<pre><code>printList(L);

//尾删
L.pop_back();
printList(L);

//头删
L.pop_front();
printList(L);

//插入
list&lt;int&gt;::iterator it = L.begin();
L.insert(++it, 1000);
printList(L);

//删除
it = L.begin();
L.erase(++it);
printList(L);

//移除
L.push_back(10000);
L.push_back(10000);
L.push_back(10000);
printList(L);
L.remove(10000);
printList(L);

//清空
L.clear();
printList(L);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>总结：</p>
<p>尾插 — push_back<br>尾删 — pop_back<br>头插 — push_front<br>头删 — pop_front<br>插入 — insert<br>删除 — erase<br>移除 — remove<br>清空 — clear<br>3.7.6 list 数据存取<br>功能描述：</p>
<p>对list容器中数据进行存取<br>函数原型：</p>
<p>front(); //返回第一个元素。<br>back(); //返回最后一个元素。<br>示例：</p>
<p>#include <list></p>
<p>//数据存取<br>void test01()<br>{<br>    list<int>L1;<br>    L1.push_back(10);<br>    L1.push_back(20);<br>    L1.push_back(30);<br>    L1.push_back(40);</p>
<pre><code>//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据
//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据
cout &lt;&lt; &quot;第一个元素为： &quot; &lt;&lt; L1.front() &lt;&lt; endl;
cout &lt;&lt; &quot;最后一个元素为： &quot; &lt;&lt; L1.back() &lt;&lt; endl;

//list容器的迭代器是双向迭代器，不支持随机访问
list&lt;int&gt;::iterator it = L1.begin();
//it = it + 1;//错误，不可以跳跃访问，即使是+1</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>总结：</p>
<p>list容器中不可以通过[]或者at方式访问数据<br>返回第一个元素 — front<br>返回最后一个元素 — back<br>3.7.7 list 反转和排序<br>功能描述：</p>
<p>将容器中的元素反转，以及将容器中的数据进行排序<br>函数原型：</p>
<p>reverse(); //反转链表<br>sort(); //链表排序<br>示例：</p>
<p>void printList(const list<int>&amp; L) {</p>
<pre><code>for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>bool myCompare(int val1 , int val2)<br>{<br>    return val1 &gt; val2;<br>}</p>
<p>//反转和排序<br>void test01()<br>{<br>    list<int> L;<br>    L.push_back(90);<br>    L.push_back(30);<br>    L.push_back(20);<br>    L.push_back(70);<br>    printList(L);</p>
<pre><code>//反转容器的元素
L.reverse();
printList(L);

//排序
L.sort(); //默认的排序规则 从小到大
printList(L);

L.sort(myCompare); //指定规则，从大到小
printList(L);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>总结：</p>
<p>反转 — reverse<br>排序 — sort （成员函数）<br>3.7.8 排序案例<br>案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高</p>
<p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p>
<p>示例：</p>
<p>#include <list><br>#include <string><br>class Person {<br>public:<br>    Person(string name, int age , int height) {<br>        m_Name = name;<br>        m_Age = age;<br>        m_Height = height;<br>    }</p>
<p>public:<br>    string m_Name;  //姓名<br>    int m_Age;      //年龄<br>    int m_Height;   //身高<br>};</p>
<p>bool ComparePerson(Person&amp; p1, Person&amp; p2) {</p>
<pre><code>if (p1.m_Age == p2.m_Age) &#123;
    return p1.m_Height  &gt; p2.m_Height;
&#125;
else
&#123;
    return  p1.m_Age &lt; p2.m_Age;
&#125;</code></pre>
<p>}</p>
<p>void test01() {</p>
<pre><code>list&lt;Person&gt; L;

Person p1(&quot;刘备&quot;, 35 , 175);
Person p2(&quot;曹操&quot;, 45 , 180);
Person p3(&quot;孙权&quot;, 40 , 170);
Person p4(&quot;赵云&quot;, 25 , 190);
Person p5(&quot;张飞&quot;, 35 , 160);
Person p6(&quot;关羽&quot;, 35 , 200);

L.push_back(p1);
L.push_back(p2);
L.push_back(p3);
L.push_back(p4);
L.push_back(p5);
L.push_back(p6);

for (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) &#123;
    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age 
          &lt;&lt; &quot; 身高： &quot; &lt;&lt; it-&gt;m_Height &lt;&lt; endl;
&#125;

cout &lt;&lt; &quot;---------------------------------&quot; &lt;&lt; endl;
L.sort(ComparePerson); //排序

for (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) &#123;
    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age 
          &lt;&lt; &quot; 身高： &quot; &lt;&lt; it-&gt;m_Height &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>总结：</p>
<p>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</p>
<p>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂</p>
<p>3.8 set/ multiset 容器<br>3.8.1 set基本概念<br>简介：</p>
<p>所有元素都会在插入时自动被排序<br>本质：</p>
<p>set/multiset属于关联式容器，底层结构是用二叉树实现。<br>set和multiset区别：</p>
<p>set不允许容器中有重复的元素<br>multiset允许容器中有重复的元素<br>3.8.2 set构造和赋值<br>功能描述：创建set容器以及赋值</p>
<p>构造：</p>
<p>set<T> st; //默认构造函数：<br>set(const set &amp;st); //拷贝构造函数<br>赋值：</p>
<p>set&amp; operator=(const set &amp;st); //重载等号操作符<br>示例：</p>
<p>#include <set></p>
<p>void printSet(set<int> &amp; s)<br>{<br>    for (set<int>::iterator it = s.begin(); it != s.end(); it++)<br>    {<br>        cout &lt;&lt; *it &lt;&lt; “ “;<br>    }<br>    cout &lt;&lt; endl;<br>}</p>
<p>//构造和赋值<br>void test01()<br>{<br>    set<int> s1;</p>
<pre><code>s1.insert(10);
s1.insert(30);
s1.insert(20);
s1.insert(40);
printSet(s1);

//拷贝构造
set&lt;int&gt;s2(s1);
printSet(s2);

//赋值
set&lt;int&gt;s3;
s3 = s2;
printSet(s3);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>总结：</p>
<p>set容器插入数据时用insert<br>set容器插入数据的数据会自动排序<br>3.8.3 set大小和交换<br>功能描述：</p>
<p>统计set容器大小以及交换set容器<br>函数原型：</p>
<p>size(); //返回容器中元素的数目<br>empty(); //判断容器是否为空<br>swap(st); //交换两个集合容器<br>示例：</p>
<p>#include <set></p>
<p>void printSet(set<int> &amp; s)<br>{<br>    for (set<int>::iterator it = s.begin(); it != s.end(); it++)<br>    {<br>        cout &lt;&lt; *it &lt;&lt; “ “;<br>    }<br>    cout &lt;&lt; endl;<br>}</p>
<p>//大小<br>void test01()<br>{</p>
<pre><code>set&lt;int&gt; s1;

s1.insert(10);
s1.insert(30);
s1.insert(20);
s1.insert(40);

if (s1.empty())
&#123;
    cout &lt;&lt; &quot;s1为空&quot; &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;s1不为空&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;s1的大小为： &quot; &lt;&lt; s1.size() &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>//交换<br>void test02()<br>{<br>    set<int> s1;</p>
<pre><code>s1.insert(10);
s1.insert(30);
s1.insert(20);
s1.insert(40);

set&lt;int&gt; s2;

s2.insert(100);
s2.insert(300);
s2.insert(200);
s2.insert(400);

cout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl;
printSet(s1);
printSet(s2);
cout &lt;&lt; endl;

cout &lt;&lt; &quot;交换后&quot; &lt;&lt; endl;
s1.swap(s2);
printSet(s1);
printSet(s2);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>//test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>总结：</p>
<p>统计大小 — size<br>判断是否为空 — empty<br>交换容器 — swap<br>3.8.4 set插入和删除<br>功能描述：</p>
<p>set容器进行插入数据和删除数据<br>函数原型：</p>
<p>insert(elem); //在容器中插入元素。<br>clear(); //清除所有元素<br>erase(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器。<br>erase(beg, end); //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。<br>erase(elem); //删除容器中值为elem的元素。<br>示例：</p>
<p>#include <set></p>
<p>void printSet(set<int> &amp; s)<br>{<br>    for (set<int>::iterator it = s.begin(); it != s.end(); it++)<br>    {<br>        cout &lt;&lt; *it &lt;&lt; “ “;<br>    }<br>    cout &lt;&lt; endl;<br>}</p>
<p>//插入和删除<br>void test01()<br>{<br>    set<int> s1;<br>    //插入<br>    s1.insert(10);<br>    s1.insert(30);<br>    s1.insert(20);<br>    s1.insert(40);<br>    printSet(s1);</p>
<pre><code>//删除
s1.erase(s1.begin());
printSet(s1);

s1.erase(30);
printSet(s1);

//清空
//s1.erase(s1.begin(), s1.end());
s1.clear();
printSet(s1);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>总结：</p>
<p>插入 — insert<br>删除 — erase<br>清空 — clear<br>3.8.5 set查找和统计<br>功能描述：</p>
<p>对set容器进行查找数据以及统计数据<br>函数原型：</p>
<p>find(key); //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();<br>count(key); //统计key的元素个数<br>示例：</p>
<p>#include <set></p>
<p>//查找和统计<br>void test01()<br>{<br>    set<int> s1;<br>    //插入<br>    s1.insert(10);<br>    s1.insert(30);<br>    s1.insert(20);<br>    s1.insert(40);</p>
<pre><code>//查找
set&lt;int&gt;::iterator pos = s1.find(30);

if (pos != s1.end())
&#123;
    cout &lt;&lt; &quot;找到了元素 ： &quot; &lt;&lt; *pos &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;未找到元素&quot; &lt;&lt; endl;
&#125;

//统计
int num = s1.count(30);
cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>总结：</p>
<p>查找 — find （返回的是迭代器）<br>统计 — count （对于set，结果为0或者1）<br>3.8.6 set和multiset区别<br>学习目标：</p>
<p>掌握set和multiset的区别<br>区别：</p>
<p>set不可以插入重复数据，而multiset可以<br>set插入数据的同时会返回插入结果，表示插入是否成功<br>multiset不会检测数据，因此可以插入重复数据<br>示例：</p>
<p>#include <set></p>
<p>//set和multiset区别<br>void test01()<br>{<br>    set<int> s;<br>    pair&lt;set<int>::iterator, bool&gt;  ret = s.insert(10);<br>    if (ret.second) {<br>        cout &lt;&lt; “第一次插入成功!” &lt;&lt; endl;<br>    }<br>    else {<br>        cout &lt;&lt; “第一次插入失败!” &lt;&lt; endl;<br>    }</p>
<pre><code>ret = s.insert(10);
if (ret.second) &#123;
    cout &lt;&lt; &quot;第二次插入成功!&quot; &lt;&lt; endl;
&#125;
else &#123;
    cout &lt;&lt; &quot;第二次插入失败!&quot; &lt;&lt; endl;
&#125;

//multiset
multiset&lt;int&gt; ms;
ms.insert(10);
ms.insert(10);

for (multiset&lt;int&gt;::iterator it = ms.begin(); it != ms.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>总结：</p>
<p>如果不允许插入重复数据可以利用set<br>如果需要插入重复数据利用multiset<br>3.8.7 pair对组创建<br>功能描述：</p>
<p>成对出现的数据，利用对组可以返回两个数据<br>两种创建方式：</p>
<p>pair&lt;type, type&gt; p ( value1, value2 );<br>pair&lt;type, type&gt; p = make_pair( value1, value2 );<br>示例：</p>
<p>#include <string></p>
<p>//对组创建<br>void test01()<br>{<br>    pair&lt;string, int&gt; p(string(“Tom”), 20);<br>    cout &lt;&lt; “姓名： “ &lt;&lt;  p.first &lt;&lt; “ 年龄： “ &lt;&lt; p.second &lt;&lt; endl;</p>
<pre><code>pair&lt;string, int&gt; p2 = make_pair(&quot;Jerry&quot;, 10);
cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p2.first &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p2.second &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>总结：</p>
<p>两种方式都可以创建对组，记住一种即可</p>
<p>3.8.8 set容器排序<br>学习目标：</p>
<p>set容器默认排序规则为从小到大，掌握如何改变排序规则<br>主要技术点：</p>
<p>利用仿函数，可以改变排序规则<br>示例一 set存放内置数据类型</p>
<p>#include <set></p>
<p>class MyCompare<br>{<br>public:<br>    bool operator()(int v1, int v2) {<br>        return v1 &gt; v2;<br>    }<br>};<br>void test01()<br>{<br>    set<int> s1;<br>    s1.insert(10);<br>    s1.insert(40);<br>    s1.insert(20);<br>    s1.insert(30);<br>    s1.insert(50);</p>
<pre><code>//默认从小到大
for (set&lt;int&gt;::iterator it = s1.begin(); it != s1.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;

//指定排序规则
set&lt;int,MyCompare&gt; s2;
s2.insert(10);
s2.insert(40);
s2.insert(20);
s2.insert(30);
s2.insert(50);

for (set&lt;int, MyCompare&gt;::iterator it = s2.begin(); it != s2.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>总结：利用仿函数可以指定set容器的排序规则</p>
<p>示例二 set存放自定义数据类型</p>
<p>#include <set><br>#include <string></p>
<p>class Person<br>{<br>public:<br>    Person(string name, int age)<br>    {<br>        this-&gt;m_Name = name;<br>        this-&gt;m_Age = age;<br>    }</p>
<pre><code>string m_Name;
int m_Age;</code></pre>
<p>};<br>class comparePerson<br>{<br>public:<br>    bool operator()(const Person&amp; p1, const Person &amp;p2)<br>    {<br>        //按照年龄进行排序  降序<br>        return p1.m_Age &gt; p2.m_Age;<br>    }<br>};</p>
<p>void test01()<br>{<br>    set&lt;Person, comparePerson&gt; s;</p>
<pre><code>Person p1(&quot;刘备&quot;, 23);
Person p2(&quot;关羽&quot;, 27);
Person p3(&quot;张飞&quot;, 25);
Person p4(&quot;赵云&quot;, 21);

s.insert(p1);
s.insert(p2);
s.insert(p3);
s.insert(p4);

for (set&lt;Person, comparePerson&gt;::iterator it = s.begin(); it != s.end(); it++)
&#123;
    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;
&#125;</code></pre>
<p>}<br>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>总结：</p>
<p>对于自定义数据类型，set必须指定排序规则才可以插入数据</p>
<p>3.9 map/ multimap容器<br>3.9.1 map基本概念<br>简介：</p>
<p>map中所有元素都是pair<br>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）<br>所有元素都会根据元素的键值自动排序<br>本质：</p>
<p>map/multimap属于关联式容器，底层结构是用二叉树实现。<br>优点：</p>
<p>可以根据key值快速找到value值<br>map和multimap区别：</p>
<p>map不允许容器中有重复key值元素<br>multimap允许容器中有重复key值元素<br>3.9.2 map构造和赋值<br>功能描述：</p>
<p>对map容器进行构造和赋值操作<br>函数原型：</p>
<p>构造：</p>
<p>map&lt;T1, T2&gt; mp; //map默认构造函数:<br>map(const map &amp;mp); //拷贝构造函数<br>赋值：</p>
<p>map&amp; operator=(const map &amp;mp); //重载等号操作符<br>示例：</p>
<p>#include <map></p>
<p>void printMap(map&lt;int,int&gt;&amp;m)<br>{<br>    for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++)<br>    {<br>        cout &lt;&lt; “key = “ &lt;&lt; it-&gt;first &lt;&lt; “ value = “ &lt;&lt; it-&gt;second &lt;&lt; endl;<br>    }<br>    cout &lt;&lt; endl;<br>}</p>
<p>void test01()<br>{<br>    map&lt;int,int&gt;m; //默认构造<br>    m.insert(pair&lt;int, int&gt;(1, 10));<br>    m.insert(pair&lt;int, int&gt;(2, 20));<br>    m.insert(pair&lt;int, int&gt;(3, 30));<br>    printMap(m);</p>
<pre><code>map&lt;int, int&gt;m2(m); //拷贝构造
printMap(m2);

map&lt;int, int&gt;m3;
m3 = m2; //赋值
printMap(m3);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>总结：map中所有元素都是成对出现，插入数据时候要使用对组</p>
<p>3.9.3 map大小和交换<br>功能描述：</p>
<p>统计map容器大小以及交换map容器<br>函数原型：</p>
<p>size(); //返回容器中元素的数目<br>empty(); //判断容器是否为空<br>swap(st); //交换两个集合容器<br>示例：</p>
<p>#include <map></p>
<p>void printMap(map&lt;int,int&gt;&amp;m)<br>{<br>    for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++)<br>    {<br>        cout &lt;&lt; “key = “ &lt;&lt; it-&gt;first &lt;&lt; “ value = “ &lt;&lt; it-&gt;second &lt;&lt; endl;<br>    }<br>    cout &lt;&lt; endl;<br>}</p>
<p>void test01()<br>{<br>    map&lt;int, int&gt;m;<br>    m.insert(pair&lt;int, int&gt;(1, 10));<br>    m.insert(pair&lt;int, int&gt;(2, 20));<br>    m.insert(pair&lt;int, int&gt;(3, 30));</p>
<pre><code>if (m.empty())
&#123;
    cout &lt;&lt; &quot;m为空&quot; &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;m不为空&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;m的大小为： &quot; &lt;&lt; m.size() &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>//交换<br>void test02()<br>{<br>    map&lt;int, int&gt;m;<br>    m.insert(pair&lt;int, int&gt;(1, 10));<br>    m.insert(pair&lt;int, int&gt;(2, 20));<br>    m.insert(pair&lt;int, int&gt;(3, 30));</p>
<pre><code>map&lt;int, int&gt;m2;
m2.insert(pair&lt;int, int&gt;(4, 100));
m2.insert(pair&lt;int, int&gt;(5, 200));
m2.insert(pair&lt;int, int&gt;(6, 300));

cout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl;
printMap(m);
printMap(m2);

cout &lt;&lt; &quot;交换后&quot; &lt;&lt; endl;
m.swap(m2);
printMap(m);
printMap(m2);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>总结：</p>
<p>统计大小 — size<br>判断是否为空 — empty<br>交换容器 — swap<br>3.9.4 map插入和删除<br>功能描述：</p>
<p>map容器进行插入数据和删除数据<br>函数原型：</p>
<p>insert(elem); //在容器中插入元素。<br>clear(); //清除所有元素<br>erase(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器。<br>erase(beg, end); //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。<br>erase(key); //删除容器中值为key的元素。<br>示例：</p>
<p>#include <map></p>
<p>void printMap(map&lt;int,int&gt;&amp;m)<br>{<br>    for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++)<br>    {<br>        cout &lt;&lt; “key = “ &lt;&lt; it-&gt;first &lt;&lt; “ value = “ &lt;&lt; it-&gt;second &lt;&lt; endl;<br>    }<br>    cout &lt;&lt; endl;<br>}</p>
<p>void test01()<br>{<br>    //插入<br>    map&lt;int, int&gt; m;<br>    //第一种插入方式<br>    m.insert(pair&lt;int, int&gt;(1, 10));<br>    //第二种插入方式<br>    m.insert(make_pair(2, 20));<br>    //第三种插入方式<br>    m.insert(map&lt;int, int&gt;::value_type(3, 30));<br>    //第四种插入方式<br>    m[4] = 40;<br>    printMap(m);</p>
<pre><code>//删除
m.erase(m.begin());
printMap(m);

m.erase(3);
printMap(m);

//清空
m.erase(m.begin(),m.end());
m.clear();
printMap(m);</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>总结：</p>
<p>map插入方式很多，记住其一即可<br>插入 — insert<br>删除 — erase<br>清空 — clear<br>3.9.5 map查找和统计<br>功能描述：</p>
<p>对map容器进行查找数据以及统计数据<br>函数原型：</p>
<p>find(key); //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();<br>count(key); //统计key的元素个数<br>示例：</p>
<p>#include <map></p>
<p>//查找和统计<br>void test01()<br>{<br>    map&lt;int, int&gt;m;<br>    m.insert(pair&lt;int, int&gt;(1, 10));<br>    m.insert(pair&lt;int, int&gt;(2, 20));<br>    m.insert(pair&lt;int, int&gt;(3, 30));</p>
<pre><code>//查找
map&lt;int, int&gt;::iterator pos = m.find(3);

if (pos != m.end())
&#123;
    cout &lt;&lt; &quot;找到了元素 key = &quot; &lt;&lt; (*pos).first &lt;&lt; &quot; value = &quot; &lt;&lt; (*pos).second &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;未找到元素&quot; &lt;&lt; endl;
&#125;

//统计
int num = m.count(3);
cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>总结：</p>
<p>查找 — find （返回的是迭代器）<br>统计 — count （对于map，结果为0或者1）<br>3.9.6 map容器排序<br>学习目标：</p>
<p>map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则<br>主要技术点:</p>
<p>利用仿函数，可以改变排序规则<br>示例：</p>
<p>#include <map></p>
<p>class MyCompare {<br>public:<br>    bool operator()(int v1, int v2) {<br>        return v1 &gt; v2;<br>    }<br>};</p>
<p>void test01()<br>{<br>    //默认从小到大排序<br>    //利用仿函数实现从大到小排序<br>    map&lt;int, int, MyCompare&gt; m;</p>
<pre><code>m.insert(make_pair(1, 10));
m.insert(make_pair(2, 20));
m.insert(make_pair(3, 30));
m.insert(make_pair(4, 40));
m.insert(make_pair(5, 50));

for (map&lt;int, int, MyCompare&gt;::iterator it = m.begin(); it != m.end(); it++) &#123;
    cout &lt;&lt; &quot;key:&quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value:&quot; &lt;&lt; it-&gt;second &lt;&lt; endl;
&#125;</code></pre>
<p>}<br>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>总结：</p>
<p>利用仿函数可以指定map容器的排序规则<br>对于自定义数据类型，map必须要指定排序规则,同set容器<br>3.10 案例-员工分组<br>3.10.1 案例描述<br>公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作<br>员工信息有: 姓名 工资组成；部门分为：策划、美术、研发<br>随机给10名员工分配部门和工资<br>通过multimap进行信息的插入 key(部门编号) value(员工)<br>分部门显示员工信息<br>3.10.2 实现步骤<br>创建10名员工，放到vector中<br>遍历vector容器，取出每个员工，进行随机分组<br>分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中<br>分部门显示员工信息<br>案例代码：</p>
<p>#include<iostream><br>using namespace std;<br>#include <vector><br>#include <string><br>#include <map><br>#include <ctime></p>
<p>/*</p>
<ul>
<li>公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</li>
<li>员工信息有: 姓名  工资组成；部门分为：策划、美术、研发</li>
<li>随机给10名员工分配部门和工资</li>
<li>通过multimap进行信息的插入  key(部门编号) value(员工)</li>
<li>分部门显示员工信息</li>
</ul>
<p>*/</p>
<p>#define CEHUA  0<br>#define MEISHU 1<br>#define YANFA  2</p>
<p>class Worker<br>{<br>public:<br>    string m_Name;<br>    int m_Salary;<br>};</p>
<p>void createWorker(vector<Worker>&amp;v)<br>{<br>    string nameSeed = “ABCDEFGHIJ”;<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        Worker worker;<br>        worker.m_Name = “员工”;<br>        worker.m_Name += nameSeed[i];</p>
<pre><code>    worker.m_Salary = rand() % 10000 + 10000; // 10000 ~ 19999
    //将员工放入到容器中
    v.push_back(worker);
&#125;</code></pre>
<p>}</p>
<p>//员工分组<br>void setGroup(vector<Worker>&amp;v,multimap&lt;int,Worker&gt;&amp;m)<br>{<br>    for (vector<Worker>::iterator it = v.begin(); it != v.end(); it++)<br>    {<br>        //产生随机部门编号<br>        int deptId = rand() % 3; // 0 1 2 </p>
<pre><code>    //将员工插入到分组中
    //key部门编号，value具体员工
    m.insert(make_pair(deptId, *it));
&#125;</code></pre>
<p>}</p>
<p>void showWorkerByGourp(multimap&lt;int,Worker&gt;&amp;m)<br>{<br>    // 0  A  B  C   1  D  E   2  F G …<br>    cout &lt;&lt; “策划部门：” &lt;&lt; endl;</p>
<pre><code>multimap&lt;int,Worker&gt;::iterator pos = m.find(CEHUA);
int count = m.count(CEHUA); // 统计具体人数
int index = 0;
for (; pos != m.end() &amp;&amp; index &lt; count; pos++ , index++)
&#123;
    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;
&#125;

cout &lt;&lt; &quot;----------------------&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;美术部门： &quot; &lt;&lt; endl;
pos = m.find(MEISHU);
count = m.count(MEISHU); // 统计具体人数
index = 0;
for (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++)
&#123;
    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;
&#125;

cout &lt;&lt; &quot;----------------------&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;研发部门： &quot; &lt;&lt; endl;
pos = m.find(YANFA);
count = m.count(YANFA); // 统计具体人数
index = 0;
for (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++)
&#123;
    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>srand((unsigned int)time(NULL));

//1、创建员工
vector&lt;Worker&gt;vWorker;
createWorker(vWorker);

//2、员工分组
multimap&lt;int, Worker&gt;mWorker;
setGroup(vWorker, mWorker);


//3、分组显示员工
showWorkerByGourp(mWorker);

测试
//for (vector&lt;Worker&gt;::iterator it = vWorker.begin(); it != vWorker.end(); it++)
//&#123;
//    cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; it-&gt;m_Salary &lt;&lt; endl;
//&#125;

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>总结：</p>
<p>当数据以键值对形式存在，可以考虑用map 或 multimap<br>4 STL- 函数对象<br>4.1 函数对象<br>4.1.1 函数对象概念<br>概念：</p>
<p>重载函数调用操作符的类，其对象常称为函数对象<br>函数对象使用重载的()时，行为类似函数调用，也叫仿函数<br>本质：</p>
<p>函数对象(仿函数)是一个类，不是一个函数</p>
<p>4.1.2 函数对象使用<br>特点：</p>
<p>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值<br>函数对象超出普通函数的概念，函数对象可以有自己的状态<br>函数对象可以作为参数传递<br>示例:</p>
<p>#include <string></p>
<p>//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值<br>class MyAdd<br>{<br>public :<br>    int operator()(int v1,int v2)<br>    {<br>        return v1 + v2;<br>    }<br>};</p>
<p>void test01()<br>{<br>    MyAdd myAdd;<br>    cout &lt;&lt; myAdd(10, 10) &lt;&lt; endl;<br>}</p>
<p>//2、函数对象可以有自己的状态<br>class MyPrint<br>{<br>public:<br>    MyPrint()<br>    {<br>        count = 0;<br>    }<br>    void operator()(string test)<br>    {<br>        cout &lt;&lt; test &lt;&lt; endl;<br>        count++; //统计使用次数<br>    }</p>
<pre><code>int count; //内部自己的状态</code></pre>
<p>};<br>void test02()<br>{<br>    MyPrint myPrint;<br>    myPrint(“hello world”);<br>    myPrint(“hello world”);<br>    myPrint(“hello world”);<br>    cout &lt;&lt; “myPrint调用次数为： “ &lt;&lt; myPrint.count &lt;&lt; endl;<br>}</p>
<p>//3、函数对象可以作为参数传递<br>void doPrint(MyPrint &amp;mp , string test)<br>{<br>    mp(test);<br>}</p>
<p>void test03()<br>{<br>    MyPrint myPrint;<br>    doPrint(myPrint, “Hello C++”);<br>}</p>
<p>int main() {</p>
<pre><code>//test01();
//test02();
test03();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>总结：</p>
<p>仿函数写法非常灵活，可以作为参数进行传递。<br>4.2 谓词<br>4.2.1 谓词概念<br>概念：</p>
<p>返回bool类型的仿函数称为谓词<br>如果operator()接受一个参数，那么叫做一元谓词<br>如果operator()接受两个参数，那么叫做二元谓词<br>4.2.2 一元谓词<br>示例：</p>
<p>#include <vector><br>#include <algorithm></p>
<p>//1.一元谓词<br>struct GreaterFive{<br>    bool operator()(int val) {<br>        return val &gt; 5;<br>    }<br>};</p>
<p>void test01() {</p>
<pre><code>vector&lt;int&gt; v;
for (int i = 0; i &lt; 10; i++)
&#123;
    v.push_back(i);
&#125;

vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());
if (it == v.end()) &#123;
    cout &lt;&lt; &quot;没找到!&quot; &lt;&lt; endl;
&#125;
else &#123;
    cout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>总结：参数只有一个的谓词，称为一元谓词</p>
<p>4.2.3 二元谓词<br>示例：</p>
<p>#include <vector><br>#include <algorithm><br>//二元谓词<br>class MyCompare<br>{<br>public:<br>    bool operator()(int num1, int num2)<br>    {<br>        return num1 &gt; num2;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v;<br>    v.push_back(10);<br>    v.push_back(40);<br>    v.push_back(20);<br>    v.push_back(30);<br>    v.push_back(50);</p>
<pre><code>//默认从小到大
sort(v.begin(), v.end());
for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)
&#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;
cout &lt;&lt; &quot;----------------------------&quot; &lt;&lt; endl;

//使用函数对象改变算法策略，排序从大到小
sort(v.begin(), v.end(), MyCompare());
for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)
&#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>总结：参数只有两个的谓词，称为二元谓词</p>
<p>4.3 内建函数对象<br>4.3.1 内建函数对象意义<br>概念：</p>
<p>STL内建了一些函数对象<br>分类:</p>
<p>算术仿函数</p>
<p>关系仿函数</p>
<p>逻辑仿函数</p>
<p>用法：</p>
<p>这些仿函数所产生的对象，用法和一般函数完全相同<br>使用内建函数对象，需要引入头文件 #include<functional><br>4.3.2 算术仿函数<br>功能描述：</p>
<p>实现四则运算<br>其中negate是一元运算，其他都是二元运算<br>仿函数原型：</p>
<p>template<class T> T plus<T> //加法仿函数<br>template<class T> T minus<T> //减法仿函数<br>template<class T> T multiplies<T> //乘法仿函数<br>template<class T> T divides<T> //除法仿函数<br>template<class T> T modulus<T> //取模仿函数<br>template<class T> T negate<T> //取反仿函数<br>示例：</p>
<p>#include <functional><br>//negate<br>void test01()<br>{<br>    negate<int> n;<br>    cout &lt;&lt; n(50) &lt;&lt; endl;<br>}</p>
<p>//plus<br>void test02()<br>{<br>    plus<int> p;<br>    cout &lt;&lt; p(10, 20) &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>test01();
test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>总结：使用内建函数对象时，需要引入头文件 #include <functional></p>
<p>4.3.3 关系仿函数<br>功能描述：</p>
<p>实现关系对比<br>仿函数原型：</p>
<p>template<class T> bool equal_to<T> //等于<br>template<class T> bool not_equal_to<T> //不等于<br>template<class T> bool greater<T> //大于<br>template<class T> bool greater_equal<T> //大于等于<br>template<class T> bool less<T> //小于<br>template<class T> bool less_equal<T> //小于等于<br>示例：</p>
<p>#include <functional><br>#include <vector><br>#include <algorithm></p>
<p>class MyCompare<br>{<br>public:<br>    bool operator()(int v1,int v2)<br>    {<br>        return v1 &gt; v2;<br>    }<br>};<br>void test01()<br>{<br>    vector<int> v;</p>
<pre><code>v.push_back(10);
v.push_back(30);
v.push_back(50);
v.push_back(40);
v.push_back(20);

for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;

//自己实现仿函数
//sort(v.begin(), v.end(), MyCompare());
//STL内建仿函数  大于仿函数
sort(v.begin(), v.end(), greater&lt;int&gt;());

for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>总结：关系仿函数中最常用的就是greater&lt;&gt;大于</p>
<p>4.3.4 逻辑仿函数<br>功能描述：</p>
<p>实现逻辑运算<br>函数原型：</p>
<p>template<class T> bool logical_and<T> //逻辑与<br>template<class T> bool logical_or<T> //逻辑或<br>template<class T> bool logical_not<T> //逻辑非<br>示例：</p>
<p>#include <vector><br>#include <functional><br>#include <algorithm><br>void test01()<br>{<br>    vector<bool> v;<br>    v.push_back(true);<br>    v.push_back(false);<br>    v.push_back(true);<br>    v.push_back(false);</p>
<pre><code>for (vector&lt;bool&gt;::iterator it = v.begin();it!= v.end();it++)
&#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;

//逻辑非  将v容器搬运到v2中，并执行逻辑非运算
vector&lt;bool&gt; v2;
v2.resize(v.size());
transform(v.begin(), v.end(),  v2.begin(), logical_not&lt;bool&gt;());
for (vector&lt;bool&gt;::iterator it = v2.begin(); it != v2.end(); it++)
&#123;
    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
&#125;
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>总结：逻辑仿函数实际应用较少，了解即可</p>
<p>5 STL- 常用算法<br>概述:</p>
<p>算法主要是由头文件<algorithm> <functional> <numeric>组成。</p>
<p><algorithm>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</p>
<p><numeric>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</p>
<p><functional>定义了一些模板类,用以声明函数对象。</p>
<p>5.1 常用遍历算法<br>学习目标：</p>
<p>掌握常用的遍历算法<br>算法简介：</p>
<p>for_each //遍历容器<br>transform //搬运容器到另一个容器中<br>5.1.1 for_each<br>功能描述：</p>
<p>实现遍历容器<br>函数原型：</p>
<p>for_each(iterator beg, iterator end, _func);</p>
<p>// 遍历算法 遍历容器元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _func 函数或者函数对象</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>//普通函数<br>void print01(int val)<br>{<br>    cout &lt;&lt; val &lt;&lt; “ “;<br>}<br>//函数对象<br>class print02<br>{<br> public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>//for_each算法基本用法<br>void test01() {</p>
<pre><code>vector&lt;int&gt; v;
for (int i = 0; i &lt; 10; i++) 
&#123;
    v.push_back(i);
&#125;

//遍历算法
for_each(v.begin(), v.end(), print01);
cout &lt;&lt; endl;

for_each(v.begin(), v.end(), print02());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br><strong>总结：</strong>for_each在实际开发中是最常用遍历算法，需要熟练掌握</p>
<p>5.1.2 transform<br>功能描述：</p>
<p>搬运容器到另一个容器中<br>函数原型：</p>
<p>transform(iterator beg1, iterator end1, iterator beg2, _func);<br>//beg1 源容器开始迭代器</p>
<p>//end1 源容器结束迭代器</p>
<p>//beg2 目标容器开始迭代器</p>
<p>//_func 函数或者函数对象</p>
<p>示例：</p>
<p>#include<vector><br>#include<algorithm></p>
<p>//常用遍历算法  搬运 transform</p>
<p>class TransForm<br>{<br>public:<br>    int operator()(int val)<br>    {<br>        return val;<br>    }</p>
<p>};</p>
<p>class MyPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int>v;<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        v.push_back(i);<br>    }</p>
<pre><code>vector&lt;int&gt;vTarget; //目标容器

vTarget.resize(v.size()); // 目标容器需要提前开辟空间

transform(v.begin(), v.end(), vTarget.begin(), TransForm());

for_each(vTarget.begin(), vTarget.end(), MyPrint());</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>总结： 搬运的目标容器必须要提前开辟空间，否则无法正常搬运</p>
<p>5.2 常用查找算法<br>学习目标：</p>
<p>掌握常用的查找算法<br>算法简介：</p>
<p>find //查找元素<br>find_if //按条件查找元素<br>adjacent_find //查找相邻重复元素<br>binary_search //二分查找法<br>count //统计元素个数<br>count_if //按条件统计元素个数<br>5.2.1 find<br>功能描述：</p>
<p>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()<br>函数原型：</p>
<p>find(iterator beg, iterator end, value);</p>
<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 查找的元素</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector><br>#include <string><br>void test01() {</p>
<pre><code>vector&lt;int&gt; v;
for (int i = 0; i &lt; 10; i++) &#123;
    v.push_back(i + 1);
&#125;
//查找容器中是否有 5 这个元素
vector&lt;int&gt;::iterator it = find(v.begin(), v.end(), 5);
if (it == v.end()) 
&#123;
    cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;
&#125;
else 
&#123;
    cout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>class Person {<br>public:<br>    Person(string name, int age)<br>    {<br>        this-&gt;m_Name = name;<br>        this-&gt;m_Age = age;<br>    }<br>    //重载==<br>    bool operator==(const Person&amp; p)<br>    {<br>        if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)<br>        {<br>            return true;<br>        }<br>        return false;<br>    }</p>
<p>public:<br>    string m_Name;<br>    int m_Age;<br>};</p>
<p>void test02() {</p>
<pre><code>vector&lt;Person&gt; v;

//创建数据
Person p1(&quot;aaa&quot;, 10);
Person p2(&quot;bbb&quot;, 20);
Person p3(&quot;ccc&quot;, 30);
Person p4(&quot;ddd&quot;, 40);

v.push_back(p1);
v.push_back(p2);
v.push_back(p3);
v.push_back(p4);

vector&lt;Person&gt;::iterator it = find(v.begin(), v.end(), p2);
if (it == v.end()) 
&#123;
    cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;
&#125;
else 
&#123;
    cout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;
&#125;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>总结： 利用find可以在容器中找指定的元素，返回值是迭代器</p>
<p>5.2.2 find_if<br>功能描述：</p>
<p>按条件查找元素<br>函数原型：</p>
<p>find_if(iterator beg, iterator end, _Pred);</p>
<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _Pred 函数或者谓词（返回bool类型的仿函数）</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector><br>#include <string></p>
<p>//内置数据类型<br>class GreaterFive<br>{<br>public:<br>    bool operator()(int val)<br>    {<br>        return val &gt; 5;<br>    }<br>};</p>
<p>void test01() {</p>
<pre><code>vector&lt;int&gt; v;
for (int i = 0; i &lt; 10; i++) &#123;
    v.push_back(i + 1);
&#125;

vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());
if (it == v.end()) &#123;
    cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;
&#125;
else &#123;
    cout &lt;&lt; &quot;找到大于5的数字:&quot; &lt;&lt; *it &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>//自定义数据类型<br>class Person {<br>public:<br>    Person(string name, int age)<br>    {<br>        this-&gt;m_Name = name;<br>        this-&gt;m_Age = age;<br>    }<br>public:<br>    string m_Name;<br>    int m_Age;<br>};</p>
<p>class Greater20<br>{<br>public:<br>    bool operator()(Person &amp;p)<br>    {<br>        return p.m_Age &gt; 20;<br>    }</p>
<p>};</p>
<p>void test02() {</p>
<pre><code>vector&lt;Person&gt; v;

//创建数据
Person p1(&quot;aaa&quot;, 10);
Person p2(&quot;bbb&quot;, 20);
Person p3(&quot;ccc&quot;, 30);
Person p4(&quot;ddd&quot;, 40);

v.push_back(p1);
v.push_back(p2);
v.push_back(p3);
v.push_back(p4);

vector&lt;Person&gt;::iterator it = find_if(v.begin(), v.end(), Greater20());
if (it == v.end())
&#123;
    cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>//test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>总结：find_if按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p>
<p>5.2.3 adjacent_find<br>功能描述：</p>
<p>查找相邻重复元素<br>函数原型：</p>
<p>adjacent_find(iterator beg, iterator end);</p>
<p>// 查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>​</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>void test01()<br>{<br>    vector<int> v;<br>    v.push_back(1);<br>    v.push_back(2);<br>    v.push_back(5);<br>    v.push_back(2);<br>    v.push_back(4);<br>    v.push_back(4);<br>    v.push_back(3);</p>
<pre><code>//查找相邻重复元素
vector&lt;int&gt;::iterator it = adjacent_find(v.begin(), v.end());
if (it == v.end()) &#123;
    cout &lt;&lt; &quot;找不到!&quot; &lt;&lt; endl;
&#125;
else &#123;
    cout &lt;&lt; &quot;找到相邻重复元素为:&quot; &lt;&lt; *it &lt;&lt; endl;
&#125;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法</p>
<p>5.2.4 binary_search<br>功能描述：</p>
<p>查找指定元素是否存在<br>函数原型：</p>
<p>bool binary_search(iterator beg, iterator end, value);</p>
<p>// 查找指定的元素，查到 返回true 否则false</p>
<p>// 注意: 在无序序列中不可用</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 查找的元素</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>void test01()<br>{<br>    vector<int>v;</p>
<pre><code>for (int i = 0; i &lt; 10; i++)
&#123;
    v.push_back(i);
&#125;
//二分查找
bool ret = binary_search(v.begin(), v.end(),2);
if (ret)
&#123;
    cout &lt;&lt; &quot;找到了&quot; &lt;&lt; endl;
&#125;
else
&#123;
    cout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl;
&#125;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br><strong>总结：</strong>二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p>
<p>5.2.5 count<br>功能描述：</p>
<p>统计元素个数<br>函数原型：</p>
<p>count(iterator beg, iterator end, value);</p>
<p>// 统计元素出现次数</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 统计的元素</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>//内置数据类型<br>void test01()<br>{<br>    vector<int> v;<br>    v.push_back(1);<br>    v.push_back(2);<br>    v.push_back(4);<br>    v.push_back(5);<br>    v.push_back(3);<br>    v.push_back(4);<br>    v.push_back(4);</p>
<pre><code>int num = count(v.begin(), v.end(), 4);

cout &lt;&lt; &quot;4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;</code></pre>
<p>}</p>
<p>//自定义数据类型<br>class Person<br>{<br>public:<br>    Person(string name, int age)<br>    {<br>        this-&gt;m_Name = name;<br>        this-&gt;m_Age = age;<br>    }<br>    bool operator==(const Person &amp; p)<br>    {<br>        if (this-&gt;m_Age == p.m_Age)<br>        {<br>            return true;<br>        }<br>        else<br>        {<br>            return false;<br>        }<br>    }<br>    string m_Name;<br>    int m_Age;<br>};</p>
<p>void test02()<br>{<br>    vector<Person> v;</p>
<pre><code>Person p1(&quot;刘备&quot;, 35);
Person p2(&quot;关羽&quot;, 35);
Person p3(&quot;张飞&quot;, 35);
Person p4(&quot;赵云&quot;, 30);
Person p5(&quot;曹操&quot;, 25);

v.push_back(p1);
v.push_back(p2);
v.push_back(p3);
v.push_back(p4);
v.push_back(p5);

Person p(&quot;诸葛亮&quot;,35);

int num = count(v.begin(), v.end(), p);
cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;</code></pre>
<p>}<br>int main() {</p>
<pre><code>//test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>总结： 统计自定义数据类型时候，需要配合重载 operator==</p>
<p>5.2.6 count_if<br>功能描述：</p>
<p>按条件统计元素个数<br>函数原型：</p>
<p>count_if(iterator beg, iterator end, _Pred);</p>
<p>// 按条件统计元素出现次数</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _Pred 谓词</p>
<p>​</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>class Greater4<br>{<br>public:<br>    bool operator()(int val)<br>    {<br>        return val &gt;= 4;<br>    }<br>};</p>
<p>//内置数据类型<br>void test01()<br>{<br>    vector<int> v;<br>    v.push_back(1);<br>    v.push_back(2);<br>    v.push_back(4);<br>    v.push_back(5);<br>    v.push_back(3);<br>    v.push_back(4);<br>    v.push_back(4);</p>
<pre><code>int num = count_if(v.begin(), v.end(), Greater4());

cout &lt;&lt; &quot;大于4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;</code></pre>
<p>}</p>
<p>//自定义数据类型<br>class Person<br>{<br>public:<br>    Person(string name, int age)<br>    {<br>        this-&gt;m_Name = name;<br>        this-&gt;m_Age = age;<br>    }</p>
<pre><code>string m_Name;
int m_Age;</code></pre>
<p>};</p>
<p>class AgeLess35<br>{<br>public:<br>    bool operator()(const Person &amp;p)<br>    {<br>        return p.m_Age &lt; 35;<br>    }<br>};<br>void test02()<br>{<br>    vector<Person> v;</p>
<pre><code>Person p1(&quot;刘备&quot;, 35);
Person p2(&quot;关羽&quot;, 35);
Person p3(&quot;张飞&quot;, 35);
Person p4(&quot;赵云&quot;, 30);
Person p5(&quot;曹操&quot;, 25);

v.push_back(p1);
v.push_back(p2);
v.push_back(p3);
v.push_back(p4);
v.push_back(p5);

int num = count_if(v.begin(), v.end(), AgeLess35());
cout &lt;&lt; &quot;小于35岁的个数：&quot; &lt;&lt; num &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>//test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br><strong>总结：</strong>按值统计用count，按条件统计用count_if</p>
<p>5.3 常用排序算法<br>学习目标：</p>
<p>掌握常用的排序算法<br>算法简介：</p>
<p>sort //对容器内元素进行排序<br>random_shuffle //洗牌 指定范围内的元素随机调整次序<br>merge // 容器元素合并，并存储到另一容器中<br>reverse // 反转指定范围的元素<br>5.3.1 sort<br>功能描述：</p>
<p>对容器内元素进行排序<br>函数原型：</p>
<p>sort(iterator beg, iterator end, _Pred);</p>
<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _Pred 谓词</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>void myPrint(int val)<br>{<br>    cout &lt;&lt; val &lt;&lt; “ “;<br>}</p>
<p>void test01() {<br>    vector<int> v;<br>    v.push_back(10);<br>    v.push_back(30);<br>    v.push_back(50);<br>    v.push_back(20);<br>    v.push_back(40);</p>
<pre><code>//sort默认从小到大排序
sort(v.begin(), v.end());
for_each(v.begin(), v.end(), myPrint);
cout &lt;&lt; endl;

//从大到小排序
sort(v.begin(), v.end(), greater&lt;int&gt;());
for_each(v.begin(), v.end(), myPrint);
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br><strong>总结：</strong>sort属于开发中最常用的算法之一，需熟练掌握</p>
<p>5.3.2 random_shuffle<br>功能描述：</p>
<p>洗牌 指定范围内的元素随机调整次序<br>函数原型：</p>
<p>random_shuffle(iterator beg, iterator end);</p>
<p>// 指定范围内的元素随机调整次序</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>​</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector><br>#include <ctime></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    srand((unsigned int)time(NULL));<br>    vector<int> v;<br>    for(int i = 0 ; i &lt; 10;i++)<br>    {<br>        v.push_back(i);<br>    }<br>    for_each(v.begin(), v.end(), myPrint());<br>    cout &lt;&lt; endl;</p>
<pre><code>//打乱顺序
random_shuffle(v.begin(), v.end());
for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br><strong>总结：</strong>random_shuffle洗牌算法比较实用，使用时记得加随机数种子</p>
<p>5.3.3 merge<br>功能描述：</p>
<p>两个容器元素合并，并存储到另一容器中<br>函数原型：</p>
<p>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</p>
<p>// 容器元素合并，并存储到另一容器中</p>
<p>// 注意: 两个容器必须是有序的</p>
<p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p>
<p>​</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v1;<br>    vector<int> v2;<br>    for (int i = 0; i &lt; 10 ; i++)<br>    {<br>        v1.push_back(i);<br>        v2.push_back(i + 1);<br>    }</p>
<pre><code>vector&lt;int&gt; vtarget;
//目标容器需要提前开辟空间
vtarget.resize(v1.size() + v2.size());
//合并  需要两个有序序列
merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vtarget.begin());
for_each(vtarget.begin(), vtarget.end(), myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br><strong>总结：</strong>merge合并的两个容器必须的有序序列</p>
<p>5.3.4 reverse<br>功能描述：</p>
<p>将容器内元素进行反转<br>函数原型：</p>
<p>reverse(iterator beg, iterator end);</p>
<p>// 反转指定范围的元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>​</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v;<br>    v.push_back(10);<br>    v.push_back(30);<br>    v.push_back(50);<br>    v.push_back(20);<br>    v.push_back(40);</p>
<pre><code>cout &lt;&lt; &quot;反转前： &quot; &lt;&lt; endl;
for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;

cout &lt;&lt; &quot;反转后： &quot; &lt;&lt; endl;

reverse(v.begin(), v.end());
for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br><strong>总结：</strong>reverse反转区间内元素，面试题可能涉及到</p>
<p>5.4 常用拷贝和替换算法<br>学习目标：</p>
<p>掌握常用的拷贝和替换算法<br>算法简介：</p>
<p>copy // 容器内指定范围的元素拷贝到另一容器中<br>replace // 将容器内指定范围的旧元素修改为新元素<br>replace_if // 容器内指定范围满足条件的元素替换为新元素<br>swap // 互换两个容器的元素<br>5.4.1 copy<br>功能描述：</p>
<p>容器内指定范围的元素拷贝到另一容器中<br>函数原型：</p>
<p>copy(iterator beg, iterator end, iterator dest);</p>
<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// dest 目标起始迭代器</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v1;<br>    for (int i = 0; i &lt; 10; i++) {<br>        v1.push_back(i + 1);<br>    }<br>    vector<int> v2;<br>    v2.resize(v1.size());<br>    copy(v1.begin(), v1.end(), v2.begin());</p>
<pre><code>for_each(v2.begin(), v2.end(), myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br><strong>总结：</strong>利用copy算法在拷贝时，目标容器记得提前开辟空间</p>
<p>5.4.2 replace<br>功能描述：</p>
<p>将容器内指定范围的旧元素修改为新元素<br>函数原型：</p>
<p>replace(iterator beg, iterator end, oldvalue, newvalue);</p>
<p>// 将区间内旧元素 替换成 新元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// oldvalue 旧元素</p>
<p>// newvalue 新元素</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v;<br>    v.push_back(20);<br>    v.push_back(30);<br>    v.push_back(20);<br>    v.push_back(40);<br>    v.push_back(50);<br>    v.push_back(10);<br>    v.push_back(20);</p>
<pre><code>cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;
for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;

//将容器中的20 替换成 2000
cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;
replace(v.begin(), v.end(), 20,2000);
for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br><strong>总结：</strong>replace会替换区间内满足条件的元素</p>
<p>5.4.3 replace_if<br>功能描述:</p>
<p>将区间内满足条件的元素，替换成指定元素<br>函数原型：</p>
<p>replace_if(iterator beg, iterator end, _pred, newvalue);</p>
<p>// 按条件替换元素，满足条件的替换成指定元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _pred 谓词</p>
<p>// newvalue 替换的新元素</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>class ReplaceGreater30<br>{<br>public:<br>    bool operator()(int val)<br>    {<br>        return val &gt;= 30;<br>    }</p>
<p>};</p>
<p>void test01()<br>{<br>    vector<int> v;<br>    v.push_back(20);<br>    v.push_back(30);<br>    v.push_back(20);<br>    v.push_back(40);<br>    v.push_back(50);<br>    v.push_back(10);<br>    v.push_back(20);</p>
<pre><code>cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;
for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;

//将容器中大于等于的30 替换成 3000
cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;
replace_if(v.begin(), v.end(), ReplaceGreater30(), 3000);
for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br><strong>总结：</strong>replace_if按条件查找，可以利用仿函数灵活筛选满足的条件</p>
<p>5.4.4 swap<br>功能描述：</p>
<p>互换两个容器的元素<br>函数原型：</p>
<p>swap(container c1, container c2);</p>
<p>// 互换两个容器的元素</p>
<p>// c1容器1</p>
<p>// c2容器2</p>
<p>​</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v1;<br>    vector<int> v2;<br>    for (int i = 0; i &lt; 10; i++) {<br>        v1.push_back(i);<br>        v2.push_back(i+100);<br>    }</p>
<pre><code>cout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl;
for_each(v1.begin(), v1.end(), myPrint());
cout &lt;&lt; endl;
for_each(v2.begin(), v2.end(), myPrint());
cout &lt;&lt; endl;

cout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl;
swap(v1, v2);
for_each(v1.begin(), v1.end(), myPrint());
cout &lt;&lt; endl;
for_each(v2.begin(), v2.end(), myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br><strong>总结：</strong>swap交换容器时，注意交换的容器要同种类型</p>
<p>5.5 常用算术生成算法<br>学习目标：</p>
<p>掌握常用的算术生成算法<br>注意：</p>
<p>算术生成算法属于小型算法，使用时包含的头文件为 #include <numeric><br>算法简介：</p>
<p>accumulate // 计算容器元素累计总和</p>
<p>fill // 向容器中添加元素</p>
<p>​</p>
<p>5.5.1 accumulate<br>功能描述：</p>
<p>计算区间内 容器元素累计总和<br>函数原型：</p>
<p>accumulate(iterator beg, iterator end, value);</p>
<p>// 计算容器元素累计总和</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 起始值</p>
<p>示例：</p>
<p>#include <numeric><br>#include <vector><br>void test01()<br>{<br>    vector<int> v;<br>    for (int i = 0; i &lt;= 100; i++) {<br>        v.push_back(i);<br>    }</p>
<pre><code>int total = accumulate(v.begin(), v.end(), 0);

cout &lt;&lt; &quot;total = &quot; &lt;&lt; total &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br><strong>总结：</strong>accumulate使用时头文件注意是 numeric，这个算法很实用</p>
<p>5.5.2 fill<br>功能描述：</p>
<p>向容器中填充指定的元素<br>函数原型：</p>
<p>fill(iterator beg, iterator end, value);</p>
<p>// 向容器中填充元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 填充的值</p>
<p>示例：</p>
<p>#include <numeric><br>#include <vector><br>#include <algorithm></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{</p>
<pre><code>vector&lt;int&gt; v;
v.resize(10);
//填充
fill(v.begin(), v.end(), 100);

for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br><strong>总结：</strong>利用fill可以将容器区间内元素填充为 指定的值</p>
<p>5.6 常用集合算法<br>学习目标：</p>
<p>掌握常用的集合算法<br>算法简介：</p>
<p>set_intersection // 求两个容器的交集</p>
<p>set_union // 求两个容器的并集</p>
<p>set_difference // 求两个容器的差集</p>
<p>​</p>
<p>5.6.1 set_intersection<br>功能描述：</p>
<p>求两个容器的交集<br>函数原型：</p>
<p>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</p>
<p>// 求两个集合的交集</p>
<p>// 注意:两个集合必须是有序序列</p>
<p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p>
<p>示例：</p>
<p>#include <vector><br>#include <algorithm></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v1;<br>    vector<int> v2;<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        v1.push_back(i);<br>        v2.push_back(i+5);<br>    }</p>
<pre><code>vector&lt;int&gt; vTarget;
//取两个里面较小的值给目标容器开辟空间
vTarget.resize(min(v1.size(), v2.size()));

//返回目标容器的最后一个元素的迭代器地址
vector&lt;int&gt;::iterator itEnd = 
    set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());

for_each(vTarget.begin(), itEnd, myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>总结：</p>
<p>求交集的两个集合必须的有序序列<br>目标容器开辟空间需要从两个容器中取小值<br>set_intersection返回值既是交集中最后一个元素的位置<br>5.6.2 set_union<br>功能描述：</p>
<p>求两个集合的并集<br>函数原型：</p>
<p>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</p>
<p>// 求两个集合的并集</p>
<p>// 注意:两个集合必须是有序序列</p>
<p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p>
<p>​</p>
<p>示例：</p>
<p>#include <vector><br>#include <algorithm></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v1;<br>    vector<int> v2;<br>    for (int i = 0; i &lt; 10; i++) {<br>        v1.push_back(i);<br>        v2.push_back(i+5);<br>    }</p>
<pre><code>vector&lt;int&gt; vTarget;
//取两个容器的和给目标容器开辟空间
vTarget.resize(v1.size() + v2.size());

//返回目标容器的最后一个元素的迭代器地址
vector&lt;int&gt;::iterator itEnd = 
    set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());

for_each(vTarget.begin(), itEnd, myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>总结：</p>
<p>求并集的两个集合必须的有序序列<br>目标容器开辟空间需要两个容器相加<br>set_union返回值既是并集中最后一个元素的位置<br>5.6.3 set_difference<br>功能描述：</p>
<p>求两个集合的差集<br>函数原型：</p>
<p>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</p>
<p>// 求两个集合的差集</p>
<p>// 注意:两个集合必须是有序序列</p>
<p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p>
<p>​</p>
<p>示例：</p>
<p>#include <vector><br>#include <algorithm></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v1;<br>    vector<int> v2;<br>    for (int i = 0; i &lt; 10; i++) {<br>        v1.push_back(i);<br>        v2.push_back(i+5);<br>    }</p>
<pre><code>vector&lt;int&gt; vTarget;
//取两个里面较大的值给目标容器开辟空间
vTarget.resize( max(v1.size() , v2.size()));

//返回目标容器的最后一个元素的迭代器地址
cout &lt;&lt; &quot;v1与v2的差集为： &quot; &lt;&lt; endl;
vector&lt;int&gt;::iterator itEnd = 
    set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());
for_each(vTarget.begin(), itEnd, myPrint());
cout &lt;&lt; endl;


cout &lt;&lt; &quot;v2与v1的差集为： &quot; &lt;&lt; endl;
itEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());
for_each(vTarget.begin(), itEnd, myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>总结：</p>
<p>求差集的两个集合必须的有序序列</p>
<p>目标容器开辟空间需要从两个容器取较大值<br>id test01()<br>{<br>vector v1;<br>for (int i = 0; i &lt; 10; i++) {<br>v1.push_back(i + 1);<br>}<br>vector v2;<br>v2.resize(v1.size());<br>copy(v1.begin(), v1.end(), v2.begin());</p>
<p>for_each(v2.begin(), v2.end(), myPrint());<br>cout &lt;&lt; endl;<br>}</p>
<p>int main() {<br>test01();</p>
<p>system(“pause”);</p>
<p>return 0;<br>1<br>2<br>3<br>4<br>5<br>}</p>
<p><strong>总结：</strong>利用copy算法在拷贝时，目标容器记得提前开辟空间</p>
<h4 id="5-4-2-replace"><a href="#5-4-2-replace" class="headerlink" title="5.4.2 replace"></a>5.4.2 replace</h4><p><strong>功能描述：</strong></p>
<ul>
<li>将容器内指定范围的旧元素修改为新元素</li>
</ul>
<p><strong>函数原型：</strong></p>
<ul>
<li><p><code>replace(iterator beg, iterator end, oldvalue, newvalue);  </code></p>
<p>// 将区间内旧元素 替换成 新元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// oldvalue 旧元素</p>
<p>// newvalue 新元素</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<p>```c++<br>#include <algorithm><br>#include <vector></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v;<br>    v.push_back(20);<br>    v.push_back(30);<br>    v.push_back(20);<br>    v.push_back(40);<br>    v.push_back(50);<br>    v.push_back(10);<br>    v.push_back(20);</p>
<pre><code>cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;
for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;

//将容器中的20 替换成 2000
cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;
replace(v.begin(), v.end(), 20,2000);
for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br><strong>总结：</strong>replace会替换区间内满足条件的元素</p>
<p>5.4.3 replace_if<br>功能描述:</p>
<p>将区间内满足条件的元素，替换成指定元素<br>函数原型：</p>
<p>replace_if(iterator beg, iterator end, _pred, newvalue);</p>
<p>// 按条件替换元素，满足条件的替换成指定元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// _pred 谓词</p>
<p>// newvalue 替换的新元素</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>class ReplaceGreater30<br>{<br>public:<br>    bool operator()(int val)<br>    {<br>        return val &gt;= 30;<br>    }</p>
<p>};</p>
<p>void test01()<br>{<br>    vector<int> v;<br>    v.push_back(20);<br>    v.push_back(30);<br>    v.push_back(20);<br>    v.push_back(40);<br>    v.push_back(50);<br>    v.push_back(10);<br>    v.push_back(20);</p>
<pre><code>cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;
for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;

//将容器中大于等于的30 替换成 3000
cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;
replace_if(v.begin(), v.end(), ReplaceGreater30(), 3000);
for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br><strong>总结：</strong>replace_if按条件查找，可以利用仿函数灵活筛选满足的条件</p>
<p>5.4.4 swap<br>功能描述：</p>
<p>互换两个容器的元素<br>函数原型：</p>
<p>swap(container c1, container c2);</p>
<p>// 互换两个容器的元素</p>
<p>// c1容器1</p>
<p>// c2容器2</p>
<p>​</p>
<p>示例：</p>
<p>#include <algorithm><br>#include <vector></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v1;<br>    vector<int> v2;<br>    for (int i = 0; i &lt; 10; i++) {<br>        v1.push_back(i);<br>        v2.push_back(i+100);<br>    }</p>
<pre><code>cout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl;
for_each(v1.begin(), v1.end(), myPrint());
cout &lt;&lt; endl;
for_each(v2.begin(), v2.end(), myPrint());
cout &lt;&lt; endl;

cout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl;
swap(v1, v2);
for_each(v1.begin(), v1.end(), myPrint());
cout &lt;&lt; endl;
for_each(v2.begin(), v2.end(), myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br><strong>总结：</strong>swap交换容器时，注意交换的容器要同种类型</p>
<p>5.5 常用算术生成算法<br>学习目标：</p>
<p>掌握常用的算术生成算法<br>注意：</p>
<p>算术生成算法属于小型算法，使用时包含的头文件为 #include <numeric><br>算法简介：</p>
<p>accumulate // 计算容器元素累计总和</p>
<p>fill // 向容器中添加元素</p>
<p>​</p>
<p>5.5.1 accumulate<br>功能描述：</p>
<p>计算区间内 容器元素累计总和<br>函数原型：</p>
<p>accumulate(iterator beg, iterator end, value);</p>
<p>// 计算容器元素累计总和</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 起始值</p>
<p>示例：</p>
<p>#include <numeric><br>#include <vector><br>void test01()<br>{<br>    vector<int> v;<br>    for (int i = 0; i &lt;= 100; i++) {<br>        v.push_back(i);<br>    }</p>
<pre><code>int total = accumulate(v.begin(), v.end(), 0);

cout &lt;&lt; &quot;total = &quot; &lt;&lt; total &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br><strong>总结：</strong>accumulate使用时头文件注意是 numeric，这个算法很实用</p>
<p>5.5.2 fill<br>功能描述：</p>
<p>向容器中填充指定的元素<br>函数原型：</p>
<p>fill(iterator beg, iterator end, value);</p>
<p>// 向容器中填充元素</p>
<p>// beg 开始迭代器</p>
<p>// end 结束迭代器</p>
<p>// value 填充的值</p>
<p>示例：</p>
<p>#include <numeric><br>#include <vector><br>#include <algorithm></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{</p>
<pre><code>vector&lt;int&gt; v;
v.resize(10);
//填充
fill(v.begin(), v.end(), 100);

for_each(v.begin(), v.end(), myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br><strong>总结：</strong>利用fill可以将容器区间内元素填充为 指定的值</p>
<p>5.6 常用集合算法<br>学习目标：</p>
<p>掌握常用的集合算法<br>算法简介：</p>
<p>set_intersection // 求两个容器的交集</p>
<p>set_union // 求两个容器的并集</p>
<p>set_difference // 求两个容器的差集</p>
<p>​</p>
<p>5.6.1 set_intersection<br>功能描述：</p>
<p>求两个容器的交集<br>函数原型：</p>
<p>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</p>
<p>// 求两个集合的交集</p>
<p>// 注意:两个集合必须是有序序列</p>
<p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p>
<p>示例：</p>
<p>#include <vector><br>#include <algorithm></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v1;<br>    vector<int> v2;<br>    for (int i = 0; i &lt; 10; i++)<br>    {<br>        v1.push_back(i);<br>        v2.push_back(i+5);<br>    }</p>
<pre><code>vector&lt;int&gt; vTarget;
//取两个里面较小的值给目标容器开辟空间
vTarget.resize(min(v1.size(), v2.size()));

//返回目标容器的最后一个元素的迭代器地址
vector&lt;int&gt;::iterator itEnd = 
    set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());

for_each(vTarget.begin(), itEnd, myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>总结：</p>
<p>求交集的两个集合必须的有序序列<br>目标容器开辟空间需要从两个容器中取小值<br>set_intersection返回值既是交集中最后一个元素的位置<br>5.6.2 set_union<br>功能描述：</p>
<p>求两个集合的并集<br>函数原型：</p>
<p>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</p>
<p>// 求两个集合的并集</p>
<p>// 注意:两个集合必须是有序序列</p>
<p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p>
<p>​</p>
<p>示例：</p>
<p>#include <vector><br>#include <algorithm></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v1;<br>    vector<int> v2;<br>    for (int i = 0; i &lt; 10; i++) {<br>        v1.push_back(i);<br>        v2.push_back(i+5);<br>    }</p>
<pre><code>vector&lt;int&gt; vTarget;
//取两个容器的和给目标容器开辟空间
vTarget.resize(v1.size() + v2.size());

//返回目标容器的最后一个元素的迭代器地址
vector&lt;int&gt;::iterator itEnd = 
    set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());

for_each(vTarget.begin(), itEnd, myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>总结：</p>
<p>求并集的两个集合必须的有序序列<br>目标容器开辟空间需要两个容器相加<br>set_union返回值既是并集中最后一个元素的位置<br>5.6.3 set_difference<br>功能描述：</p>
<p>求两个集合的差集<br>函数原型：</p>
<p>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</p>
<p>// 求两个集合的差集</p>
<p>// 注意:两个集合必须是有序序列</p>
<p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p>
<p>​</p>
<p>示例：</p>
<p>#include <vector><br>#include <algorithm></p>
<p>class myPrint<br>{<br>public:<br>    void operator()(int val)<br>    {<br>        cout &lt;&lt; val &lt;&lt; “ “;<br>    }<br>};</p>
<p>void test01()<br>{<br>    vector<int> v1;<br>    vector<int> v2;<br>    for (int i = 0; i &lt; 10; i++) {<br>        v1.push_back(i);<br>        v2.push_back(i+5);<br>    }</p>
<pre><code>vector&lt;int&gt; vTarget;
//取两个里面较大的值给目标容器开辟空间
vTarget.resize( max(v1.size() , v2.size()));

//返回目标容器的最后一个元素的迭代器地址
cout &lt;&lt; &quot;v1与v2的差集为： &quot; &lt;&lt; endl;
vector&lt;int&gt;::iterator itEnd = 
    set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());
for_each(vTarget.begin(), itEnd, myPrint());
cout &lt;&lt; endl;


cout &lt;&lt; &quot;v2与v1的差集为： &quot; &lt;&lt; endl;
itEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());
for_each(vTarget.begin(), itEnd, myPrint());
cout &lt;&lt; endl;</code></pre>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre>
<p>}<br>总结：</p>
<p>求差集的两个集合必须的有序序列<br>目标容器开辟空间需要从两个容器取较大值<br>set_difference返回值既是差集中最后一个元素的位置</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
  </entry>
</search>
